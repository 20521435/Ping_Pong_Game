
PingPongGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011964  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002edc  08011b18  08011b18  00021b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149f4  080149f4  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080149f4  080149f4  000249f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149fc  080149fc  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149fc  080149fc  000249fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a00  08014a00  00024a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08014a04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030354  2**0
                  CONTENTS
 10 .bss          00005d94  20000354  20000354  00030354  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  200060e8  200060e8  00030354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002828d  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060a0  00000000  00000000  00058611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  0005e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002030  00000000  00000000  000609b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d6f7  00000000  00000000  000629e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bfbd  00000000  00000000  000900d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fafb4  00000000  00000000  000bc094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b7048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a33c  00000000  00000000  001b7098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000354 	.word	0x20000354
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011afc 	.word	0x08011afc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000358 	.word	0x20000358
 80001ec:	08011afc 	.word	0x08011afc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <vApplicationGetIdleTaskMemory+0x30>)
 8000f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000370 	.word	0x20000370
 8000f9c:	200003c4 	.word	0x200003c4

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b0a0      	sub	sp, #128	; 0x80
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f002 fe1b 	bl	8003be0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f8a1 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f93f 	bl	8001230 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000fb2:	f000 f907 	bl	80011c4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000fb6:	f001 fde9 	bl	8002b8c <BSP_LCD_Init>
  	BSP_SDRAM_Init();
 8000fba:	f002 fc47 	bl	800384c <BSP_SDRAM_Init>
  	BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000fbe:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f001 fe64 	bl	8002c90 <BSP_LCD_LayerDefaultInit>
  	BSP_LCD_SelectLayer(1);//select on which layer we write
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 fec5 	bl	8002d58 <BSP_LCD_SelectLayer>
  	BSP_LCD_DisplayOn();//turn on LCD
 8000fce:	f002 fa3f 	bl	8003450 <BSP_LCD_DisplayOn>
  	BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue s
 8000fd2:	483a      	ldr	r0, [pc, #232]	; (80010bc <main+0x11c>)
 8000fd4:	f001 ff32 	bl	8002e3c <BSP_LCD_Clear>
  	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000fd8:	4838      	ldr	r0, [pc, #224]	; (80010bc <main+0x11c>)
 8000fda:	f001 fee5 	bl	8002da8 <BSP_LCD_SetBackColor>
  	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f001 fec9 	bl	8002d78 <BSP_LCD_SetTextColor>
  	BSP_LCD_SetFont(&Font20);
 8000fe6:	4836      	ldr	r0, [pc, #216]	; (80010c0 <main+0x120>)
 8000fe8:	f001 fef8 	bl	8002ddc <BSP_LCD_SetFont>
  	BSP_LCD_GetFont();
 8000fec:	f001 ff10 	bl	8002e10 <BSP_LCD_GetFont>
  	BSP_LCD_FillCircle(120, 160, 10);
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	21a0      	movs	r1, #160	; 0xa0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f002 f98b 	bl	8003310 <BSP_LCD_FillCircle>
  	BSP_LCD_DisplayStringAtLine(1, (uint8_t*) "Scored: 0");
 8000ffa:	4932      	ldr	r1, [pc, #200]	; (80010c4 <main+0x124>)
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f002 f847 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQDef(myQueue, 32, int16_t);
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <main+0x128>)
 8001004:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 800100e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fb3d 	bl	800a694 <osMessageCreate>
 800101a:	4603      	mov	r3, r0
 800101c:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <main+0x12c>)
 800101e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 512);
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <main+0x130>)
 8001022:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8001034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f009 fa3d 	bl	800a4ba <osThreadCreate>
 8001040:	4603      	mov	r3, r0
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x134>)
 8001044:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityAboveNormal, 0, 512);
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <main+0x138>)
 8001048:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800104c:	461d      	mov	r5, r3
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800105a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f009 fa2a 	bl	800a4ba <osThreadCreate>
 8001066:	4603      	mov	r3, r0
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <main+0x13c>)
 800106a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 512);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <main+0x140>)
 800106e:	f107 041c 	add.w	r4, r7, #28
 8001072:	461d      	mov	r5, r3
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f009 fa17 	bl	800a4ba <osThreadCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <main+0x144>)
 8001090:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 512);
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <main+0x148>)
 8001094:	463c      	mov	r4, r7
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80010a4:	463b      	mov	r3, r7
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f009 fa06 	bl	800a4ba <osThreadCreate>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <main+0x14c>)
 80010b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010b4:	f009 f9fa 	bl	800a4ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0x118>
 80010ba:	bf00      	nop
 80010bc:	ff0000ff 	.word	0xff0000ff
 80010c0:	2000007c 	.word	0x2000007c
 80010c4:	08011b38 	.word	0x08011b38
 80010c8:	08011b44 	.word	0x08011b44
 80010cc:	2000062c 	.word	0x2000062c
 80010d0:	08011b54 	.word	0x08011b54
 80010d4:	2000061c 	.word	0x2000061c
 80010d8:	08011b70 	.word	0x08011b70
 80010dc:	20000620 	.word	0x20000620
 80010e0:	08011b8c 	.word	0x08011b8c
 80010e4:	20000624 	.word	0x20000624
 80010e8:	08011ba8 	.word	0x08011ba8
 80010ec:	20000628 	.word	0x20000628

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	; 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2230      	movs	r2, #48	; 0x30
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d fe20 	bl	800ed44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SystemClock_Config+0xcc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <SystemClock_Config+0xcc>)
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <SystemClock_Config+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SystemClock_Config+0xd0>)
 800113a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001160:	2308      	movs	r3, #8
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001164:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116e:	2307      	movs	r3, #7
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f005 fb4a 	bl	8006810 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001182:	f000 fbfb 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001192:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2105      	movs	r1, #5
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fdab 	bl	8006d00 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b0:	f000 fbe4 	bl	800197c <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	; 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI5_Init+0x64>)
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <MX_SPI5_Init+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI5_Init+0x64>)
 80011d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI5_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_SPI5_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI5_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI5_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI5_Init+0x64>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI5_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI5_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI5_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI5_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI5_Init+0x64>)
 8001210:	220a      	movs	r2, #10
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_SPI5_Init+0x64>)
 8001216:	f006 fa0c 	bl	8007632 <HAL_SPI_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001220:	f000 fbac 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200005c4 	.word	0x200005c4
 800122c:	40015000 	.word	0x40015000

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <MX_GPIO_Init+0xd4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <MX_GPIO_Init+0xd4>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_GPIO_Init+0xd4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_GPIO_Init+0xd4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <MX_GPIO_Init+0xd8>)
 80012da:	f003 fd29 	bl	8004d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xd8>)
 80012f8:	f003 fa62 	bl	80047c0 <HAL_GPIO_Init>

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40021800 	.word	0x40021800

0800130c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6178      	str	r0, [r7, #20]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001314:	f00c ffc4 	bl	800e2a0 <MX_USB_DEVICE_Init>
  osSignalWait(0x1, osWaitForever);
 8001318:	463b      	mov	r3, r7
 800131a:	f04f 32ff 	mov.w	r2, #4294967295
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f009 f96b 	bl	800a5fc <osSignalWait>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(R == 15) {
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <StartTask01+0x50>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d102      	bne.n	8001334 <StartTask01+0x28>
		  R = 0;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <StartTask01+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
	  }
	  sprintf(buff, "Ball High: %dcm", R);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <StartTask01+0x50>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <StartTask01+0x54>)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <StartTask01+0x58>)
 800133e:	f00e f973 	bl	800f628 <siprintf>
	  CDC_Transmit_HS((uint8_t*) buff, strlen(buff));
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <StartTask01+0x58>)
 8001344:	f7fe ff54 	bl	80001f0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29b      	uxth	r3, r3
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <StartTask01+0x58>)
 8001350:	f00d f864 	bl	800e41c <CDC_Transmit_HS>
    osDelay(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f009 f8fc 	bl	800a552 <osDelay>
	  if(R == 15) {
 800135a:	e7e4      	b.n	8001326 <StartTask01+0x1a>
 800135c:	2000068c 	.word	0x2000068c
 8001360:	08011bc4 	.word	0x08011bc4
 8001364:	2000063c 	.word	0x2000063c

08001368 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	BSP_GYRO_Init();
 8001370:	f001 fb92 	bl	8002a98 <BSP_GYRO_Init>
	float Data[3];
  /* Infinite loop */
  for(;;)
  {
	BSP_GYRO_GetXYZ(Data);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fbf3 	bl	8002b64 <BSP_GYRO_GetXYZ>
	for (int i = 0; i < 3; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e065      	b.n	8001450 <StartTask02+0xe8>
		Data[i] = Data[i] / 1000;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	3318      	adds	r3, #24
 800138a:	443b      	add	r3, r7
 800138c:	3b10      	subs	r3, #16
 800138e:	ed93 7a00 	vldr	s14, [r3]
 8001392:	eddf 6a36 	vldr	s13, [pc, #216]	; 800146c <StartTask02+0x104>
 8001396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3318      	adds	r3, #24
 80013a0:	443b      	add	r3, r7
 80013a2:	3b10      	subs	r3, #16
 80013a4:	edc3 7a00 	vstr	s15, [r3]
		if ((Data[i] < 1 && Data[i] > 0) || (Data[i] > -1 && Data[i] < 0)) {
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	3318      	adds	r3, #24
 80013ae:	443b      	add	r3, r7
 80013b0:	3b10      	subs	r3, #16
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d50b      	bpl.n	80013dc <StartTask02+0x74>
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	3318      	adds	r3, #24
 80013ca:	443b      	add	r3, r7
 80013cc:	3b10      	subs	r3, #16
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dc19      	bgt.n	8001410 <StartTask02+0xa8>
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3318      	adds	r3, #24
 80013e2:	443b      	add	r3, r7
 80013e4:	3b10      	subs	r3, #16
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd13      	ble.n	8001420 <StartTask02+0xb8>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3318      	adds	r3, #24
 80013fe:	443b      	add	r3, r7
 8001400:	3b10      	subs	r3, #16
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d507      	bpl.n	8001420 <StartTask02+0xb8>
			Ange[i] = 0;
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <StartTask02+0x108>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e014      	b.n	800144a <StartTask02+0xe2>
		}
		 else {
			 Ange[i] += Data[i];
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <StartTask02+0x108>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	3318      	adds	r3, #24
 8001432:	443b      	add	r3, r7
 8001434:	3b10      	subs	r3, #16
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <StartTask02+0x108>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b02      	cmp	r3, #2
 8001454:	dd96      	ble.n	8001384 <StartTask02+0x1c>
		 }
	}
	osSignalSet(Task03Handle, 0x1);
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <StartTask02+0x10c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f009 f88d 	bl	800a57c <osSignalSet>

    osDelay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f009 f875 	bl	800a552 <osDelay>
	BSP_GYRO_GetXYZ(Data);
 8001468:	e784      	b.n	8001374 <StartTask02+0xc>
 800146a:	bf00      	nop
 800146c:	447a0000 	.word	0x447a0000
 8001470:	20000630 	.word	0x20000630
 8001474:	20000624 	.word	0x20000624

08001478 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask03 */

	osSignalWait(0x1, osWaitForever);
 8001480:	463b      	mov	r3, r7
 8001482:	f04f 32ff 	mov.w	r2, #4294967295
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f009 f8b7 	bl	800a5fc <osSignalWait>
	float temp;
  /* Infinite loop */
  for(;;)
  {
	if (Ange[0] < -1) {
 800148e:	4b9a      	ldr	r3, [pc, #616]	; (80016f8 <StartTask03+0x280>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	f140 81c4 	bpl.w	800182c <StartTask03+0x3b4>
		while (1) {
			if (Ange[0] > 1) {
 80014a4:	4b94      	ldr	r3, [pc, #592]	; (80016f8 <StartTask03+0x280>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	ddf5      	ble.n	80014a4 <StartTask03+0x2c>
				if (Ange[0] < 70) {
 80014b8:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <StartTask03+0x280>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80016fc <StartTask03+0x284>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	f140 80b3 	bpl.w	8001634 <StartTask03+0x1bc>
					for (float i = 16; i < 41; i = i + 0.01) {
 80014ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d4:	e02a      	b.n	800152c <StartTask03+0xb4>
						R = i;
 80014d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014de:	ee17 3a90 	vmov	r3, s15
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b86      	ldr	r3, [pc, #536]	; (8001700 <StartTask03+0x288>)
 80014e6:	801a      	strh	r2, [r3, #0]
						BSP_LCD_FillCircle(120, 160, i);
 80014e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	21a0      	movs	r1, #160	; 0xa0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f001 ff08 	bl	8003310 <BSP_LCD_FillCircle>
						osSignalSet(Task01Handle, 0x1);
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <StartTask03+0x28c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	4618      	mov	r0, r3
 8001508:	f009 f838 	bl	800a57c <osSignalSet>
					for (float i = 16; i < 41; i = i + 0.01) {
 800150c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800150e:	f7ff f82b 	bl	8000568 <__aeabi_f2d>
 8001512:	a375      	add	r3, pc, #468	; (adr r3, 80016e8 <StartTask03+0x270>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe fec8 	bl	80002ac <__adddf3>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb50 	bl	8000bc8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800152c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001530:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001708 <StartTask03+0x290>
 8001534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d4cb      	bmi.n	80014d6 <StartTask03+0x5e>
					}
					for (float j = R; j > 15; j = j - 0.03) {
 800153e:	4b70      	ldr	r3, [pc, #448]	; (8001700 <StartTask03+0x288>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800154e:	e067      	b.n	8001620 <StartTask03+0x1a8>
						R = j;
 8001550:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001558:	ee17 3a90 	vmov	r3, s15
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b68      	ldr	r3, [pc, #416]	; (8001700 <StartTask03+0x288>)
 8001560:	801a      	strh	r2, [r3, #0]
						temp = (float) j - R;
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <StartTask03+0x288>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001576:	edc7 7a07 	vstr	s15, [r7, #28]
						if (temp < 0.03) {
 800157a:	69f8      	ldr	r0, [r7, #28]
 800157c:	f7fe fff4 	bl	8000568 <__aeabi_f2d>
 8001580:	a35b      	add	r3, pc, #364	; (adr r3, 80016f0 <StartTask03+0x278>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff fab9 	bl	8000afc <__aeabi_dcmplt>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <StartTask03+0x11e>
							BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001590:	485e      	ldr	r0, [pc, #376]	; (800170c <StartTask03+0x294>)
 8001592:	f001 fc53 	bl	8002e3c <BSP_LCD_Clear>
						}
						if (j > 15 && j < 15.50) {
 8001596:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800159a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	dd0e      	ble.n	80015c6 <StartTask03+0x14e>
 80015a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015ac:	eeb2 7a0f 	vmov.f32	s14, #47	; 0x41780000  15.5
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d505      	bpl.n	80015c6 <StartTask03+0x14e>
							osSignalSet(Task04Handle, 0x1);
 80015ba:	4b55      	ldr	r3, [pc, #340]	; (8001710 <StartTask03+0x298>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f008 ffdb 	bl	800a57c <osSignalSet>
						}
						sprintf(score, "Scored: %d", p);
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <StartTask03+0x29c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4952      	ldr	r1, [pc, #328]	; (8001718 <StartTask03+0x2a0>)
 80015ce:	4853      	ldr	r0, [pc, #332]	; (800171c <StartTask03+0x2a4>)
 80015d0:	f00e f82a 	bl	800f628 <siprintf>
						BSP_LCD_DisplayStringAtLine(1, (uint8_t*) score);
 80015d4:	4951      	ldr	r1, [pc, #324]	; (800171c <StartTask03+0x2a4>)
 80015d6:	2001      	movs	r0, #1
 80015d8:	f001 fd5a 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
						BSP_LCD_FillCircle(120, 160, j);
 80015dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	21a0      	movs	r1, #160	; 0xa0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f001 fe8e 	bl	8003310 <BSP_LCD_FillCircle>
						osSignalSet(Task01Handle, 0x1);
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <StartTask03+0x28c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f008 ffbe 	bl	800a57c <osSignalSet>
					for (float j = R; j > 15; j = j - 0.03) {
 8001600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001602:	f7fe ffb1 	bl	8000568 <__aeabi_f2d>
 8001606:	a33a      	add	r3, pc, #232	; (adr r3, 80016f0 <StartTask03+0x278>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fe4c 	bl	80002a8 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fad6 	bl	8000bc8 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001624:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	dc8e      	bgt.n	8001550 <StartTask03+0xd8>
 8001632:	e0ec      	b.n	800180e <StartTask03+0x396>

					}
				}
				else {
					if (Ange[0] > 69 && Ange[0] < 80) {
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <StartTask03+0x280>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001720 <StartTask03+0x2a8>
 800163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	f340 80e2 	ble.w	800180e <StartTask03+0x396>
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <StartTask03+0x280>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001724 <StartTask03+0x2ac>
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	f140 80d7 	bpl.w	800180e <StartTask03+0x396>
						for (float i = 16; i < 61; i = i + 0.01) {
 8001660:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e02a      	b.n	80016be <StartTask03+0x246>
							R = i;
 8001668:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800166c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001670:	ee17 3a90 	vmov	r3, s15
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <StartTask03+0x288>)
 8001678:	801a      	strh	r2, [r3, #0]
							BSP_LCD_FillCircle(120, 160, i);
 800167a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001682:	ee17 3a90 	vmov	r3, s15
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	21a0      	movs	r1, #160	; 0xa0
 800168c:	2078      	movs	r0, #120	; 0x78
 800168e:	f001 fe3f 	bl	8003310 <BSP_LCD_FillCircle>
							osSignalSet(Task01Handle, 0x1);
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <StartTask03+0x28c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2101      	movs	r1, #1
 8001698:	4618      	mov	r0, r3
 800169a:	f008 ff6f 	bl	800a57c <osSignalSet>
						for (float i = 16; i < 61; i = i + 0.01) {
 800169e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a0:	f7fe ff62 	bl	8000568 <__aeabi_f2d>
 80016a4:	a310      	add	r3, pc, #64	; (adr r3, 80016e8 <StartTask03+0x270>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe fdff 	bl	80002ac <__adddf3>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa87 	bl	8000bc8 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001728 <StartTask03+0x2b0>
 80016c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d4cb      	bmi.n	8001668 <StartTask03+0x1f0>
						}
						for (float j = R; j > 15; j = j - 0.03) {
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <StartTask03+0x288>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016dc:	edc7 7a08 	vstr	s15, [r7, #32]
 80016e0:	e08c      	b.n	80017fc <StartTask03+0x384>
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	47ae147b 	.word	0x47ae147b
 80016ec:	3f847ae1 	.word	0x3f847ae1
 80016f0:	eb851eb8 	.word	0xeb851eb8
 80016f4:	3f9eb851 	.word	0x3f9eb851
 80016f8:	20000630 	.word	0x20000630
 80016fc:	428c0000 	.word	0x428c0000
 8001700:	2000068c 	.word	0x2000068c
 8001704:	2000061c 	.word	0x2000061c
 8001708:	42240000 	.word	0x42240000
 800170c:	ff0000ff 	.word	0xff0000ff
 8001710:	20000628 	.word	0x20000628
 8001714:	2000068e 	.word	0x2000068e
 8001718:	08011bd4 	.word	0x08011bd4
 800171c:	20000664 	.word	0x20000664
 8001720:	428a0000 	.word	0x428a0000
 8001724:	42a00000 	.word	0x42a00000
 8001728:	42740000 	.word	0x42740000
							R = j;
 800172c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b45      	ldr	r3, [pc, #276]	; (8001850 <StartTask03+0x3d8>)
 800173c:	801a      	strh	r2, [r3, #0]
							temp = (float) j - R;
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <StartTask03+0x3d8>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	ed97 7a08 	vldr	s14, [r7, #32]
 800174e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001752:	edc7 7a07 	vstr	s15, [r7, #28]
							if (temp < 0.03) {
 8001756:	69f8      	ldr	r0, [r7, #28]
 8001758:	f7fe ff06 	bl	8000568 <__aeabi_f2d>
 800175c:	a33a      	add	r3, pc, #232	; (adr r3, 8001848 <StartTask03+0x3d0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f9cb 	bl	8000afc <__aeabi_dcmplt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <StartTask03+0x2fa>
								BSP_LCD_Clear(LCD_COLOR_BLUE);
 800176c:	4839      	ldr	r0, [pc, #228]	; (8001854 <StartTask03+0x3dc>)
 800176e:	f001 fb65 	bl	8002e3c <BSP_LCD_Clear>
							}
							if (j > 15 && j < 15.50) {
 8001772:	edd7 7a08 	vldr	s15, [r7, #32]
 8001776:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd0e      	ble.n	80017a2 <StartTask03+0x32a>
 8001784:	edd7 7a08 	vldr	s15, [r7, #32]
 8001788:	eeb2 7a0f 	vmov.f32	s14, #47	; 0x41780000  15.5
 800178c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	d505      	bpl.n	80017a2 <StartTask03+0x32a>
								osSignalSet(Task04Handle, 0x1);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <StartTask03+0x3e0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f008 feed 	bl	800a57c <osSignalSet>
							}
							sprintf(score, "Scored: %d", p);
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <StartTask03+0x3e4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	492d      	ldr	r1, [pc, #180]	; (8001860 <StartTask03+0x3e8>)
 80017aa:	482e      	ldr	r0, [pc, #184]	; (8001864 <StartTask03+0x3ec>)
 80017ac:	f00d ff3c 	bl	800f628 <siprintf>
							BSP_LCD_DisplayStringAtLine(1, (uint8_t*) score);
 80017b0:	492c      	ldr	r1, [pc, #176]	; (8001864 <StartTask03+0x3ec>)
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 fc6c 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
							BSP_LCD_FillCircle(120, 160, j);
 80017b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80017bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c0:	ee17 3a90 	vmov	r3, s15
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	21a0      	movs	r1, #160	; 0xa0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f001 fda0 	bl	8003310 <BSP_LCD_FillCircle>
							osSignalSet(Task01Handle, 0x1);
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <StartTask03+0x3f0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f008 fed0 	bl	800a57c <osSignalSet>
						for (float j = R; j > 15; j = j - 0.03) {
 80017dc:	6a38      	ldr	r0, [r7, #32]
 80017de:	f7fe fec3 	bl	8000568 <__aeabi_f2d>
 80017e2:	a319      	add	r3, pc, #100	; (adr r3, 8001848 <StartTask03+0x3d0>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fd5e 	bl	80002a8 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f9e8 	bl	8000bc8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001800:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dc8e      	bgt.n	800172c <StartTask03+0x2b4>
						}
					}
				}
				if (Ange[0] < 0) {
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <StartTask03+0x3f4>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d505      	bpl.n	800182a <StartTask03+0x3b2>
					osSignalSet(Task04Handle, 0x2);
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <StartTask03+0x3e0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2102      	movs	r1, #2
 8001824:	4618      	mov	r0, r3
 8001826:	f008 fea9 	bl	800a57c <osSignalSet>
			if (Ange[0] > 1) {
 800182a:	e63b      	b.n	80014a4 <StartTask03+0x2c>
				}
			}
		}
	}
	else {
		R = 0;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <StartTask03+0x3d8>)
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
		osSignalSet(Task01Handle, 0x1);
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <StartTask03+0x3f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2101      	movs	r1, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f008 fe9f 	bl	800a57c <osSignalSet>
	}
    osDelay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f008 fe87 	bl	800a552 <osDelay>
	if (Ange[0] < -1) {
 8001844:	e623      	b.n	800148e <StartTask03+0x16>
 8001846:	bf00      	nop
 8001848:	eb851eb8 	.word	0xeb851eb8
 800184c:	3f9eb851 	.word	0x3f9eb851
 8001850:	2000068c 	.word	0x2000068c
 8001854:	ff0000ff 	.word	0xff0000ff
 8001858:	20000628 	.word	0x20000628
 800185c:	2000068e 	.word	0x2000068e
 8001860:	08011bd4 	.word	0x08011bd4
 8001864:	20000664 	.word	0x20000664
 8001868:	2000061c 	.word	0x2000061c
 800186c:	20000630 	.word	0x20000630

08001870 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	osSignalWait(0x1, osWaitForever);
 8001878:	463b      	mov	r3, r7
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f008 febb 	bl	800a5fc <osSignalWait>
	if (Ange[0] > 1) {
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <StartTask04+0xc4>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	dd1d      	ble.n	80018d6 <StartTask04+0x66>
		p = p + 1;
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <StartTask04+0xc8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <StartTask04+0xc8>)
 80018a4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ac:	4823      	ldr	r0, [pc, #140]	; (800193c <StartTask04+0xcc>)
 80018ae:	f003 fa3f 	bl	8004d30 <HAL_GPIO_WritePin>
		osDelay(500);
 80018b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b6:	f008 fe4c 	bl	800a552 <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <StartTask04+0xcc>)
 80018c2:	f003 fa35 	bl	8004d30 <HAL_GPIO_WritePin>
		osSignalWait(0x2, osWaitForever);
 80018c6:	463b      	mov	r3, r7
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	2102      	movs	r1, #2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f008 fe94 	bl	800a5fc <osSignalWait>
 80018d4:	e029      	b.n	800192a <StartTask04+0xba>
	}
	else {
			p = 0;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <StartTask04+0xc8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
			while (1) {
				osThreadSuspend(Task02Handle);
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <StartTask04+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f008 feff 	bl	800a6e4 <osThreadSuspend>
				osThreadSuspend(Task03Handle);
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <StartTask04+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f008 fefa 	bl	800a6e4 <osThreadSuspend>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f6:	4811      	ldr	r0, [pc, #68]	; (800193c <StartTask04+0xcc>)
 80018f8:	f003 fa1a 	bl	8004d30 <HAL_GPIO_WritePin>
				BSP_LCD_Clear(LCD_COLOR_RED);
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <StartTask04+0xd8>)
 80018fe:	f001 fa9d 	bl	8002e3c <BSP_LCD_Clear>
				BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001902:	4811      	ldr	r0, [pc, #68]	; (8001948 <StartTask04+0xd8>)
 8001904:	f001 fa50 	bl	8002da8 <BSP_LCD_SetBackColor>
				BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "    GAME OVER! ");
 8001908:	4910      	ldr	r1, [pc, #64]	; (800194c <StartTask04+0xdc>)
 800190a:	2005      	movs	r0, #5
 800190c:	f001 fbc0 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
				BSP_LCD_DisplayStringAtLine(6, (uint8_t*) "   PLEASE ENTER ");
 8001910:	490f      	ldr	r1, [pc, #60]	; (8001950 <StartTask04+0xe0>)
 8001912:	2006      	movs	r0, #6
 8001914:	f001 fbbc 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
				BSP_LCD_DisplayStringAtLine(7, (uint8_t*) " RESET TO RESUME! ");
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <StartTask04+0xe4>)
 800191a:	2007      	movs	r0, #7
 800191c:	f001 fbb8 	bl	8003090 <BSP_LCD_DisplayStringAtLine>
				osDelay(osWaitForever);
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f008 fe15 	bl	800a552 <osDelay>
				osThreadSuspend(Task02Handle);
 8001928:	e7d8      	b.n	80018dc <StartTask04+0x6c>
			}
	}
    osDelay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f008 fe11 	bl	800a552 <osDelay>
	osSignalWait(0x1, osWaitForever);
 8001930:	e7a2      	b.n	8001878 <StartTask04+0x8>
 8001932:	bf00      	nop
 8001934:	20000630 	.word	0x20000630
 8001938:	2000068e 	.word	0x2000068e
 800193c:	40021800 	.word	0x40021800
 8001940:	20000620 	.word	0x20000620
 8001944:	20000624 	.word	0x20000624
 8001948:	ffff0000 	.word	0xffff0000
 800194c:	08011be0 	.word	0x08011be0
 8001950:	08011bf0 	.word	0x08011bf0
 8001954:	08011c04 	.word	0x08011c04

08001958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196a:	f002 f95b 	bl	8003c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40001000 	.word	0x40001000

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_MspInit+0x64>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_MspInit+0x64>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_MspInit+0x64>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x64>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_MspInit+0x64>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_MspInit+0x64>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	210f      	movs	r1, #15
 80019ca:	f06f 0001 	mvn.w	r0, #1
 80019ce:	f002 fa49 	bl	8003e64 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	2005      	movs	r0, #5
 80019d8:	f002 fa44 	bl	8003e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019dc:	2005      	movs	r0, #5
 80019de:	f002 fa5d 	bl	8003e9c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d134      	bne.n	8001a7c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_SPI_MspInit+0x98>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4809      	ldr	r0, [pc, #36]	; (8001a8c <HAL_SPI_MspInit+0x9c>)
 8001a68:	f002 feaa 	bl	80047c0 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2105      	movs	r1, #5
 8001a70:	2055      	movs	r0, #85	; 0x55
 8001a72:	f002 f9f7 	bl	8003e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001a76:	2055      	movs	r0, #85	; 0x55
 8001a78:	f002 fa10 	bl	8003e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40015000 	.word	0x40015000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40021400 	.word	0x40021400

08001a90 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_SPI_MspDeInit+0x38>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_SPI_MspDeInit+0x3c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_SPI_MspDeInit+0x3c>)
 8001aa8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001aae:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <HAL_SPI_MspDeInit+0x40>)
 8001ab4:	f003 f830 	bl	8004b18 <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 8001ab8:	2055      	movs	r0, #85	; 0x55
 8001aba:	f002 f9fd 	bl	8003eb8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40015000 	.word	0x40015000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40021400 	.word	0x40021400

08001ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_InitTick+0xe4>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <HAL_InitTick+0xe4>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_InitTick+0xe4>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b00:	f107 0210 	add.w	r2, r7, #16
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 fb04 	bl	8007118 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b1a:	f005 fae9 	bl	80070f0 <HAL_RCC_GetPCLK1Freq>
 8001b1e:	6378      	str	r0, [r7, #52]	; 0x34
 8001b20:	e004      	b.n	8001b2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b22:	f005 fae5 	bl	80070f0 <HAL_RCC_GetPCLK1Freq>
 8001b26:	4603      	mov	r3, r0
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_InitTick+0xe8>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	0c9b      	lsrs	r3, r3, #18
 8001b36:	3b01      	subs	r3, #1
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b3c:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_InitTick+0xf0>)
 8001b3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b48:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b60:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b62:	f006 fc63 	bl	800842c <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11b      	bne.n	8001bac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b74:	4812      	ldr	r0, [pc, #72]	; (8001bc0 <HAL_InitTick+0xec>)
 8001b76:	f006 fcb3 	bl	80084e0 <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b88:	2036      	movs	r0, #54	; 0x36
 8001b8a:	f002 f987 	bl	8003e9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d808      	bhi.n	8001ba6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	2036      	movs	r0, #54	; 0x36
 8001b9a:	f002 f963 	bl	8003e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_InitTick+0xf4>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e002      	b.n	8001bac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3738      	adds	r7, #56	; 0x38
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	20000690 	.word	0x20000690
 8001bc4:	40001000 	.word	0x40001000
 8001bc8:	20000088 	.word	0x20000088

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM6_DAC_IRQHandler+0x10>)
 8001c0e:	f006 fcd7 	bl	80085c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000690 	.word	0x20000690

08001c1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <OTG_HS_IRQHandler+0x10>)
 8001c22:	f003 fcc8 	bl	80055b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20005b6c 	.word	0x20005b6c

08001c30 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <SPI5_IRQHandler+0x10>)
 8001c36:	f006 f99d 	bl	8007f74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200005c4 	.word	0x200005c4

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c5e:	f00d f839 	bl	800ecd4 <__errno>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
	return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0x12>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
	}

return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf1      	blt.n	8001cd4 <_write+0x12>
	}
	return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f00c ff9e 	bl	800ecd4 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20030000 	.word	0x20030000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	200006d8 	.word	0x200006d8
 8001dcc:	200060e8 	.word	0x200060e8

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e10:	4c0b      	ldr	r4, [pc, #44]	; (8001e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff ffd7 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f00c ff5d 	bl	800ece0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff f8bb 	bl	8000fa0 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001e38:	08014a04 	.word	0x08014a04
  ldr r2, =_sbss
 8001e3c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001e40:	200060e8 	.word	0x200060e8

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>

08001e46 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001e4a:	f000 fc73 	bl	8002734 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001e4e:	20ca      	movs	r0, #202	; 0xca
 8001e50:	f000 f95d 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001e54:	20c3      	movs	r0, #195	; 0xc3
 8001e56:	f000 f967 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001e5a:	2008      	movs	r0, #8
 8001e5c:	f000 f964 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001e60:	2050      	movs	r0, #80	; 0x50
 8001e62:	f000 f961 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001e66:	20cf      	movs	r0, #207	; 0xcf
 8001e68:	f000 f951 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f95b 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001e72:	20c1      	movs	r0, #193	; 0xc1
 8001e74:	f000 f958 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001e78:	2030      	movs	r0, #48	; 0x30
 8001e7a:	f000 f955 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001e7e:	20ed      	movs	r0, #237	; 0xed
 8001e80:	f000 f945 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001e84:	2064      	movs	r0, #100	; 0x64
 8001e86:	f000 f94f 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 f94c 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001e90:	2012      	movs	r0, #18
 8001e92:	f000 f949 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001e96:	2081      	movs	r0, #129	; 0x81
 8001e98:	f000 f946 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001e9c:	20e8      	movs	r0, #232	; 0xe8
 8001e9e:	f000 f936 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001ea2:	2085      	movs	r0, #133	; 0x85
 8001ea4:	f000 f940 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 f93d 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001eae:	2078      	movs	r0, #120	; 0x78
 8001eb0:	f000 f93a 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001eb4:	20cb      	movs	r0, #203	; 0xcb
 8001eb6:	f000 f92a 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001eba:	2039      	movs	r0, #57	; 0x39
 8001ebc:	f000 f934 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001ec0:	202c      	movs	r0, #44	; 0x2c
 8001ec2:	f000 f931 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f92e 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001ecc:	2034      	movs	r0, #52	; 0x34
 8001ece:	f000 f92b 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f000 f928 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001ed8:	20f7      	movs	r0, #247	; 0xf7
 8001eda:	f000 f918 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001ede:	2020      	movs	r0, #32
 8001ee0:	f000 f922 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ee4:	20ea      	movs	r0, #234	; 0xea
 8001ee6:	f000 f912 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f91c 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f000 f919 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001ef6:	20b1      	movs	r0, #177	; 0xb1
 8001ef8:	f000 f909 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f913 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f02:	201b      	movs	r0, #27
 8001f04:	f000 f910 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001f08:	20b6      	movs	r0, #182	; 0xb6
 8001f0a:	f000 f900 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f000 f90a 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001f14:	20a2      	movs	r0, #162	; 0xa2
 8001f16:	f000 f907 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001f1a:	20c0      	movs	r0, #192	; 0xc0
 8001f1c:	f000 f8f7 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001f20:	2010      	movs	r0, #16
 8001f22:	f000 f901 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001f26:	20c1      	movs	r0, #193	; 0xc1
 8001f28:	f000 f8f1 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001f2c:	2010      	movs	r0, #16
 8001f2e:	f000 f8fb 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001f32:	20c5      	movs	r0, #197	; 0xc5
 8001f34:	f000 f8eb 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001f38:	2045      	movs	r0, #69	; 0x45
 8001f3a:	f000 f8f5 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001f3e:	2015      	movs	r0, #21
 8001f40:	f000 f8f2 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001f44:	20c7      	movs	r0, #199	; 0xc7
 8001f46:	f000 f8e2 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001f4a:	2090      	movs	r0, #144	; 0x90
 8001f4c:	f000 f8ec 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001f50:	2036      	movs	r0, #54	; 0x36
 8001f52:	f000 f8dc 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001f56:	20c8      	movs	r0, #200	; 0xc8
 8001f58:	f000 f8e6 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001f5c:	20f2      	movs	r0, #242	; 0xf2
 8001f5e:	f000 f8d6 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f8e0 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001f68:	20b0      	movs	r0, #176	; 0xb0
 8001f6a:	f000 f8d0 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001f6e:	20c2      	movs	r0, #194	; 0xc2
 8001f70:	f000 f8da 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001f74:	20b6      	movs	r0, #182	; 0xb6
 8001f76:	f000 f8ca 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f000 f8d4 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001f80:	20a7      	movs	r0, #167	; 0xa7
 8001f82:	f000 f8d1 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001f86:	2027      	movs	r0, #39	; 0x27
 8001f88:	f000 f8ce 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	f000 f8cb 	bl	8002128 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001f92:	202a      	movs	r0, #42	; 0x2a
 8001f94:	f000 f8bb 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f8c5 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f8c2 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 f8bf 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001faa:	20ef      	movs	r0, #239	; 0xef
 8001fac:	f000 f8bc 	bl	8002128 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001fb0:	202b      	movs	r0, #43	; 0x2b
 8001fb2:	f000 f8ac 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f8b6 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 f8b3 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f000 f8b0 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001fc8:	203f      	movs	r0, #63	; 0x3f
 8001fca:	f000 f8ad 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001fce:	20f6      	movs	r0, #246	; 0xf6
 8001fd0:	f000 f89d 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f000 f8a7 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f8a4 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001fe0:	2006      	movs	r0, #6
 8001fe2:	f000 f8a1 	bl	8002128 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001fe6:	202c      	movs	r0, #44	; 0x2c
 8001fe8:	f000 f891 	bl	800210e <ili9341_WriteReg>
  LCD_Delay(200);
 8001fec:	20c8      	movs	r0, #200	; 0xc8
 8001fee:	f000 fc8f 	bl	8002910 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001ff2:	2026      	movs	r0, #38	; 0x26
 8001ff4:	f000 f88b 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f000 f895 	bl	8002128 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001ffe:	20e0      	movs	r0, #224	; 0xe0
 8002000:	f000 f885 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002004:	200f      	movs	r0, #15
 8002006:	f000 f88f 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800200a:	2029      	movs	r0, #41	; 0x29
 800200c:	f000 f88c 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002010:	2024      	movs	r0, #36	; 0x24
 8002012:	f000 f889 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002016:	200c      	movs	r0, #12
 8002018:	f000 f886 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800201c:	200e      	movs	r0, #14
 800201e:	f000 f883 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002022:	2009      	movs	r0, #9
 8002024:	f000 f880 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002028:	204e      	movs	r0, #78	; 0x4e
 800202a:	f000 f87d 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 f87a 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002034:	203c      	movs	r0, #60	; 0x3c
 8002036:	f000 f877 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800203a:	2009      	movs	r0, #9
 800203c:	f000 f874 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002040:	2013      	movs	r0, #19
 8002042:	f000 f871 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002046:	2005      	movs	r0, #5
 8002048:	f000 f86e 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800204c:	2017      	movs	r0, #23
 800204e:	f000 f86b 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002052:	2011      	movs	r0, #17
 8002054:	f000 f868 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f865 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800205e:	20e1      	movs	r0, #225	; 0xe1
 8002060:	f000 f855 	bl	800210e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f85f 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800206a:	2016      	movs	r0, #22
 800206c:	f000 f85c 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002070:	201b      	movs	r0, #27
 8002072:	f000 f859 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002076:	2004      	movs	r0, #4
 8002078:	f000 f856 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800207c:	2011      	movs	r0, #17
 800207e:	f000 f853 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002082:	2007      	movs	r0, #7
 8002084:	f000 f850 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002088:	2031      	movs	r0, #49	; 0x31
 800208a:	f000 f84d 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800208e:	2033      	movs	r0, #51	; 0x33
 8002090:	f000 f84a 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002094:	2042      	movs	r0, #66	; 0x42
 8002096:	f000 f847 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800209a:	2005      	movs	r0, #5
 800209c:	f000 f844 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020a0:	200c      	movs	r0, #12
 80020a2:	f000 f841 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80020a6:	200a      	movs	r0, #10
 80020a8:	f000 f83e 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80020ac:	2028      	movs	r0, #40	; 0x28
 80020ae:	f000 f83b 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80020b2:	202f      	movs	r0, #47	; 0x2f
 80020b4:	f000 f838 	bl	8002128 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f000 f835 	bl	8002128 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80020be:	2011      	movs	r0, #17
 80020c0:	f000 f825 	bl	800210e <ili9341_WriteReg>
  LCD_Delay(200);
 80020c4:	20c8      	movs	r0, #200	; 0xc8
 80020c6:	f000 fc23 	bl	8002910 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80020ca:	2029      	movs	r0, #41	; 0x29
 80020cc:	f000 f81f 	bl	800210e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80020d0:	202c      	movs	r0, #44	; 0x2c
 80020d2:	f000 f81c 	bl	800210e <ili9341_WriteReg>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}

080020da <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80020de:	f000 fb29 	bl	8002734 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80020e2:	2103      	movs	r1, #3
 80020e4:	20d3      	movs	r0, #211	; 0xd3
 80020e6:	f000 f82c 	bl	8002142 <ili9341_ReadData>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29b      	uxth	r3, r3
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80020f6:	2029      	movs	r0, #41	; 0x29
 80020f8:	f000 f809 	bl	800210e <ili9341_WriteReg>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002104:	2028      	movs	r0, #40	; 0x28
 8002106:	f000 f802 	bl	800210e <ili9341_WriteReg>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}

0800210e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fba4 	bl	8002868 <LCD_IO_WriteReg>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fb75 	bl	8002824 <LCD_IO_WriteData>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	460a      	mov	r2, r1
 800214c:	80fb      	strh	r3, [r7, #6]
 800214e:	4613      	mov	r3, r2
 8002150:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002152:	797a      	ldrb	r2, [r7, #5]
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fba7 	bl	80028ac <LCD_IO_ReadData>
 800215e:	4603      	mov	r3, r0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800216c:	23f0      	movs	r3, #240	; 0xf0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800217c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002198:	f000 fbc6 	bl	8002928 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80021a2:	f107 030f 	add.w	r3, r7, #15
 80021a6:	2201      	movs	r2, #1
 80021a8:	2120      	movs	r1, #32
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fc08 	bl	80029c0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80021ba:	f107 030f 	add.w	r3, r7, #15
 80021be:	2201      	movs	r2, #1
 80021c0:	2123      	movs	r1, #35	; 0x23
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fbfc 	bl	80029c0 <GYRO_IO_Write>
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80021e4:	f000 fba0 	bl	8002928 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	2201      	movs	r2, #1
 80021ec:	210f      	movs	r1, #15
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fc18 	bl	8002a24 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	2201      	movs	r2, #1
 8002208:	2124      	movs	r1, #36	; 0x24
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fc0a 	bl	8002a24 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002216:	b2db      	uxtb	r3, r3
 8002218:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	2201      	movs	r2, #1
 800221e:	2124      	movs	r1, #36	; 0x24
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fbcd 	bl	80029c0 <GYRO_IO_Write>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002242:	f107 030f 	add.w	r3, r7, #15
 8002246:	2201      	movs	r2, #1
 8002248:	2120      	movs	r1, #32
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fbb8 	bl	80029c0 <GYRO_IO_Write>
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	2300      	movs	r3, #0
 8002268:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800226a:	f107 030f 	add.w	r3, r7, #15
 800226e:	2201      	movs	r2, #1
 8002270:	2130      	movs	r1, #48	; 0x30
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fbd6 	bl	8002a24 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002278:	f107 030e 	add.w	r3, r7, #14
 800227c:	2201      	movs	r2, #1
 800227e:	2122      	movs	r1, #34	; 0x22
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fbcf 	bl	8002a24 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800228c:	b2db      	uxtb	r3, r3
 800228e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	121b      	asrs	r3, r3, #8
 8002296:	b25a      	sxtb	r2, r3
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	f023 0320 	bic.w	r3, r3, #32
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	7bbb      	ldrb	r3, [r7, #14]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80022ba:	f107 030f 	add.w	r3, r7, #15
 80022be:	2201      	movs	r2, #1
 80022c0:	2130      	movs	r1, #48	; 0x30
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fb7c 	bl	80029c0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80022c8:	f107 030e 	add.w	r3, r7, #14
 80022cc:	2201      	movs	r2, #1
 80022ce:	2122      	movs	r1, #34	; 0x22
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fb75 	bl	80029c0 <GYRO_IO_Write>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80022e8:	f107 030f 	add.w	r3, r7, #15
 80022ec:	2201      	movs	r2, #1
 80022ee:	2122      	movs	r1, #34	; 0x22
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fb97 	bl	8002a24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002302:	b2db      	uxtb	r3, r3
 8002304:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e00c      	b.n	800232c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d109      	bne.n	800232c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	f023 0308 	bic.w	r3, r3, #8
 800231e:	b2db      	uxtb	r3, r3
 8002320:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	b2db      	uxtb	r3, r3
 800232a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800232c:	f107 030f 	add.w	r3, r7, #15
 8002330:	2201      	movs	r2, #1
 8002332:	2122      	movs	r1, #34	; 0x22
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fb43 	bl	80029c0 <GYRO_IO_Write>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800234c:	f107 030f 	add.w	r3, r7, #15
 8002350:	2201      	movs	r2, #1
 8002352:	2122      	movs	r1, #34	; 0x22
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fb65 	bl	8002a24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002366:	b2db      	uxtb	r3, r3
 8002368:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e009      	b.n	8002384 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	f023 0308 	bic.w	r3, r3, #8
 800237c:	b2db      	uxtb	r3, r3
 800237e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002384:	f107 030f 	add.w	r3, r7, #15
 8002388:	2201      	movs	r2, #1
 800238a:	2122      	movs	r1, #34	; 0x22
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fb17 	bl	80029c0 <GYRO_IO_Write>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80023a4:	f107 030f 	add.w	r3, r7, #15
 80023a8:	2201      	movs	r2, #1
 80023aa:	2121      	movs	r1, #33	; 0x21
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fb39 	bl	8002a24 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80023c6:	f107 030f 	add.w	r3, r7, #15
 80023ca:	2201      	movs	r2, #1
 80023cc:	2121      	movs	r1, #33	; 0x21
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 faf6 	bl	80029c0 <GYRO_IO_Write>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80023e6:	f107 030f 	add.w	r3, r7, #15
 80023ea:	2201      	movs	r2, #1
 80023ec:	2124      	movs	r1, #36	; 0x24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fb18 	bl	8002a24 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4313      	orrs	r3, r2
 8002404:	b2db      	uxtb	r3, r3
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002408:	f107 030f 	add.w	r3, r7, #15
 800240c:	2201      	movs	r2, #1
 800240e:	2124      	movs	r1, #36	; 0x24
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fad5 	bl	80029c0 <GYRO_IO_Write>
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	2300      	movs	r3, #0
 800242e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002448:	f107 030f 	add.w	r3, r7, #15
 800244c:	2201      	movs	r2, #1
 800244e:	2123      	movs	r1, #35	; 0x23
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fae7 	bl	8002a24 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002456:	f107 0318 	add.w	r3, r7, #24
 800245a:	2206      	movs	r2, #6
 800245c:	2128      	movs	r1, #40	; 0x28
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fae0 	bl	8002a24 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d123      	bne.n	80024b6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	e01c      	b.n	80024ae <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	3301      	adds	r3, #1
 800247a:	3328      	adds	r3, #40	; 0x28
 800247c:	443b      	add	r3, r7
 800247e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002482:	b29b      	uxth	r3, r3
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b29a      	uxth	r2, r3
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	3328      	adds	r3, #40	; 0x28
 800248e:	443b      	add	r3, r7
 8002490:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4413      	add	r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	b21a      	sxth	r2, r3
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	3328      	adds	r3, #40	; 0x28
 80024a2:	443b      	add	r3, r7
 80024a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	3301      	adds	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	dddf      	ble.n	8002474 <L3GD20_ReadXYZAngRate+0x54>
 80024b4:	e022      	b.n	80024fc <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	e01c      	b.n	80024f6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	3328      	adds	r3, #40	; 0x28
 80024c2:	443b      	add	r3, r7
 80024c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	3301      	adds	r3, #1
 80024d4:	3328      	adds	r3, #40	; 0x28
 80024d6:	443b      	add	r3, r7
 80024d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4413      	add	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b21a      	sxth	r2, r3
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	3328      	adds	r3, #40	; 0x28
 80024ea:	443b      	add	r3, r7
 80024ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	3301      	adds	r3, #1
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	dddf      	ble.n	80024bc <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002502:	2b20      	cmp	r3, #32
 8002504:	d00c      	beq.n	8002520 <L3GD20_ReadXYZAngRate+0x100>
 8002506:	2b20      	cmp	r3, #32
 8002508:	dc0d      	bgt.n	8002526 <L3GD20_ReadXYZAngRate+0x106>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <L3GD20_ReadXYZAngRate+0xf4>
 800250e:	2b10      	cmp	r3, #16
 8002510:	d003      	beq.n	800251a <L3GD20_ReadXYZAngRate+0xfa>
 8002512:	e008      	b.n	8002526 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <L3GD20_ReadXYZAngRate+0x14c>)
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002518:	e005      	b.n	8002526 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <L3GD20_ReadXYZAngRate+0x150>)
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800251e:	e002      	b.n	8002526 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <L3GD20_ReadXYZAngRate+0x154>)
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002524:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	e016      	b.n	800255a <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	3328      	adds	r3, #40	; 0x28
 8002532:	443b      	add	r3, r7
 8002534:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	3301      	adds	r3, #1
 8002558:	623b      	str	r3, [r7, #32]
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b02      	cmp	r3, #2
 800255e:	dde5      	ble.n	800252c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	410c0000 	.word	0x410c0000
 8002570:	418c0000 	.word	0x418c0000
 8002574:	428c0000 	.word	0x428c0000

08002578 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800257c:	4819      	ldr	r0, [pc, #100]	; (80025e4 <SPIx_Init+0x6c>)
 800257e:	f005 fe03 	bl	8008188 <HAL_SPI_GetState>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d12b      	bne.n	80025e0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <SPIx_Init+0x6c>)
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <SPIx_Init+0x70>)
 800258c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <SPIx_Init+0x6c>)
 8002590:	2218      	movs	r2, #24
 8002592:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <SPIx_Init+0x6c>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <SPIx_Init+0x6c>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <SPIx_Init+0x6c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <SPIx_Init+0x6c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <SPIx_Init+0x6c>)
 80025ae:	2207      	movs	r2, #7
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <SPIx_Init+0x6c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <SPIx_Init+0x6c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <SPIx_Init+0x6c>)
 80025c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <SPIx_Init+0x6c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <SPIx_Init+0x6c>)
 80025ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <SPIx_Init+0x6c>)
 80025d6:	f000 f873 	bl	80026c0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80025da:	4802      	ldr	r0, [pc, #8]	; (80025e4 <SPIx_Init+0x6c>)
 80025dc:	f005 f829 	bl	8007632 <HAL_SPI_Init>
  } 
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200006dc 	.word	0x200006dc
 80025e8:	40015000 	.word	0x40015000

080025ec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <SPIx_Read+0x38>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f107 0108 	add.w	r1, r7, #8
 8002606:	4808      	ldr	r0, [pc, #32]	; (8002628 <SPIx_Read+0x3c>)
 8002608:	f005 fa00 	bl	8007a0c <HAL_SPI_Receive>
 800260c:	4603      	mov	r3, r0
 800260e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002616:	f000 f847 	bl	80026a8 <SPIx_Error>
  }
  
  return readvalue;
 800261a:	68bb      	ldr	r3, [r7, #8]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000070 	.word	0x20000070
 8002628:	200006dc 	.word	0x200006dc

0800262c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <SPIx_Write+0x34>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1db9      	adds	r1, r7, #6
 8002640:	2201      	movs	r2, #1
 8002642:	4808      	ldr	r0, [pc, #32]	; (8002664 <SPIx_Write+0x38>)
 8002644:	f005 f8a6 	bl	8007794 <HAL_SPI_Transmit>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002652:	f000 f829 	bl	80026a8 <SPIx_Error>
  }
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000070 	.word	0x20000070
 8002664:	200006dc 	.word	0x200006dc

08002668 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af02      	add	r7, sp, #8
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <SPIx_WriteRead+0x38>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f107 020f 	add.w	r2, r7, #15
 800267e:	1df9      	adds	r1, r7, #7
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <SPIx_WriteRead+0x3c>)
 8002686:	f005 fad2 	bl	8007c2e <HAL_SPI_TransmitReceive>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002690:	f000 f80a 	bl	80026a8 <SPIx_Error>
  }
  
  return receivedbyte;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000070 	.word	0x20000070
 80026a4:	200006dc 	.word	0x200006dc

080026a8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <SPIx_Error+0x14>)
 80026ae:	f005 f849 	bl	8007744 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80026b2:	f7ff ff61 	bl	8002578 <SPIx_Init>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200006dc 	.word	0x200006dc

080026c0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <SPIx_MspInit+0x6c>)
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <SPIx_MspInit+0x6c>)
 80026d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d6:	6453      	str	r3, [r2, #68]	; 0x44
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <SPIx_MspInit+0x6c>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <SPIx_MspInit+0x6c>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <SPIx_MspInit+0x6c>)
 80026ee:	f043 0320 	orr.w	r3, r3, #32
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <SPIx_MspInit+0x6c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002700:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800270a:	2302      	movs	r3, #2
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800270e:	2301      	movs	r3, #1
 8002710:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002712:	2305      	movs	r3, #5
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <SPIx_MspInit+0x70>)
 800271e:	f002 f84f 	bl	80047c0 <HAL_GPIO_Init>
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40021400 	.word	0x40021400

08002734 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <LCD_IO_Init+0xe0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d164      	bne.n	800280c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <LCD_IO_Init+0xe0>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <LCD_IO_Init+0xe4>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4a31      	ldr	r2, [pc, #196]	; (8002818 <LCD_IO_Init+0xe4>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6313      	str	r3, [r2, #48]	; 0x30
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <LCD_IO_Init+0xe4>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002768:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800276a:	2301      	movs	r3, #1
 800276c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4619      	mov	r1, r3
 800277c:	4827      	ldr	r0, [pc, #156]	; (800281c <LCD_IO_Init+0xe8>)
 800277e:	f002 f81f 	bl	80047c0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <LCD_IO_Init+0xe4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a23      	ldr	r2, [pc, #140]	; (8002818 <LCD_IO_Init+0xe4>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <LCD_IO_Init+0xe4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800279e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027ac:	2302      	movs	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	4819      	ldr	r0, [pc, #100]	; (800281c <LCD_IO_Init+0xe8>)
 80027b8:	f002 f802 	bl	80047c0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <LCD_IO_Init+0xe4>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <LCD_IO_Init+0xe4>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6313      	str	r3, [r2, #48]	; 0x30
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <LCD_IO_Init+0xe4>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80027d8:	2304      	movs	r3, #4
 80027da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	480c      	ldr	r0, [pc, #48]	; (8002820 <LCD_IO_Init+0xec>)
 80027f0:	f001 ffe6 	bl	80047c0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80027f4:	2200      	movs	r2, #0
 80027f6:	2104      	movs	r1, #4
 80027f8:	4809      	ldr	r0, [pc, #36]	; (8002820 <LCD_IO_Init+0xec>)
 80027fa:	f002 fa99 	bl	8004d30 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80027fe:	2201      	movs	r2, #1
 8002800:	2104      	movs	r1, #4
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <LCD_IO_Init+0xec>)
 8002804:	f002 fa94 	bl	8004d30 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002808:	f7ff feb6 	bl	8002578 <SPIx_Init>
  }
}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000734 	.word	0x20000734
 8002818:	40023800 	.word	0x40023800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40020800 	.word	0x40020800

08002824 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800282e:	2201      	movs	r2, #1
 8002830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002834:	480a      	ldr	r0, [pc, #40]	; (8002860 <LCD_IO_WriteData+0x3c>)
 8002836:	f002 fa7b 	bl	8004d30 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800283a:	2200      	movs	r2, #0
 800283c:	2104      	movs	r1, #4
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <LCD_IO_WriteData+0x40>)
 8002840:	f002 fa76 	bl	8004d30 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fef0 	bl	800262c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800284c:	2201      	movs	r2, #1
 800284e:	2104      	movs	r1, #4
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <LCD_IO_WriteData+0x40>)
 8002852:	f002 fa6d 	bl	8004d30 <HAL_GPIO_WritePin>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40020800 	.word	0x40020800

08002868 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002872:	2200      	movs	r2, #0
 8002874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002878:	480a      	ldr	r0, [pc, #40]	; (80028a4 <LCD_IO_WriteReg+0x3c>)
 800287a:	f002 fa59 	bl	8004d30 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800287e:	2200      	movs	r2, #0
 8002880:	2104      	movs	r1, #4
 8002882:	4809      	ldr	r0, [pc, #36]	; (80028a8 <LCD_IO_WriteReg+0x40>)
 8002884:	f002 fa54 	bl	8004d30 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fecd 	bl	800262c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002892:	2201      	movs	r2, #1
 8002894:	2104      	movs	r1, #4
 8002896:	4804      	ldr	r0, [pc, #16]	; (80028a8 <LCD_IO_WriteReg+0x40>)
 8002898:	f002 fa4a 	bl	8004d30 <HAL_GPIO_WritePin>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40020800 	.word	0x40020800

080028ac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	460a      	mov	r2, r1
 80028b6:	80fb      	strh	r3, [r7, #6]
 80028b8:	4613      	mov	r3, r2
 80028ba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80028c0:	2200      	movs	r2, #0
 80028c2:	2104      	movs	r1, #4
 80028c4:	4810      	ldr	r0, [pc, #64]	; (8002908 <LCD_IO_ReadData+0x5c>)
 80028c6:	f002 fa33 	bl	8004d30 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d0:	480e      	ldr	r0, [pc, #56]	; (800290c <LCD_IO_ReadData+0x60>)
 80028d2:	f002 fa2d 	bl	8004d30 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fea7 	bl	800262c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80028de:	797b      	ldrb	r3, [r7, #5]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fe83 	bl	80025ec <SPIx_Read>
 80028e6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ee:	4807      	ldr	r0, [pc, #28]	; (800290c <LCD_IO_ReadData+0x60>)
 80028f0:	f002 fa1e 	bl	8004d30 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80028f4:	2201      	movs	r2, #1
 80028f6:	2104      	movs	r1, #4
 80028f8:	4803      	ldr	r0, [pc, #12]	; (8002908 <LCD_IO_ReadData+0x5c>)
 80028fa:	f002 fa19 	bl	8004d30 <HAL_GPIO_WritePin>
  
  return readvalue;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00

08002910 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 f9a3 	bl	8003c64 <HAL_Delay>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <GYRO_IO_Init+0x8c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <GYRO_IO_Init+0x8c>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <GYRO_IO_Init+0x8c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800294a:	2302      	movs	r3, #2
 800294c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	4619      	mov	r1, r3
 8002960:	4815      	ldr	r0, [pc, #84]	; (80029b8 <GYRO_IO_Init+0x90>)
 8002962:	f001 ff2d 	bl	80047c0 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002966:	2201      	movs	r2, #1
 8002968:	2102      	movs	r1, #2
 800296a:	4813      	ldr	r0, [pc, #76]	; (80029b8 <GYRO_IO_Init+0x90>)
 800296c:	f002 f9e0 	bl	8004d30 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <GYRO_IO_Init+0x8c>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <GYRO_IO_Init+0x8c>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6313      	str	r3, [r2, #48]	; 0x30
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <GYRO_IO_Init+0x8c>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800298c:	2306      	movs	r3, #6
 800298e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002994:	2302      	movs	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	4806      	ldr	r0, [pc, #24]	; (80029bc <GYRO_IO_Init+0x94>)
 80029a4:	f001 ff0c 	bl	80047c0 <HAL_GPIO_Init>

  SPIx_Init();
 80029a8:	f7ff fde6 	bl	8002578 <SPIx_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020000 	.word	0x40020000

080029c0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
 80029cc:	4613      	mov	r3, r2
 80029ce:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80029d0:	883b      	ldrh	r3, [r7, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d903      	bls.n	80029de <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029dc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	480f      	ldr	r0, [pc, #60]	; (8002a20 <GYRO_IO_Write+0x60>)
 80029e4:	f002 f9a4 	bl	8004d30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fe3c 	bl	8002668 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80029f0:	e00a      	b.n	8002a08 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe36 	bl	8002668 <SPIx_WriteRead>
    NumByteToWrite--;
 80029fc:	883b      	ldrh	r3, [r7, #0]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3301      	adds	r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002a08:	883b      	ldrh	r3, [r7, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2102      	movs	r1, #2
 8002a12:	4803      	ldr	r0, [pc, #12]	; (8002a20 <GYRO_IO_Write+0x60>)
 8002a14:	f002 f98c 	bl	8004d30 <HAL_GPIO_WritePin>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40020800 	.word	0x40020800

08002a24 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
 8002a30:	4613      	mov	r3, r2
 8002a32:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002a34:	883b      	ldrh	r3, [r7, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d904      	bls.n	8002a44 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002a40:	70fb      	strb	r3, [r7, #3]
 8002a42:	e003      	b.n	8002a4c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a4a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4810      	ldr	r0, [pc, #64]	; (8002a94 <GYRO_IO_Read+0x70>)
 8002a52:	f002 f96d 	bl	8004d30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe05 	bl	8002668 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002a5e:	e00c      	b.n	8002a7a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7ff fe01 	bl	8002668 <SPIx_WriteRead>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002a6e:	883b      	ldrh	r3, [r7, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002a7a:	883b      	ldrh	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ef      	bne.n	8002a60 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002a80:	2201      	movs	r2, #1
 8002a82:	2102      	movs	r1, #2
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <GYRO_IO_Read+0x70>)
 8002a86:	f002 f953 	bl	8004d30 <HAL_GPIO_WritePin>
}  
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40020800 	.word	0x40020800

08002a98 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	703b      	strb	r3, [r7, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <BSP_GYRO_Init+0xc4>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4798      	blx	r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2bd4      	cmp	r3, #212	; 0xd4
 8002ab8:	d005      	beq.n	8002ac6 <BSP_GYRO_Init+0x2e>
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <BSP_GYRO_Init+0xc4>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	4798      	blx	r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2bd5      	cmp	r3, #213	; 0xd5
 8002ac4:	d145      	bne.n	8002b52 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <BSP_GYRO_Init+0xc8>)
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <BSP_GYRO_Init+0xc4>)
 8002aca:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002acc:	2308      	movs	r3, #8
 8002ace:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002ad8:	2330      	movs	r3, #48	; 0x30
 8002ada:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002adc:	2300      	movs	r3, #0
 8002ade:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002ae8:	793a      	ldrb	r2, [r7, #4]
 8002aea:	797b      	ldrb	r3, [r7, #5]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002af0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002af6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002afe:	7a3a      	ldrb	r2, [r7, #8]
 8002b00:	7a7b      	ldrb	r3, [r7, #9]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002b06:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	89bb      	ldrh	r3, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <BSP_GYRO_Init+0xc8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	89ba      	ldrh	r2, [r7, #12]
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002b24:	2300      	movs	r3, #0
 8002b26:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b2c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002b2e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <BSP_GYRO_Init+0xc8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	89ba      	ldrh	r2, [r7, #12]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4610      	mov	r0, r2
 8002b42:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <BSP_GYRO_Init+0xc8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	2010      	movs	r0, #16
 8002b4c:	4798      	blx	r3

    ret = GYRO_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000003c 	.word	0x2000003c
 8002b60:	20000738 	.word	0x20000738

08002b64 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <BSP_GYRO_GetXYZ+0x24>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <BSP_GYRO_GetXYZ+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000738 	.word	0x20000738

08002b8c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002b92:	4a2e      	ldr	r2, [pc, #184]	; (8002c4c <BSP_LCD_Init+0xc0>)
 8002b94:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002b98:	2209      	movs	r2, #9
 8002b9a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002ba4:	221d      	movs	r2, #29
 8002ba6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002baa:	2203      	movs	r2, #3
 8002bac:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bb0:	f240 120d 	movw	r2, #269	; 0x10d
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bb8:	f240 1243 	movw	r2, #323	; 0x143
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bc0:	f240 1217 	movw	r2, #279	; 0x117
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bc8:	f240 1247 	movw	r2, #327	; 0x147
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <BSP_LCD_Init+0xc4>)
 8002be8:	2208      	movs	r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <BSP_LCD_Init+0xc4>)
 8002bee:	22c0      	movs	r2, #192	; 0xc0
 8002bf0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <BSP_LCD_Init+0xc4>)
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <BSP_LCD_Init+0xc4>)
 8002bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002c00:	4813      	ldr	r0, [pc, #76]	; (8002c50 <BSP_LCD_Init+0xc4>)
 8002c02:	f004 fabb 	bl	800717c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002c1e:	f000 fc27 	bl	8003470 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002c22:	4809      	ldr	r0, [pc, #36]	; (8002c48 <BSP_LCD_Init+0xbc>)
 8002c24:	f002 f89e 	bl	8004d64 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <BSP_LCD_Init+0xc8>)
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <BSP_LCD_Init+0xcc>)
 8002c2c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <BSP_LCD_Init+0xc8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002c36:	f000 fe09 	bl	800384c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c3a:	4808      	ldr	r0, [pc, #32]	; (8002c5c <BSP_LCD_Init+0xd0>)
 8002c3c:	f000 f8ce 	bl	8002ddc <BSP_LCD_SetFont>

  return LCD_OK;
 8002c40:	2300      	movs	r3, #0
}  
 8002c42:	4618      	mov	r0, r3
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000073c 	.word	0x2000073c
 8002c4c:	40016800 	.word	0x40016800
 8002c50:	20000824 	.word	0x20000824
 8002c54:	20000870 	.word	0x20000870
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	20000074 	.word	0x20000074

08002c60 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <BSP_LCD_GetXSize+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	4798      	blx	r3
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000870 	.word	0x20000870

08002c78 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <BSP_LCD_GetYSize+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4798      	blx	r3
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000870 	.word	0x20000870

08002c90 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b090      	sub	sp, #64	; 0x40
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002ca0:	f7ff ffde 	bl	8002c60 <BSP_LCD_GetXSize>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002cac:	f7ff ffe4 	bl	8002c78 <BSP_LCD_GetYSize>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002cbc:	23ff      	movs	r3, #255	; 0xff
 8002cbe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002cd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002ce0:	f7ff ffbe 	bl	8002c60 <BSP_LCD_GetXSize>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002ce8:	f7ff ffc6 	bl	8002c78 <BSP_LCD_GetYSize>
 8002cec:	4603      	mov	r3, r0
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4814      	ldr	r0, [pc, #80]	; (8002d4c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002cfa:	f002 f90d 	bl	8004f18 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	4913      	ldr	r1, [pc, #76]	; (8002d50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d12:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3308      	adds	r3, #8
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002d26:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	4909      	ldr	r1, [pc, #36]	; (8002d50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002d3c:	4803      	ldr	r0, [pc, #12]	; (8002d4c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d3e:	f002 f929 	bl	8004f94 <HAL_LTDC_EnableDither>
}
 8002d42:	bf00      	nop
 8002d44:	3740      	adds	r7, #64	; 0x40
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000073c 	.word	0x2000073c
 8002d50:	20000858 	.word	0x20000858
 8002d54:	20000074 	.word	0x20000074

08002d58 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <BSP_LCD_SelectLayer+0x1c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000854 	.word	0x20000854

08002d78 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <BSP_LCD_SetTextColor+0x28>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <BSP_LCD_SetTextColor+0x2c>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000854 	.word	0x20000854
 8002da4:	20000858 	.word	0x20000858

08002da8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <BSP_LCD_SetBackColor+0x2c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <BSP_LCD_SetBackColor+0x30>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000854 	.word	0x20000854
 8002dd8:	20000858 	.word	0x20000858

08002ddc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <BSP_LCD_SetFont+0x2c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4908      	ldr	r1, [pc, #32]	; (8002e0c <BSP_LCD_SetFont+0x30>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3308      	adds	r3, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000854 	.word	0x20000854
 8002e0c:	20000858 	.word	0x20000858

08002e10 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <BSP_LCD_GetFont+0x24>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <BSP_LCD_GetFont+0x28>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3308      	adds	r3, #8
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000854 	.word	0x20000854
 8002e38:	20000858 	.word	0x20000858

08002e3c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <BSP_LCD_Clear+0x48>)
 8002e46:	681c      	ldr	r4, [r3, #0]
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <BSP_LCD_Clear+0x48>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <BSP_LCD_Clear+0x4c>)
 8002e4e:	2134      	movs	r1, #52	; 0x34
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	335c      	adds	r3, #92	; 0x5c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461e      	mov	r6, r3
 8002e5c:	f7ff ff00 	bl	8002c60 <BSP_LCD_GetXSize>
 8002e60:	4605      	mov	r5, r0
 8002e62:	f7ff ff09 	bl	8002c78 <BSP_LCD_GetYSize>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	462a      	mov	r2, r5
 8002e74:	4631      	mov	r1, r6
 8002e76:	4620      	mov	r0, r4
 8002e78:	f000 fcb0 	bl	80037dc <FillBuffer>
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e84:	20000854 	.word	0x20000854
 8002e88:	2000073c 	.word	0x2000073c

08002e8c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
 8002e96:	460b      	mov	r3, r1
 8002e98:	80bb      	strh	r3, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <BSP_LCD_DisplayChar+0x80>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	491b      	ldr	r1, [pc, #108]	; (8002f10 <BSP_LCD_DisplayChar+0x84>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002eba:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <BSP_LCD_DisplayChar+0x80>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4c14      	ldr	r4, [pc, #80]	; (8002f10 <BSP_LCD_DisplayChar+0x84>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4423      	add	r3, r4
 8002eca:	3308      	adds	r3, #8
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ed0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <BSP_LCD_DisplayChar+0x80>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4c0d      	ldr	r4, [pc, #52]	; (8002f10 <BSP_LCD_DisplayChar+0x84>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4423      	add	r3, r4
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	889b      	ldrh	r3, [r3, #4]
 8002eea:	3307      	adds	r3, #7
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da00      	bge.n	8002ef2 <BSP_LCD_DisplayChar+0x66>
 8002ef0:	3307      	adds	r3, #7
 8002ef2:	10db      	asrs	r3, r3, #3
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ef8:	18ca      	adds	r2, r1, r3
 8002efa:	88b9      	ldrh	r1, [r7, #4]
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fbb2 	bl	8003668 <DrawChar>
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	20000854 	.word	0x20000854
 8002f10:	20000858 	.word	0x20000858

08002f14 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60ba      	str	r2, [r7, #8]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	81fb      	strh	r3, [r7, #14]
 8002f22:	460b      	mov	r3, r1
 8002f24:	81bb      	strh	r3, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	83fb      	strh	r3, [r7, #30]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f3e:	e002      	b.n	8002f46 <BSP_LCD_DisplayStringAt+0x32>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	617a      	str	r2, [r7, #20]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f6      	bne.n	8002f40 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f52:	f7ff fe85 	bl	8002c60 <BSP_LCD_GetXSize>
 8002f56:	4601      	mov	r1, r0
 8002f58:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	484b      	ldr	r0, [pc, #300]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4403      	add	r3, r0
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	889b      	ldrh	r3, [r3, #4]
 8002f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f72:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d01c      	beq.n	8002fb4 <BSP_LCD_DisplayStringAt+0xa0>
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	dc33      	bgt.n	8002fe6 <BSP_LCD_DisplayStringAt+0xd2>
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <BSP_LCD_DisplayStringAt+0x74>
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d019      	beq.n	8002fba <BSP_LCD_DisplayStringAt+0xa6>
 8002f86:	e02e      	b.n	8002fe6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad1      	subs	r1, r2, r3
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	483e      	ldr	r0, [pc, #248]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	889b      	ldrh	r3, [r3, #4]
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	4413      	add	r3, r2
 8002fb0:	83fb      	strh	r3, [r7, #30]
      break;
 8002fb2:	e01b      	b.n	8002fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	83fb      	strh	r3, [r7, #30]
      break;
 8002fb8:	e018      	b.n	8002fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4831      	ldr	r0, [pc, #196]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	889b      	ldrh	r3, [r3, #4]
 8002fd8:	fb11 f303 	smulbb	r3, r1, r3
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	89fb      	ldrh	r3, [r7, #14]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	83fb      	strh	r3, [r7, #30]
      break;
 8002fe4:	e002      	b.n	8002fec <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	83fb      	strh	r3, [r7, #30]
      break;
 8002fea:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fec:	e01a      	b.n	8003024 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	89b9      	ldrh	r1, [r7, #12]
 8002ff4:	8bfb      	ldrh	r3, [r7, #30]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff48 	bl	8002e8c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ffc:	4b22      	ldr	r3, [pc, #136]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4922      	ldr	r1, [pc, #136]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3308      	adds	r3, #8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	889a      	ldrh	r2, [r3, #4]
 8003012:	8bfb      	ldrh	r3, [r7, #30]
 8003014:	4413      	add	r3, r2
 8003016:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
    i++;
 800301e:	8bbb      	ldrh	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2dc      	uxtb	r4, r3
 8003032:	f7ff fe15 	bl	8002c60 <BSP_LCD_GetXSize>
 8003036:	8bb9      	ldrh	r1, [r7, #28]
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4d13      	ldr	r5, [pc, #76]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	442b      	add	r3, r5
 8003048:	3308      	adds	r3, #8
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	889b      	ldrh	r3, [r3, #4]
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	1ac3      	subs	r3, r0, r3
 8003054:	b299      	uxth	r1, r3
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <BSP_LCD_DisplayStringAt+0x174>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	480c      	ldr	r0, [pc, #48]	; (800308c <BSP_LCD_DisplayStringAt+0x178>)
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4403      	add	r3, r0
 8003066:	3308      	adds	r3, #8
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	889b      	ldrh	r3, [r3, #4]
 800306c:	4299      	cmp	r1, r3
 800306e:	bf2c      	ite	cs
 8003070:	2301      	movcs	r3, #1
 8003072:	2300      	movcc	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4023      	ands	r3, r4
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1b7      	bne.n	8002fee <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	20000854 	.word	0x20000854
 800308c:	20000858 	.word	0x20000858

08003090 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800309c:	f7ff feb8 	bl	8002e10 <BSP_LCD_GetFont>
 80030a0:	4603      	mov	r3, r0
 80030a2:	88db      	ldrh	r3, [r3, #6]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	fb12 f303 	smulbb	r3, r2, r3
 80030aa:	b299      	uxth	r1, r3
 80030ac:	2303      	movs	r3, #3
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7ff ff2f 	bl	8002f14 <BSP_LCD_DisplayStringAt>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
 80030ca:	460b      	mov	r3, r1
 80030cc:	80bb      	strh	r3, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <BSP_LCD_DrawHLine+0x70>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <BSP_LCD_DrawHLine+0x74>)
 80030dc:	2134      	movs	r1, #52	; 0x34
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	335c      	adds	r3, #92	; 0x5c
 80030e6:	681c      	ldr	r4, [r3, #0]
 80030e8:	f7ff fdba 	bl	8002c60 <BSP_LCD_GetXSize>
 80030ec:	4602      	mov	r2, r0
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	fb03 f202 	mul.w	r2, r3, r2
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4423      	add	r3, r4
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <BSP_LCD_DrawHLine+0x70>)
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	887c      	ldrh	r4, [r7, #2]
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <BSP_LCD_DrawHLine+0x70>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4d0b      	ldr	r5, [pc, #44]	; (8003138 <BSP_LCD_DrawHLine+0x78>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	442b      	add	r3, r5
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2301      	movs	r3, #1
 8003120:	4622      	mov	r2, r4
 8003122:	f000 fb5b 	bl	80037dc <FillBuffer>
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bdb0      	pop	{r4, r5, r7, pc}
 800312e:	bf00      	nop
 8003130:	20000854 	.word	0x20000854
 8003134:	2000073c 	.word	0x2000073c
 8003138:	20000858 	.word	0x20000858

0800313c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
 8003146:	460b      	mov	r3, r1
 8003148:	80bb      	strh	r3, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f1c3 0303 	rsb	r3, r3, #3
 8003156:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003160:	e0c7      	b.n	80032f2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	b29a      	uxth	r2, r3
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4413      	add	r3, r2
 800316a:	b298      	uxth	r0, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	b29b      	uxth	r3, r3
 8003170:	88ba      	ldrh	r2, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b299      	uxth	r1, r3
 8003176:	4b64      	ldr	r3, [pc, #400]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4c64      	ldr	r4, [pc, #400]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4423      	add	r3, r4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	f000 fa47 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	b29b      	uxth	r3, r3
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b298      	uxth	r0, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	b29b      	uxth	r3, r3
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4c59      	ldr	r4, [pc, #356]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4423      	add	r3, r4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f000 fa31 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4413      	add	r3, r2
 80031c2:	b298      	uxth	r0, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	88ba      	ldrh	r2, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	b299      	uxth	r1, r3
 80031ce:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4c4e      	ldr	r4, [pc, #312]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4423      	add	r3, r4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 fa1b 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b298      	uxth	r0, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	88ba      	ldrh	r2, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b299      	uxth	r1, r3
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4c43      	ldr	r4, [pc, #268]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4423      	add	r3, r4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	f000 fa05 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	b29a      	uxth	r2, r3
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4413      	add	r3, r2
 800321a:	b298      	uxth	r0, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	b29a      	uxth	r2, r3
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	b299      	uxth	r1, r3
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4c38      	ldr	r4, [pc, #224]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4423      	add	r3, r4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	f000 f9ef 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	b29b      	uxth	r3, r3
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b298      	uxth	r0, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	b29a      	uxth	r2, r3
 800324c:	88bb      	ldrh	r3, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	b299      	uxth	r1, r3
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4c2d      	ldr	r4, [pc, #180]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4423      	add	r3, r4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	f000 f9d9 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b29a      	uxth	r2, r3
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4413      	add	r3, r2
 8003272:	b298      	uxth	r0, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	b29a      	uxth	r2, r3
 8003278:	88bb      	ldrh	r3, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	b299      	uxth	r1, r3
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4c22      	ldr	r4, [pc, #136]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4423      	add	r3, r4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f000 f9c3 	bl	800361c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b29b      	uxth	r3, r3
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	b298      	uxth	r0, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	88bb      	ldrh	r3, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	b299      	uxth	r1, r3
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <BSP_LCD_DrawCircle+0x1cc>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4c17      	ldr	r4, [pc, #92]	; (800330c <BSP_LCD_DrawCircle+0x1d0>)
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4423      	add	r3, r4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	f000 f9ad 	bl	800361c <BSP_LCD_DrawPixel>

    if (d < 0)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da06      	bge.n	80032d6 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4413      	add	r3, r2
 80032d0:	3306      	adds	r3, #6
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e00a      	b.n	80032ec <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4413      	add	r3, r2
 80032e2:	330a      	adds	r3, #10
 80032e4:	617b      	str	r3, [r7, #20]
      cury--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3301      	adds	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f67f af33 	bls.w	8003162 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	bf00      	nop
 8003308:	20000854 	.word	0x20000854
 800330c:	20000858 	.word	0x20000858

08003310 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
 800331a:	460b      	mov	r3, r1
 800331c:	80bb      	strh	r3, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	f1c3 0303 	rsb	r3, r3, #3
 800332a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003334:	4b44      	ldr	r3, [pc, #272]	; (8003448 <BSP_LCD_FillCircle+0x138>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4944      	ldr	r1, [pc, #272]	; (800344c <BSP_LCD_FillCircle+0x13c>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fd16 	bl	8002d78 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800334c:	e061      	b.n	8003412 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d021      	beq.n	8003398 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	b29b      	uxth	r3, r3
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b298      	uxth	r0, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	b29a      	uxth	r2, r3
 8003362:	88bb      	ldrh	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	b299      	uxth	r1, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	b29b      	uxth	r3, r3
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	f7ff fea5 	bl	80030c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	b29b      	uxth	r3, r3
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	b298      	uxth	r0, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	b29b      	uxth	r3, r3
 8003384:	88ba      	ldrh	r2, [r7, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	b299      	uxth	r1, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	b29b      	uxth	r3, r3
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	f7ff fe94 	bl	80030c0 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d021      	beq.n	80033e2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b298      	uxth	r0, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	88ba      	ldrh	r2, [r7, #4]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	b299      	uxth	r1, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	f7ff fe80 	bl	80030c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b298      	uxth	r0, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	88bb      	ldrh	r3, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	b299      	uxth	r1, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	f7ff fe6f 	bl	80030c0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da06      	bge.n	80033f6 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	009a      	lsls	r2, r3, #2
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	3306      	adds	r3, #6
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4413      	add	r3, r2
 8003402:	330a      	adds	r3, #10
 8003404:	617b      	str	r3, [r7, #20]
      cury--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3b01      	subs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3301      	adds	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	429a      	cmp	r2, r3
 8003418:	d999      	bls.n	800334e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <BSP_LCD_FillCircle+0x138>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	490b      	ldr	r1, [pc, #44]	; (800344c <BSP_LCD_FillCircle+0x13c>)
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fca3 	bl	8002d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	88b9      	ldrh	r1, [r7, #4]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe7f 	bl	800313c <BSP_LCD_DrawCircle>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000854 	.word	0x20000854
 800344c:	20000858 	.word	0x20000858

08003450 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <BSP_LCD_DisplayOn+0x1c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800345e:	4b03      	ldr	r3, [pc, #12]	; (800346c <BSP_LCD_DisplayOn+0x1c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4798      	blx	r3
  }
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000870 	.word	0x20000870

08003470 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4a60      	ldr	r2, [pc, #384]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800349c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a52      	ldr	r2, [pc, #328]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a4b      	ldr	r2, [pc, #300]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a44      	ldr	r2, [pc, #272]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b42      	ldr	r3, [pc, #264]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a36      	ldr	r2, [pc, #216]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003556:	f641 0358 	movw	r3, #6232	; 0x1858
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003564:	2302      	movs	r3, #2
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003568:	230e      	movs	r3, #14
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800356c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003570:	4619      	mov	r1, r3
 8003572:	4824      	ldr	r0, [pc, #144]	; (8003604 <BSP_LCD_MspInit+0x194>)
 8003574:	f001 f924 	bl	80047c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003578:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800357e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003582:	4619      	mov	r1, r3
 8003584:	4820      	ldr	r0, [pc, #128]	; (8003608 <BSP_LCD_MspInit+0x198>)
 8003586:	f001 f91b 	bl	80047c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800358a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	481d      	ldr	r0, [pc, #116]	; (800360c <BSP_LCD_MspInit+0x19c>)
 8003598:	f001 f912 	bl	80047c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800359c:	2348      	movs	r3, #72	; 0x48
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a4:	4619      	mov	r1, r3
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <BSP_LCD_MspInit+0x1a0>)
 80035a8:	f001 f90a 	bl	80047c0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	4816      	ldr	r0, [pc, #88]	; (8003614 <BSP_LCD_MspInit+0x1a4>)
 80035ba:	f001 f901 	bl	80047c0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80035be:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <BSP_LCD_MspInit+0x1a8>)
 80035cc:	f001 f8f8 	bl	80047c0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80035d0:	2303      	movs	r3, #3
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80035d4:	2309      	movs	r3, #9
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035dc:	4619      	mov	r1, r3
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <BSP_LCD_MspInit+0x198>)
 80035e0:	f001 f8ee 	bl	80047c0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80035e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <BSP_LCD_MspInit+0x1a8>)
 80035f2:	f001 f8e5 	bl	80047c0 <HAL_GPIO_Init>
}
 80035f6:	bf00      	nop
 80035f8:	3738      	adds	r7, #56	; 0x38
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800

0800361c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	603a      	str	r2, [r7, #0]
 8003626:	80fb      	strh	r3, [r7, #6]
 8003628:	460b      	mov	r3, r1
 800362a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <BSP_LCD_DrawPixel+0x44>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <BSP_LCD_DrawPixel+0x48>)
 8003632:	2134      	movs	r1, #52	; 0x34
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	335c      	adds	r3, #92	; 0x5c
 800363c:	681c      	ldr	r4, [r3, #0]
 800363e:	88bd      	ldrh	r5, [r7, #4]
 8003640:	f7ff fb0e 	bl	8002c60 <BSP_LCD_GetXSize>
 8003644:	4603      	mov	r3, r0
 8003646:	fb03 f205 	mul.w	r2, r3, r5
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4423      	add	r3, r4
 8003652:	461a      	mov	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bdb0      	pop	{r4, r5, r7, pc}
 8003660:	20000854 	.word	0x20000854
 8003664:	2000073c 	.word	0x2000073c

08003668 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	603a      	str	r2, [r7, #0]
 8003672:	80fb      	strh	r3, [r7, #6]
 8003674:	460b      	mov	r3, r1
 8003676:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <DrawChar+0x16c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4953      	ldr	r1, [pc, #332]	; (80037d8 <DrawChar+0x170>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	88db      	ldrh	r3, [r3, #6]
 800369a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <DrawChar+0x16c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <DrawChar+0x170>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80036b4:	8a3b      	ldrh	r3, [r7, #16]
 80036b6:	3307      	adds	r3, #7
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da00      	bge.n	80036be <DrawChar+0x56>
 80036bc:	3307      	adds	r3, #7
 80036be:	10db      	asrs	r3, r3, #3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8a3b      	ldrh	r3, [r7, #16]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e076      	b.n	80037c2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036d4:	8a3b      	ldrh	r3, [r7, #16]
 80036d6:	3307      	adds	r3, #7
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da00      	bge.n	80036de <DrawChar+0x76>
 80036dc:	3307      	adds	r3, #7
 80036de:	10db      	asrs	r3, r3, #3
 80036e0:	461a      	mov	r2, r3
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80036ee:	8a3b      	ldrh	r3, [r7, #16]
 80036f0:	3307      	adds	r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da00      	bge.n	80036f8 <DrawChar+0x90>
 80036f6:	3307      	adds	r3, #7
 80036f8:	10db      	asrs	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d002      	beq.n	8003704 <DrawChar+0x9c>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d004      	beq.n	800370c <DrawChar+0xa4>
 8003702:	e00c      	b.n	800371e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
      break;
 800370a:	e016      	b.n	800373a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	3201      	adds	r2, #1
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e00d      	b.n	800373a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	041a      	lsls	r2, r3, #16
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	3202      	adds	r2, #2
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
      break;
 8003738:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e036      	b.n	80037ae <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003740:	8a3a      	ldrh	r2, [r7, #16]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	4413      	add	r3, r2
 800374a:	3b01      	subs	r3, #1
 800374c:	2201      	movs	r2, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	461a      	mov	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	b29a      	uxth	r2, r3
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4413      	add	r3, r2
 8003764:	b298      	uxth	r0, r3
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <DrawChar+0x16c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <DrawChar+0x170>)
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	4619      	mov	r1, r3
 800377c:	f7ff ff4e 	bl	800361c <BSP_LCD_DrawPixel>
 8003780:	e012      	b.n	80037a8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	b29a      	uxth	r2, r3
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4413      	add	r3, r2
 800378a:	b298      	uxth	r0, r3
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <DrawChar+0x16c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4911      	ldr	r1, [pc, #68]	; (80037d8 <DrawChar+0x170>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3304      	adds	r3, #4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	88bb      	ldrh	r3, [r7, #4]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7ff ff3a 	bl	800361c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	8a3b      	ldrh	r3, [r7, #16]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3c4      	bcc.n	8003740 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	3301      	adds	r3, #1
 80037ba:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d384      	bcc.n	80036d4 <DrawChar+0x6c>
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000854 	.word	0x20000854
 80037d8:	20000858 	.word	0x20000858

080037dc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <FillBuffer+0x68>)
 80037ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037f0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <FillBuffer+0x68>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <FillBuffer+0x68>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <FillBuffer+0x68>)
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <FillBuffer+0x6c>)
 8003802:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003804:	480f      	ldr	r0, [pc, #60]	; (8003844 <FillBuffer+0x68>)
 8003806:	f000 fd45 	bl	8004294 <HAL_DMA2D_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d115      	bne.n	800383c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <FillBuffer+0x68>)
 8003814:	f000 fea6 	bl	8004564 <HAL_DMA2D_ConfigLayer>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <FillBuffer+0x68>)
 800382a:	f000 fd86 	bl	800433a <HAL_DMA2D_Start>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003834:	210a      	movs	r1, #10
 8003836:	4803      	ldr	r0, [pc, #12]	; (8003844 <FillBuffer+0x68>)
 8003838:	f000 fdaa 	bl	8004390 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200007e4 	.word	0x200007e4
 8003848:	4002b000 	.word	0x4002b000

0800384c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <BSP_SDRAM_Init+0xb0>)
 8003854:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800385e:	2207      	movs	r2, #7
 8003860:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003864:	2204      	movs	r2, #4
 8003866:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800386a:	2207      	movs	r2, #7
 800386c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003870:	2202      	movs	r2, #2
 8003872:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003876:	2202      	movs	r2, #2
 8003878:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800387c:	2202      	movs	r2, #2
 800387e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003882:	2201      	movs	r2, #1
 8003884:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 800388e:	2204      	movs	r2, #4
 8003890:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003894:	2210      	movs	r2, #16
 8003896:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038a0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80038a4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80038c2:	2100      	movs	r1, #0
 80038c4:	480c      	ldr	r0, [pc, #48]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038c6:	f000 f87f 	bl	80039c8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 80038cc:	480a      	ldr	r0, [pc, #40]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038ce:	f003 fe15 	bl	80074fc <HAL_SDRAM_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e002      	b.n	80038e6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80038e6:	f240 506a 	movw	r0, #1386	; 0x56a
 80038ea:	f000 f80d 	bl	8003908 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000874 	.word	0x20000874
 80038fc:	a0000140 	.word	0xa0000140
 8003900:	200008a8 	.word	0x200008a8
 8003904:	20000084 	.word	0x20000084

08003908 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800391c:	2208      	movs	r2, #8
 800391e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003922:	2201      	movs	r2, #1
 8003924:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800392c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003930:	4923      	ldr	r1, [pc, #140]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003932:	4824      	ldr	r0, [pc, #144]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003934:	f003 fe20 	bl	8007578 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003938:	2001      	movs	r0, #1
 800393a:	f000 f993 	bl	8003c64 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003946:	2208      	movs	r2, #8
 8003948:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800394c:	2201      	movs	r2, #1
 800394e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395a:	4919      	ldr	r1, [pc, #100]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800395c:	4819      	ldr	r0, [pc, #100]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800395e:	f003 fe0b 	bl	8007578 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003964:	2203      	movs	r2, #3
 8003966:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800396a:	2208      	movs	r2, #8
 800396c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003970:	2204      	movs	r2, #4
 8003972:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800397a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397e:	4910      	ldr	r1, [pc, #64]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003980:	4810      	ldr	r0, [pc, #64]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003982:	f003 fdf9 	bl	8007578 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003986:	f44f 730c 	mov.w	r3, #560	; 0x230
 800398a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800398e:	2204      	movs	r2, #4
 8003990:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003994:	2208      	movs	r2, #8
 8003996:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800399a:	2201      	movs	r2, #1
 800399c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039a2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80039a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a8:	4905      	ldr	r1, [pc, #20]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039ac:	f003 fde4 	bl	8007578 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4804      	ldr	r0, [pc, #16]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039b4:	f003 fe15 	bl	80075e2 <HAL_SDRAM_ProgramRefreshRate>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200008c4 	.word	0x200008c4
 80039c4:	20000874 	.word	0x20000874

080039c8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b090      	sub	sp, #64	; 0x40
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80ec 	beq.w	8003bb2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4a76      	ldr	r2, [pc, #472]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6393      	str	r3, [r2, #56]	; 0x38
 80039ea:	4b74      	ldr	r3, [pc, #464]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a6f      	ldr	r2, [pc, #444]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	4b62      	ldr	r3, [pc, #392]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a53      	ldr	r2, [pc, #332]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a70:	f043 0310 	orr.w	r3, r3, #16
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a4c      	ldr	r2, [pc, #304]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a45      	ldr	r2, [pc, #276]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003aca:	2360      	movs	r3, #96	; 0x60
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	483a      	ldr	r0, [pc, #232]	; (8003bc0 <BSP_SDRAM_MspInit+0x1f8>)
 8003ad6:	f000 fe73 	bl	80047c0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4837      	ldr	r0, [pc, #220]	; (8003bc4 <BSP_SDRAM_MspInit+0x1fc>)
 8003ae6:	f000 fe6b 	bl	80047c0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af4:	4619      	mov	r1, r3
 8003af6:	4834      	ldr	r0, [pc, #208]	; (8003bc8 <BSP_SDRAM_MspInit+0x200>)
 8003af8:	f000 fe62 	bl	80047c0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003afc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4830      	ldr	r0, [pc, #192]	; (8003bcc <BSP_SDRAM_MspInit+0x204>)
 8003b0a:	f000 fe59 	bl	80047c0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003b0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	482d      	ldr	r0, [pc, #180]	; (8003bd0 <BSP_SDRAM_MspInit+0x208>)
 8003b1c:	f000 fe50 	bl	80047c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003b20:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4829      	ldr	r0, [pc, #164]	; (8003bd4 <BSP_SDRAM_MspInit+0x20c>)
 8003b2e:	f000 fe47 	bl	80047c0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b4c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b54:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b6a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b74:	2203      	movs	r2, #3
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <BSP_SDRAM_MspInit+0x214>)
 8003b88:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003b96:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b98:	f000 fa4a 	bl	8004030 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003b9c:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b9e:	f000 f999 	bl	8003ed4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	210f      	movs	r1, #15
 8003ba6:	2038      	movs	r0, #56	; 0x38
 8003ba8:	f000 f95c 	bl	8003e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003bac:	2038      	movs	r0, #56	; 0x38
 8003bae:	f000 f975 	bl	8003e9c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003bb2:	bf00      	nop
 8003bb4:	3740      	adds	r7, #64	; 0x40
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020c00 	.word	0x40020c00
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40021400 	.word	0x40021400
 8003bd4:	40021800 	.word	0x40021800
 8003bd8:	200008d4 	.word	0x200008d4
 8003bdc:	40026410 	.word	0x40026410

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_Init+0x40>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_Init+0x40>)
 8003bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_Init+0x40>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c08:	2003      	movs	r0, #3
 8003c0a:	f000 f920 	bl	8003e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f7fd ff60 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c14:	f7fd feb8 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023c00 	.word	0x40023c00

08003c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_IncTick+0x20>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_IncTick+0x24>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_IncTick+0x24>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	2000008c 	.word	0x2000008c
 8003c48:	20000934 	.word	0x20000934

08003c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_GetTick+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000934 	.word	0x20000934

08003c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff ffee 	bl	8003c4c <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d005      	beq.n	8003c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_Delay+0x44>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c8a:	bf00      	nop
 8003c8c:	f7ff ffde 	bl	8003c4c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d8f7      	bhi.n	8003c8c <HAL_Delay+0x28>
  {
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000008c 	.word	0x2000008c

08003cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db0b      	blt.n	8003d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	4907      	ldr	r1, [pc, #28]	; (8003d48 <__NVIC_EnableIRQ+0x38>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2001      	movs	r0, #1
 8003d32:	fa00 f202 	lsl.w	r2, r0, r2
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db12      	blt.n	8003d84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	490a      	ldr	r1, [pc, #40]	; (8003d90 <__NVIC_DisableIRQ+0x44>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	3320      	adds	r3, #32
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d78:	f3bf 8f4f 	dsb	sy
}
 8003d7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d7e:	f3bf 8f6f 	isb	sy
}
 8003d82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	; (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff28 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e76:	f7ff ff3d 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f7ff ffb1 	bl	8003de8 <NVIC_EncodePriority>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff80 	bl	8003d94 <__NVIC_SetPriority>
}
 8003e94:	bf00      	nop
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff30 	bl	8003d10 <__NVIC_EnableIRQ>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff40 	bl	8003d4c <__NVIC_DisableIRQ>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff feb4 	bl	8003c4c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e099      	b.n	8004024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f10:	e00f      	b.n	8003f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f12:	f7ff fe9b 	bl	8003c4c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d908      	bls.n	8003f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e078      	b.n	8004024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e8      	bne.n	8003f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_DMA_Init+0x158>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d107      	bne.n	8003f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	4313      	orrs	r3, r2
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d117      	bne.n	8003ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8df 	bl	800419c <DMA_CheckFifoParam>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2240      	movs	r2, #64	; 0x40
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e016      	b.n	8004024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f896 	bl	8004130 <DMA_CalcBaseAndBitshift>
 8004004:	4603      	mov	r3, r0
 8004006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	223f      	movs	r2, #63	; 0x3f
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	f010803f 	.word	0xf010803f

08004030 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e050      	b.n	80040e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d101      	bne.n	8004052 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	e048      	b.n	80040e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f84c 	bl	8004130 <DMA_CalcBaseAndBitshift>
 8004098:	4603      	mov	r3, r0
 800409a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	223f      	movs	r2, #63	; 0x3f
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e00c      	b.n	8004124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2205      	movs	r2, #5
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	3b10      	subs	r3, #16
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <DMA_CalcBaseAndBitshift+0x64>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800414a:	4a13      	ldr	r2, [pc, #76]	; (8004198 <DMA_CalcBaseAndBitshift+0x68>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d909      	bls.n	8004172 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	; 0x58
 8004170:	e007      	b.n	8004182 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	aaaaaaab 	.word	0xaaaaaaab
 8004198:	08014610 	.word	0x08014610

0800419c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11f      	bne.n	80041f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d856      	bhi.n	800426a <DMA_CheckFifoParam+0xce>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <DMA_CheckFifoParam+0x28>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041e7 	.word	0x080041e7
 80041cc:	080041d5 	.word	0x080041d5
 80041d0:	0800426b 	.word	0x0800426b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d046      	beq.n	800426e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e4:	e043      	b.n	800426e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ee:	d140      	bne.n	8004272 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e03d      	b.n	8004272 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fe:	d121      	bne.n	8004244 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d837      	bhi.n	8004276 <DMA_CheckFifoParam+0xda>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <DMA_CheckFifoParam+0x70>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	0800421d 	.word	0x0800421d
 8004210:	08004223 	.word	0x08004223
 8004214:	0800421d 	.word	0x0800421d
 8004218:	08004235 	.word	0x08004235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e030      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d025      	beq.n	800427a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004232:	e022      	b.n	800427a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800423c:	d11f      	bne.n	800427e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004242:	e01c      	b.n	800427e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d903      	bls.n	8004252 <DMA_CheckFifoParam+0xb6>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d003      	beq.n	8004258 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004250:	e018      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      break;
 8004256:	e015      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00e      	beq.n	8004282 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      break;
 8004268:	e00b      	b.n	8004282 <DMA_CheckFifoParam+0xe6>
      break;
 800426a:	bf00      	nop
 800426c:	e00a      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;
 800426e:	bf00      	nop
 8004270:	e008      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;
 8004272:	bf00      	nop
 8004274:	e006      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;
 8004276:	bf00      	nop
 8004278:	e004      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;   
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <DMA_CheckFifoParam+0xe8>
      break;
 8004282:	bf00      	nop
    }
  } 
  
  return status; 
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop

08004294 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e03b      	b.n	800431e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f833 	bl	8004326 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	f023 0107 	bic.w	r1, r3, #7
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68d1      	ldr	r1, [r2, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	430b      	orrs	r3, r1
 800430c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af02      	add	r7, sp, #8
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_DMA2D_Start+0x1c>
 8004352:	2302      	movs	r3, #2
 8004354:	e018      	b.n	8004388 <HAL_DMA2D_Start+0x4e>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f989 	bl	8004688 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d056      	beq.n	800445a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ac:	f7ff fc4e 	bl	8003c4c <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043b2:	e04b      	b.n	800444c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d023      	beq.n	800440e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	f043 0202 	orr.w	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	f043 0201 	orr.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2221      	movs	r2, #33	; 0x21
 80043f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0a5      	b.n	800455a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d01a      	beq.n	800444c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004416:	f7ff fc19 	bl	8003c4c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <HAL_DMA2D_PollForTransfer+0x9c>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2203      	movs	r2, #3
 800443c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e086      	b.n	800455a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ac      	beq.n	80043b4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d061      	beq.n	8004540 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800447c:	f7ff fbe6 	bl	8003c4c <HAL_GetTick>
 8004480:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004482:	e056      	b.n	8004532 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02e      	beq.n	80044f4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	f043 0204 	orr.w	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	f043 0202 	orr.w	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2229      	movs	r2, #41	; 0x29
 80044de:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2204      	movs	r2, #4
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d01a      	beq.n	8004532 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7ff fba6 	bl	8003c4c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <HAL_DMA2D_PollForTransfer+0x182>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e013      	b.n	800455a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0a1      	beq.n	8004484 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2212      	movs	r2, #18
 8004546:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_DMA2D_ConfigLayer+0x20>
 8004580:	2302      	movs	r3, #2
 8004582:	e079      	b.n	8004678 <HAL_DMA2D_ConfigLayer+0x114>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3318      	adds	r3, #24
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045ae:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_DMA2D_ConfigLayer+0x120>)
 80045b0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b0a      	cmp	r3, #10
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b09      	cmp	r3, #9
 80045c0:	d107      	bne.n	80045d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e005      	b.n	80045de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d120      	bne.n	8004626 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	ea02 0103 	and.w	r1, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b0a      	cmp	r3, #10
 800460c:	d003      	beq.n	8004616 <HAL_DMA2D_ConfigLayer+0xb2>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b09      	cmp	r3, #9
 8004614:	d127      	bne.n	8004666 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
 8004624:	e01f      	b.n	8004666 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b0a      	cmp	r3, #10
 800464e:	d003      	beq.n	8004658 <HAL_DMA2D_ConfigLayer+0xf4>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b09      	cmp	r3, #9
 8004656:	d106      	bne.n	8004666 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004664:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	ff03000f 	.word	0xff03000f

08004688 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004688:	b480      	push	{r7}
 800468a:	b08b      	sub	sp, #44	; 0x2c
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	041a      	lsls	r2, r3, #16
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	431a      	orrs	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046c0:	d174      	bne.n	80047ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d108      	bne.n	80046fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e053      	b.n	80047a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d106      	bne.n	8004710 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	e048      	b.n	80047a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d111      	bne.n	800473c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	0cdb      	lsrs	r3, r3, #19
 800471c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	0a9b      	lsrs	r3, r3, #10
 8004722:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	08db      	lsrs	r3, r3, #3
 8004728:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	02db      	lsls	r3, r3, #11
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	e032      	b.n	80047a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d117      	bne.n	8004774 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	0fdb      	lsrs	r3, r3, #31
 8004748:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	0cdb      	lsrs	r3, r3, #19
 800474e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	08db      	lsrs	r3, r3, #3
 800475a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	431a      	orrs	r2, r3
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	03db      	lsls	r3, r3, #15
 800476a:	4313      	orrs	r3, r2
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e016      	b.n	80047a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	0f1b      	lsrs	r3, r3, #28
 8004778:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	0d1b      	lsrs	r3, r3, #20
 800477e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	0b1b      	lsrs	r3, r3, #12
 8004784:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	011a      	lsls	r2, r3, #4
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	431a      	orrs	r2, r3
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	031b      	lsls	r3, r3, #12
 800479a:	4313      	orrs	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80047aa:	e003      	b.n	80047b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	60da      	str	r2, [r3, #12]
}
 80047b4:	bf00      	nop
 80047b6:	372c      	adds	r7, #44	; 0x2c
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e177      	b.n	8004acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8166 	bne.w	8004ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d005      	beq.n	8004812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480e:	2b02      	cmp	r3, #2
 8004810:	d130      	bne.n	8004874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 0201 	and.w	r2, r3, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b03      	cmp	r3, #3
 800487e:	d017      	beq.n	80048b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80c0 	beq.w	8004ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004954:	6453      	str	r3, [r2, #68]	; 0x44
 8004956:	4b63      	ldr	r3, [pc, #396]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004962:	4a61      	ldr	r2, [pc, #388]	; (8004ae8 <HAL_GPIO_Init+0x328>)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_GPIO_Init+0x32c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d037      	beq.n	80049fe <HAL_GPIO_Init+0x23e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a57      	ldr	r2, [pc, #348]	; (8004af0 <HAL_GPIO_Init+0x330>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d031      	beq.n	80049fa <HAL_GPIO_Init+0x23a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a56      	ldr	r2, [pc, #344]	; (8004af4 <HAL_GPIO_Init+0x334>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02b      	beq.n	80049f6 <HAL_GPIO_Init+0x236>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a55      	ldr	r2, [pc, #340]	; (8004af8 <HAL_GPIO_Init+0x338>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d025      	beq.n	80049f2 <HAL_GPIO_Init+0x232>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a54      	ldr	r2, [pc, #336]	; (8004afc <HAL_GPIO_Init+0x33c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <HAL_GPIO_Init+0x22e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a53      	ldr	r2, [pc, #332]	; (8004b00 <HAL_GPIO_Init+0x340>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d019      	beq.n	80049ea <HAL_GPIO_Init+0x22a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <HAL_GPIO_Init+0x344>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_GPIO_Init+0x226>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a51      	ldr	r2, [pc, #324]	; (8004b08 <HAL_GPIO_Init+0x348>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00d      	beq.n	80049e2 <HAL_GPIO_Init+0x222>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a50      	ldr	r2, [pc, #320]	; (8004b0c <HAL_GPIO_Init+0x34c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <HAL_GPIO_Init+0x21e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a4f      	ldr	r2, [pc, #316]	; (8004b10 <HAL_GPIO_Init+0x350>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_GPIO_Init+0x21a>
 80049d6:	2309      	movs	r3, #9
 80049d8:	e012      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049da:	230a      	movs	r3, #10
 80049dc:	e010      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049de:	2308      	movs	r3, #8
 80049e0:	e00e      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049e2:	2307      	movs	r3, #7
 80049e4:	e00c      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049e6:	2306      	movs	r3, #6
 80049e8:	e00a      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049ea:	2305      	movs	r3, #5
 80049ec:	e008      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e006      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e004      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e002      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_GPIO_Init+0x240>
 80049fe:	2300      	movs	r3, #0
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	f002 0203 	and.w	r2, r2, #3
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	4093      	lsls	r3, r2
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a10:	4935      	ldr	r1, [pc, #212]	; (8004ae8 <HAL_GPIO_Init+0x328>)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	3302      	adds	r3, #2
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a42:	4a34      	ldr	r2, [pc, #208]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a48:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a6c:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a96:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <HAL_GPIO_Init+0x354>)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	f67f ae84 	bls.w	80047dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3724      	adds	r7, #36	; 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40013800 	.word	0x40013800
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020400 	.word	0x40020400
 8004af4:	40020800 	.word	0x40020800
 8004af8:	40020c00 	.word	0x40020c00
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40021400 	.word	0x40021400
 8004b04:	40021800 	.word	0x40021800
 8004b08:	40021c00 	.word	0x40021c00
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40022400 	.word	0x40022400
 8004b14:	40013c00 	.word	0x40013c00

08004b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e0d9      	b.n	8004ce8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b34:	2201      	movs	r2, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f040 80c9 	bne.w	8004ce2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b50:	4a6b      	ldr	r2, [pc, #428]	; (8004d00 <HAL_GPIO_DeInit+0x1e8>)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	3302      	adds	r3, #2
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	220f      	movs	r2, #15
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a63      	ldr	r2, [pc, #396]	; (8004d04 <HAL_GPIO_DeInit+0x1ec>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d037      	beq.n	8004bea <HAL_GPIO_DeInit+0xd2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a62      	ldr	r2, [pc, #392]	; (8004d08 <HAL_GPIO_DeInit+0x1f0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d031      	beq.n	8004be6 <HAL_GPIO_DeInit+0xce>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <HAL_GPIO_DeInit+0x1f4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02b      	beq.n	8004be2 <HAL_GPIO_DeInit+0xca>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a60      	ldr	r2, [pc, #384]	; (8004d10 <HAL_GPIO_DeInit+0x1f8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d025      	beq.n	8004bde <HAL_GPIO_DeInit+0xc6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a5f      	ldr	r2, [pc, #380]	; (8004d14 <HAL_GPIO_DeInit+0x1fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01f      	beq.n	8004bda <HAL_GPIO_DeInit+0xc2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <HAL_GPIO_DeInit+0x200>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d019      	beq.n	8004bd6 <HAL_GPIO_DeInit+0xbe>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a5d      	ldr	r2, [pc, #372]	; (8004d1c <HAL_GPIO_DeInit+0x204>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_GPIO_DeInit+0xba>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a5c      	ldr	r2, [pc, #368]	; (8004d20 <HAL_GPIO_DeInit+0x208>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00d      	beq.n	8004bce <HAL_GPIO_DeInit+0xb6>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a5b      	ldr	r2, [pc, #364]	; (8004d24 <HAL_GPIO_DeInit+0x20c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <HAL_GPIO_DeInit+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	; (8004d28 <HAL_GPIO_DeInit+0x210>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_GPIO_DeInit+0xae>
 8004bc2:	2309      	movs	r3, #9
 8004bc4:	e012      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e010      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	e00e      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bce:	2307      	movs	r3, #7
 8004bd0:	e00c      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bd2:	2306      	movs	r3, #6
 8004bd4:	e00a      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bd6:	2305      	movs	r3, #5
 8004bd8:	e008      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bda:	2304      	movs	r3, #4
 8004bdc:	e006      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bde:	2303      	movs	r3, #3
 8004be0:	e004      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e002      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_GPIO_DeInit+0xd4>
 8004bea:	2300      	movs	r3, #0
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	f002 0203 	and.w	r2, r2, #3
 8004bf2:	0092      	lsls	r2, r2, #2
 8004bf4:	4093      	lsls	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d132      	bne.n	8004c62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4949      	ldr	r1, [pc, #292]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c0a:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	4946      	ldr	r1, [pc, #280]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c18:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	4942      	ldr	r1, [pc, #264]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c26:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	493f      	ldr	r1, [pc, #252]	; (8004d2c <HAL_GPIO_DeInit+0x214>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c44:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <HAL_GPIO_DeInit+0x1e8>)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	482a      	ldr	r0, [pc, #168]	; (8004d00 <HAL_GPIO_DeInit+0x1e8>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	08da      	lsrs	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3208      	adds	r2, #8
 8004c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	08d2      	lsrs	r2, r2, #3
 8004c98:	4019      	ands	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3208      	adds	r2, #8
 8004c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2103      	movs	r1, #3
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b0f      	cmp	r3, #15
 8004cec:	f67f af22 	bls.w	8004b34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40013800 	.word	0x40013800
 8004d04:	40020000 	.word	0x40020000
 8004d08:	40020400 	.word	0x40020400
 8004d0c:	40020800 	.word	0x40020800
 8004d10:	40020c00 	.word	0x40020c00
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40021400 	.word	0x40021400
 8004d1c:	40021800 	.word	0x40021800
 8004d20:	40021c00 	.word	0x40021c00
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40022400 	.word	0x40022400
 8004d2c:	40013c00 	.word	0x40013c00

08004d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d40:	787b      	ldrb	r3, [r7, #1]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d4c:	e003      	b.n	8004d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	041a      	lsls	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	619a      	str	r2, [r3, #24]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0bf      	b.n	8004ef6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8ba 	bl	8004f04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004da6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_LTDC_Init+0x19c>)
 8004dd8:	400b      	ands	r3, r1
 8004dda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6899      	ldr	r1, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68d9      	ldr	r1, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <HAL_LTDC_Init+0x19c>)
 8004e06:	400b      	ands	r3, r1
 8004e08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b33      	ldr	r3, [pc, #204]	; (8004f00 <HAL_LTDC_Init+0x19c>)
 8004e34:	400b      	ands	r3, r1
 8004e36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6919      	ldr	r1, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6959      	ldr	r1, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <HAL_LTDC_Init+0x19c>)
 8004e62:	400b      	ands	r3, r1
 8004e64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6959      	ldr	r1, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0206 	orr.w	r2, r2, #6
 8004ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	f000f800 	.word	0xf000f800

08004f04 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_LTDC_ConfigLayer+0x1a>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e02c      	b.n	8004f8c <HAL_LTDC_ConfigLayer+0x74>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2134      	movs	r1, #52	; 0x34
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4614      	mov	r4, r2
 8004f56:	461d      	mov	r5, r3
 8004f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f83b 	bl	8004fe8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bdb0      	pop	{r4, r5, r7, pc}

08004f94 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_LTDC_EnableDither+0x16>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e016      	b.n	8004fd8 <HAL_LTDC_EnableDither+0x44>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_LTDC_EnableDither+0x50>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_LTDC_EnableDither+0x50>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40016800 	.word	0x40016800

08004fe8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	4413      	add	r3, r2
 8005006:	041b      	lsls	r3, r3, #16
 8005008:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	01db      	lsls	r3, r3, #7
 8005014:	4413      	add	r3, r2
 8005016:	3384      	adds	r3, #132	; 0x84
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	4611      	mov	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	01d2      	lsls	r2, r2, #7
 8005024:	440a      	add	r2, r1
 8005026:	3284      	adds	r2, #132	; 0x84
 8005028:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800502c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800503e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005040:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	01db      	lsls	r3, r3, #7
 800504c:	440b      	add	r3, r1
 800504e:	3384      	adds	r3, #132	; 0x84
 8005050:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005056:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005066:	4413      	add	r3, r2
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	01db      	lsls	r3, r3, #7
 8005076:	4413      	add	r3, r2
 8005078:	3384      	adds	r3, #132	; 0x84
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	4611      	mov	r1, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	01d2      	lsls	r2, r2, #7
 8005086:	440a      	add	r2, r1
 8005088:	3284      	adds	r2, #132	; 0x84
 800508a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800508e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800509e:	4413      	add	r3, r2
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	01db      	lsls	r3, r3, #7
 80050ac:	440b      	add	r3, r1
 80050ae:	3384      	adds	r3, #132	; 0x84
 80050b0:	4619      	mov	r1, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	01db      	lsls	r3, r3, #7
 80050c2:	4413      	add	r3, r2
 80050c4:	3384      	adds	r3, #132	; 0x84
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	4611      	mov	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	01d2      	lsls	r2, r2, #7
 80050d2:	440a      	add	r2, r1
 80050d4:	3284      	adds	r2, #132	; 0x84
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	01db      	lsls	r3, r3, #7
 80050e6:	4413      	add	r3, r2
 80050e8:	3384      	adds	r3, #132	; 0x84
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	01db      	lsls	r3, r3, #7
 8005118:	4413      	add	r3, r2
 800511a:	3384      	adds	r3, #132	; 0x84
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	01db      	lsls	r3, r3, #7
 8005128:	4413      	add	r3, r2
 800512a:	3384      	adds	r3, #132	; 0x84
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005138:	461a      	mov	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	431a      	orrs	r2, r3
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	01db      	lsls	r3, r3, #7
 800514c:	440b      	add	r3, r1
 800514e:	3384      	adds	r3, #132	; 0x84
 8005150:	4619      	mov	r1, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	01db      	lsls	r3, r3, #7
 8005162:	4413      	add	r3, r2
 8005164:	3384      	adds	r3, #132	; 0x84
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4611      	mov	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	01d2      	lsls	r2, r2, #7
 8005172:	440a      	add	r2, r1
 8005174:	3284      	adds	r2, #132	; 0x84
 8005176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800517a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	01db      	lsls	r3, r3, #7
 8005186:	4413      	add	r3, r2
 8005188:	3384      	adds	r3, #132	; 0x84
 800518a:	461a      	mov	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	4413      	add	r3, r2
 800519e:	3384      	adds	r3, #132	; 0x84
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	4611      	mov	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	01d2      	lsls	r2, r2, #7
 80051ac:	440a      	add	r2, r1
 80051ae:	3284      	adds	r2, #132	; 0x84
 80051b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6809      	ldr	r1, [r1, #0]
 80051c6:	4608      	mov	r0, r1
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	01c9      	lsls	r1, r1, #7
 80051cc:	4401      	add	r1, r0
 80051ce:	3184      	adds	r1, #132	; 0x84
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	01db      	lsls	r3, r3, #7
 80051de:	4413      	add	r3, r2
 80051e0:	3384      	adds	r3, #132	; 0x84
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	01db      	lsls	r3, r3, #7
 80051ee:	4413      	add	r3, r2
 80051f0:	3384      	adds	r3, #132	; 0x84
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	01db      	lsls	r3, r3, #7
 8005202:	4413      	add	r3, r2
 8005204:	3384      	adds	r3, #132	; 0x84
 8005206:	461a      	mov	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005216:	2304      	movs	r3, #4
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e01b      	b.n	8005254 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005224:	2303      	movs	r3, #3
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e014      	b.n	8005254 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d00b      	beq.n	800524a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005236:	2b02      	cmp	r3, #2
 8005238:	d007      	beq.n	800524a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800523e:	2b03      	cmp	r3, #3
 8005240:	d003      	beq.n	800524a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005246:	2b07      	cmp	r3, #7
 8005248:	d102      	bne.n	8005250 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800524a:	2302      	movs	r3, #2
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	e001      	b.n	8005254 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005250:	2301      	movs	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	01db      	lsls	r3, r3, #7
 800525e:	4413      	add	r3, r2
 8005260:	3384      	adds	r3, #132	; 0x84
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	4611      	mov	r1, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	01d2      	lsls	r2, r2, #7
 800526e:	440a      	add	r2, r1
 8005270:	3284      	adds	r2, #132	; 0x84
 8005272:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005276:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1acb      	subs	r3, r1, r3
 800528e:	69f9      	ldr	r1, [r7, #28]
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	6809      	ldr	r1, [r1, #0]
 800529a:	4608      	mov	r0, r1
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	01c9      	lsls	r1, r1, #7
 80052a0:	4401      	add	r1, r0
 80052a2:	3184      	adds	r1, #132	; 0x84
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	01db      	lsls	r3, r3, #7
 80052b2:	4413      	add	r3, r2
 80052b4:	3384      	adds	r3, #132	; 0x84
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	4611      	mov	r1, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	01d2      	lsls	r2, r2, #7
 80052c2:	440a      	add	r2, r1
 80052c4:	3284      	adds	r2, #132	; 0x84
 80052c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052ca:	f023 0307 	bic.w	r3, r3, #7
 80052ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	4413      	add	r3, r2
 80052dc:	3384      	adds	r3, #132	; 0x84
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	4611      	mov	r1, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	01d2      	lsls	r2, r2, #7
 8005300:	440a      	add	r2, r1
 8005302:	3284      	adds	r2, #132	; 0x84
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6013      	str	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	3724      	adds	r7, #36	; 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005318:	b08f      	sub	sp, #60	; 0x3c
 800531a:	af0a      	add	r7, sp, #40	; 0x28
 800531c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e10f      	b.n	8005548 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f009 f9b0 	bl	800e6a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f003 fd3d 	bl	8008de6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	687e      	ldr	r6, [r7, #4]
 8005374:	466d      	mov	r5, sp
 8005376:	f106 0410 	add.w	r4, r6, #16
 800537a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800537c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800537e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005386:	e885 0003 	stmia.w	r5, {r0, r1}
 800538a:	1d33      	adds	r3, r6, #4
 800538c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800538e:	6838      	ldr	r0, [r7, #0]
 8005390:	f003 fc14 	bl	8008bbc <USB_CoreInit>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0d0      	b.n	8005548 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f003 fd2b 	bl	8008e08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e04a      	b.n	800544e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	333d      	adds	r3, #61	; 0x3d
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	333c      	adds	r3, #60	; 0x3c
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053e0:	7bfa      	ldrb	r2, [r7, #15]
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	b298      	uxth	r0, r3
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	3344      	adds	r3, #68	; 0x44
 80053f4:	4602      	mov	r2, r0
 80053f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053f8:	7bfa      	ldrb	r2, [r7, #15]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3340      	adds	r3, #64	; 0x40
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3348      	adds	r3, #72	; 0x48
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005420:	7bfa      	ldrb	r2, [r7, #15]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	334c      	adds	r3, #76	; 0x4c
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005434:	7bfa      	ldrb	r2, [r7, #15]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	3354      	adds	r3, #84	; 0x54
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	3301      	adds	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3af      	bcc.n	80053b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	e044      	b.n	80054e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005486:	7bfa      	ldrb	r2, [r7, #15]
 8005488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054b6:	7bfa      	ldrb	r2, [r7, #15]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054cc:	7bfa      	ldrb	r2, [r7, #15]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3301      	adds	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d3b5      	bcc.n	800545e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	687e      	ldr	r6, [r7, #4]
 80054fa:	466d      	mov	r5, sp
 80054fc:	f106 0410 	add.w	r4, r6, #16
 8005500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005508:	e894 0003 	ldmia.w	r4, {r0, r1}
 800550c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005510:	1d33      	adds	r3, r6, #4
 8005512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f003 fcc3 	bl	8008ea0 <USB_DevInit>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e00d      	b.n	8005548 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f004 fe12 	bl	800a16a <USB_DevDisconnect>

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_PCD_Start+0x1c>
 8005568:	2302      	movs	r3, #2
 800556a:	e020      	b.n	80055ae <HAL_PCD_Start+0x5e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	2b01      	cmp	r3, #1
 800557a:	d109      	bne.n	8005590 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005580:	2b01      	cmp	r3, #1
 8005582:	d005      	beq.n	8005590 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fc15 	bl	8008dc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fdc2 	bl	800a128 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055b6:	b590      	push	{r4, r7, lr}
 80055b8:	b08d      	sub	sp, #52	; 0x34
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f004 fe80 	bl	800a2d2 <USB_GetMode>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 848a 	bne.w	8005eee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 fde4 	bl	800a1ac <USB_ReadInterrupts>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8480 	beq.w	8005eec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f004 fdd1 	bl	800a1ac <USB_ReadInterrupts>
 800560a:	4603      	mov	r3, r0
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d107      	bne.n	8005624 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f002 0202 	and.w	r2, r2, #2
 8005622:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f004 fdbf 	bl	800a1ac <USB_ReadInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d161      	bne.n	80056fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0210 	bic.w	r2, r2, #16
 8005646:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f003 020f 	and.w	r2, r3, #15
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	3304      	adds	r3, #4
 8005666:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	0c5b      	lsrs	r3, r3, #17
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2b02      	cmp	r3, #2
 8005672:	d124      	bne.n	80056be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d035      	beq.n	80056ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800568a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6a38      	ldr	r0, [r7, #32]
 8005694:	f004 fbf6 	bl	8009e84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a4:	441a      	add	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b6:	441a      	add	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
 80056bc:	e016      	b.n	80056ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	0c5b      	lsrs	r3, r3, #17
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d110      	bne.n	80056ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056d0:	2208      	movs	r2, #8
 80056d2:	4619      	mov	r1, r3
 80056d4:	6a38      	ldr	r0, [r7, #32]
 80056d6:	f004 fbd5 	bl	8009e84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e6:	441a      	add	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0210 	orr.w	r2, r2, #16
 80056fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f004 fd53 	bl	800a1ac <USB_ReadInterrupts>
 8005706:	4603      	mov	r3, r0
 8005708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800570c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005710:	f040 80a7 	bne.w	8005862 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fd58 	bl	800a1d2 <USB_ReadDevAllOutEpInterrupt>
 8005722:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005724:	e099      	b.n	800585a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 808e 	beq.w	800584e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fd7c 	bl	800a23a <USB_ReadDevOutEPInterrupt>
 8005742:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	461a      	mov	r2, r3
 800575c:	2301      	movs	r3, #1
 800575e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fec2 	bl	80064ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	2308      	movs	r3, #8
 8005782:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 ff98 	bl	80066bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	461a      	mov	r2, r3
 80057a4:	2310      	movs	r3, #16
 80057a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d030      	beq.n	8005814 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d109      	bne.n	80057d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	3304      	adds	r3, #4
 80057e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d108      	bne.n	8005802 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f009 f855 	bl	800e8ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	2302      	movs	r3, #2
 8005812:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	461a      	mov	r2, r3
 800582c:	2320      	movs	r3, #32
 800582e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800584c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	3301      	adds	r3, #1
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	f47f af62 	bne.w	8005726 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f004 fca0 	bl	800a1ac <USB_ReadInterrupts>
 800586c:	4603      	mov	r3, r0
 800586e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005876:	f040 80db 	bne.w	8005a30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fcc1 	bl	800a206 <USB_ReadDevAllInEpInterrupt>
 8005884:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800588a:	e0cd      	b.n	8005a28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80c2 	beq.w	8005a1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f004 fce7 	bl	800a276 <USB_ReadDevInEPInterrupt>
 80058a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d057      	beq.n	8005964 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	2201      	movs	r2, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69f9      	ldr	r1, [r7, #28]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	461a      	mov	r2, r3
 80058e6:	2301      	movs	r3, #1
 80058e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d132      	bne.n	8005958 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	334c      	adds	r3, #76	; 0x4c
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4403      	add	r3, r0
 8005912:	3348      	adds	r3, #72	; 0x48
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4419      	add	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4403      	add	r3, r0
 8005926:	334c      	adds	r3, #76	; 0x4c
 8005928:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <HAL_PCD_IRQHandler+0x3a2>
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	3354      	adds	r3, #84	; 0x54
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d108      	bne.n	8005958 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005950:	461a      	mov	r2, r3
 8005952:	2101      	movs	r1, #1
 8005954:	f004 fcee 	bl	800a334 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f008 ff1f 	bl	800e7a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	461a      	mov	r2, r3
 800597c:	2308      	movs	r3, #8
 800597e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	461a      	mov	r2, r3
 8005998:	2310      	movs	r3, #16
 800599a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	461a      	mov	r2, r3
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c4:	6a38      	ldr	r0, [r7, #32]
 80059c6:	f003 fbcf 	bl	8009168 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3338      	adds	r3, #56	; 0x38
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d108      	bne.n	80059f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f008 ff6c 	bl	800e8d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	2302      	movs	r3, #2
 8005a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fcdb 	bl	80063d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f af2e 	bne.w	800588c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f004 fbb9 	bl	800a1ac <USB_ReadInterrupts>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a44:	d122      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d108      	bne.n	8005a76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fec2 	bl	80067f8 <HAL_PCDEx_LPM_Callback>
 8005a74:	e002      	b.n	8005a7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f008 ff0a 	bl	800e890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f004 fb8b 	bl	800a1ac <USB_ReadInterrupts>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa0:	d112      	bne.n	8005ac8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d102      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f008 fec6 	bl	800e844 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005ac6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 fb6d 	bl	800a1ac <USB_ReadInterrupts>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	f040 80b7 	bne.w	8005c4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2110      	movs	r1, #16
 8005afa:	4618      	mov	r0, r3
 8005afc:	f003 fb34 	bl	8009168 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b04:	e046      	b.n	8005b94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	461a      	mov	r2, r3
 8005b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	461a      	mov	r2, r3
 8005b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	3301      	adds	r3, #1
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3b3      	bcc.n	8005b06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bca:	f043 030b 	orr.w	r3, r3, #11
 8005bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be0:	f043 030b 	orr.w	r3, r3, #11
 8005be4:	6453      	str	r3, [r2, #68]	; 0x44
 8005be6:	e015      	b.n	8005c14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005bfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0e:	f043 030b 	orr.w	r3, r3, #11
 8005c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f004 fb7b 	bl	800a334 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f004 faaa 	bl	800a1ac <USB_ReadInterrupts>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d124      	bne.n	8005cae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f004 fb40 	bl	800a2ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f003 faf5 	bl	8009262 <USB_GetDevSpeed>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681c      	ldr	r4, [r3, #0]
 8005c84:	f001 fa28 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 8005c88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f002 fff4 	bl	8008c80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f008 fdaa 	bl	800e7f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 fa7a 	bl	800a1ac <USB_ReadInterrupts>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f008 fd87 	bl	800e7d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f002 0208 	and.w	r2, r2, #8
 8005cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f004 fa65 	bl	800a1ac <USB_ReadInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b80      	cmp	r3, #128	; 0x80
 8005cea:	d122      	bne.n	8005d32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	e014      	b.n	8005d28 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb27 	bl	8006370 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	3301      	adds	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3e5      	bcc.n	8005cfe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f004 fa38 	bl	800a1ac <USB_ReadInterrupts>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d46:	d13b      	bne.n	8005dc0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d48:	2301      	movs	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4c:	e02b      	b.n	8005da6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3340      	adds	r3, #64	; 0x40
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d115      	bne.n	8005da0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da12      	bge.n	8005da0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	333f      	adds	r3, #63	; 0x3f
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fae8 	bl	8006370 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	3301      	adds	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3ce      	bcc.n	8005d4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f004 f9f1 	bl	800a1ac <USB_ReadInterrupts>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd4:	d155      	bne.n	8005e82 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	e045      	b.n	8005e68 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	4613      	mov	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d12e      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da2b      	bge.n	8005e62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005e16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d121      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e5e:	6053      	str	r3, [r2, #4]
            break;
 8005e60:	e007      	b.n	8005e72 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	3301      	adds	r3, #1
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3b4      	bcc.n	8005ddc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f004 f990 	bl	800a1ac <USB_ReadInterrupts>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e96:	d10a      	bne.n	8005eae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f008 fd2b 	bl	800e8f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f004 f97a 	bl	800a1ac <USB_ReadInterrupts>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d115      	bne.n	8005eee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f008 fd1b 	bl	800e910 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	e000      	b.n	8005eee <HAL_PCD_IRQHandler+0x938>
      return;
 8005eec:	bf00      	nop
    }
  }
}
 8005eee:	3734      	adds	r7, #52	; 0x34
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd90      	pop	{r4, r7, pc}

08005ef4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_PCD_SetAddress+0x1a>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e013      	b.n	8005f36 <HAL_PCD_SetAddress+0x42>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f004 f8d8 	bl	800a0dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	70fb      	strb	r3, [r7, #3]
 8005f50:	460b      	mov	r3, r1
 8005f52:	803b      	strh	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da0f      	bge.n	8005f84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	f003 020f 	and.w	r2, r3, #15
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	3338      	adds	r3, #56	; 0x38
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	3304      	adds	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	705a      	strb	r2, [r3, #1]
 8005f82:	e00f      	b.n	8005fa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 020f 	and.w	r2, r3, #15
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fb0:	883a      	ldrh	r2, [r7, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	78ba      	ldrb	r2, [r7, #2]
 8005fba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fce:	78bb      	ldrb	r3, [r7, #2]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d102      	bne.n	8005fda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_PCD_EP_Open+0xaa>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e00e      	b.n	8006006 <HAL_PCD_EP_Open+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68f9      	ldr	r1, [r7, #12]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f003 f958 	bl	80092ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006004:	7afb      	ldrb	r3, [r7, #11]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800601a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da0f      	bge.n	8006042 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	3338      	adds	r3, #56	; 0x38
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	705a      	strb	r2, [r3, #1]
 8006040:	e00f      	b.n	8006062 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_PCD_EP_Close+0x6e>
 8006078:	2302      	movs	r3, #2
 800607a:	e00e      	b.n	800609a <HAL_PCD_EP_Close+0x8c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	f003 f996 	bl	80093bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	460b      	mov	r3, r1
 80060b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060e4:	7afb      	ldrb	r3, [r7, #11]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d102      	bne.n	80060fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	f003 fc75 	bl	8009a04 <USB_EP0StartXfer>
 800611a:	e008      	b.n	800612e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	f003 fa23 	bl	8009574 <USB_EPStartXfer>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	f003 020f 	and.w	r2, r3, #15
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	460b      	mov	r3, r1
 8006176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	3338      	adds	r3, #56	; 0x38
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	3304      	adds	r3, #4
 800618e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2201      	movs	r2, #1
 80061a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d102      	bne.n	80061c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	f003 fc13 	bl	8009a04 <USB_EP0StartXfer>
 80061de:	e008      	b.n	80061f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	6979      	ldr	r1, [r7, #20]
 80061ee:	f003 f9c1 	bl	8009574 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	f003 020f 	and.w	r2, r3, #15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d901      	bls.n	800621a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e050      	b.n	80062bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800621a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621e:	2b00      	cmp	r3, #0
 8006220:	da0f      	bge.n	8006242 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	3338      	adds	r3, #56	; 0x38
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	3304      	adds	r3, #4
 8006238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	705a      	strb	r2, [r3, #1]
 8006240:	e00d      	b.n	800625e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	3304      	adds	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_PCD_EP_SetStall+0x82>
 800627a:	2302      	movs	r3, #2
 800627c:	e01e      	b.n	80062bc <HAL_PCD_EP_SetStall+0xc0>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	4618      	mov	r0, r3
 800628e:	f003 fe51 	bl	8009f34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	b2d9      	uxtb	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062ac:	461a      	mov	r2, r3
 80062ae:	f004 f841 	bl	800a334 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 020f 	and.w	r2, r3, #15
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d901      	bls.n	80062e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e042      	b.n	8006368 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da0f      	bge.n	800630a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	3338      	adds	r3, #56	; 0x38
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	705a      	strb	r2, [r3, #1]
 8006308:	e00f      	b.n	800632a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 020f 	and.w	r2, r3, #15
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_PCD_EP_ClrStall+0x86>
 8006346:	2302      	movs	r3, #2
 8006348:	e00e      	b.n	8006368 <HAL_PCD_EP_ClrStall+0xa4>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	4618      	mov	r0, r3
 800635a:	f003 fe59 	bl	800a010 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800637c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006380:	2b00      	cmp	r3, #0
 8006382:	da0c      	bge.n	800639e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	3338      	adds	r3, #56	; 0x38
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4413      	add	r3, r2
 8006398:	3304      	adds	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e00c      	b.n	80063b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	4618      	mov	r0, r3
 80063c0:	f003 fc78 	bl	8009cb4 <USB_EPStopXfer>
 80063c4:	4603      	mov	r3, r0
 80063c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08a      	sub	sp, #40	; 0x28
 80063d6:	af02      	add	r7, sp, #8
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	3338      	adds	r3, #56	; 0x38
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	3304      	adds	r3, #4
 80063f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d901      	bls.n	800640a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e06c      	b.n	80064e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3303      	adds	r3, #3
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800642e:	e02b      	b.n	8006488 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	429a      	cmp	r2, r3
 8006444:	d902      	bls.n	800644c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3303      	adds	r3, #3
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6919      	ldr	r1, [r3, #16]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006464:	b2db      	uxtb	r3, r3
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4603      	mov	r3, r0
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f003 fccc 	bl	8009e08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	b29b      	uxth	r3, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	429a      	cmp	r2, r3
 800649c:	d809      	bhi.n	80064b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d203      	bcs.n	80064b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1be      	bne.n	8006430 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d811      	bhi.n	80064e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2201      	movs	r2, #1
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	6939      	ldr	r1, [r7, #16]
 80064da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064de:	4013      	ands	r3, r2
 80064e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	333c      	adds	r3, #60	; 0x3c
 8006504:	3304      	adds	r3, #4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d17b      	bne.n	800661a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4a61      	ldr	r2, [pc, #388]	; (80066b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	f240 80b9 	bls.w	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80b3 	beq.w	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	461a      	mov	r2, r3
 8006550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006554:	6093      	str	r3, [r2, #8]
 8006556:	e0a7      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	461a      	mov	r2, r3
 8006570:	2320      	movs	r3, #32
 8006572:	6093      	str	r3, [r2, #8]
 8006574:	e098      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8093 	bne.w	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4a4b      	ldr	r2, [pc, #300]	; (80066b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d90f      	bls.n	80065aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	6093      	str	r3, [r2, #8]
 80065a8:	e07e      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4413      	add	r3, r2
 80065bc:	3304      	adds	r3, #4
 80065be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	0159      	lsls	r1, r3, #5
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d6:	1ad2      	subs	r2, r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d114      	bne.n	800660c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065f4:	461a      	mov	r2, r3
 80065f6:	2101      	movs	r1, #1
 80065f8:	f003 fe9c 	bl	800a334 <USB_EP0_OutStart>
 80065fc:	e006      	b.n	800660c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f008 f8aa 	bl	800e76c <HAL_PCD_DataOutStageCallback>
 8006618:	e046      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d124      	bne.n	800666c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	461a      	mov	r2, r3
 800663a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800663e:	6093      	str	r3, [r2, #8]
 8006640:	e032      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	461a      	mov	r2, r3
 800665a:	2320      	movs	r3, #32
 800665c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f008 f881 	bl	800e76c <HAL_PCD_DataOutStageCallback>
 800666a:	e01d      	b.n	80066a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d114      	bne.n	800669c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006694:	461a      	mov	r2, r3
 8006696:	2100      	movs	r1, #0
 8006698:	f003 fe4c 	bl	800a334 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f008 f862 	bl	800e76c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	4f54300a 	.word	0x4f54300a
 80066b8:	4f54310a 	.word	0x4f54310a

080066bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	333c      	adds	r3, #60	; 0x3c
 80066d4:	3304      	adds	r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a15      	ldr	r2, [pc, #84]	; (8006744 <PCD_EP_OutSetupPacket_int+0x88>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d90e      	bls.n	8006710 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	461a      	mov	r2, r3
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f008 f819 	bl	800e748 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <PCD_EP_OutSetupPacket_int+0x88>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d90c      	bls.n	8006738 <PCD_EP_OutSetupPacket_int+0x7c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d108      	bne.n	8006738 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006730:	461a      	mov	r2, r3
 8006732:	2101      	movs	r1, #1
 8006734:	f003 fdfe 	bl	800a334 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	4f54300a 	.word	0x4f54300a

08006748 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
 8006754:	4613      	mov	r3, r2
 8006756:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d107      	bne.n	8006776 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006766:	883b      	ldrh	r3, [r7, #0]
 8006768:	0419      	lsls	r1, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	430a      	orrs	r2, r1
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
 8006774:	e028      	b.n	80067c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
 8006788:	e00d      	b.n	80067a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	3340      	adds	r3, #64	; 0x40
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	3301      	adds	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	7bfa      	ldrb	r2, [r7, #15]
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d3ec      	bcc.n	800678a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067b0:	883b      	ldrh	r3, [r7, #0]
 80067b2:	0418      	lsls	r0, r3, #16
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6819      	ldr	r1, [r3, #0]
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4302      	orrs	r2, r0
 80067c0:	3340      	adds	r3, #64	; 0x40
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	887a      	ldrh	r2, [r7, #2]
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e267      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d075      	beq.n	800691a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800682e:	4b88      	ldr	r3, [pc, #544]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	2b04      	cmp	r3, #4
 8006838:	d00c      	beq.n	8006854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683a:	4b85      	ldr	r3, [pc, #532]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006842:	2b08      	cmp	r3, #8
 8006844:	d112      	bne.n	800686c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006846:	4b82      	ldr	r3, [pc, #520]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006852:	d10b      	bne.n	800686c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006854:	4b7e      	ldr	r3, [pc, #504]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05b      	beq.n	8006918 <HAL_RCC_OscConfig+0x108>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d157      	bne.n	8006918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e242      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	d106      	bne.n	8006884 <HAL_RCC_OscConfig+0x74>
 8006876:	4b76      	ldr	r3, [pc, #472]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a75      	ldr	r2, [pc, #468]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e01d      	b.n	80068c0 <HAL_RCC_OscConfig+0xb0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x98>
 800688e:	4b70      	ldr	r3, [pc, #448]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6f      	ldr	r2, [pc, #444]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b6d      	ldr	r3, [pc, #436]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6c      	ldr	r2, [pc, #432]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e00b      	b.n	80068c0 <HAL_RCC_OscConfig+0xb0>
 80068a8:	4b69      	ldr	r3, [pc, #420]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a68      	ldr	r2, [pc, #416]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	4b66      	ldr	r3, [pc, #408]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a65      	ldr	r2, [pc, #404]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d013      	beq.n	80068f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fd f9c0 	bl	8003c4c <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d0:	f7fd f9bc 	bl	8003c4c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b64      	cmp	r3, #100	; 0x64
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e207      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b5b      	ldr	r3, [pc, #364]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0xc0>
 80068ee:	e014      	b.n	800691a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f0:	f7fd f9ac 	bl	8003c4c <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068f8:	f7fd f9a8 	bl	8003c4c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b64      	cmp	r3, #100	; 0x64
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e1f3      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	4b51      	ldr	r3, [pc, #324]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f0      	bne.n	80068f8 <HAL_RCC_OscConfig+0xe8>
 8006916:	e000      	b.n	800691a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d063      	beq.n	80069ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006926:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006932:	4b47      	ldr	r3, [pc, #284]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800693a:	2b08      	cmp	r3, #8
 800693c:	d11c      	bne.n	8006978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693e:	4b44      	ldr	r3, [pc, #272]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	4b41      	ldr	r3, [pc, #260]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_RCC_OscConfig+0x152>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e1c7      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006962:	4b3b      	ldr	r3, [pc, #236]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4937      	ldr	r1, [pc, #220]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006976:	e03a      	b.n	80069ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006980:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <HAL_RCC_OscConfig+0x244>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fd f961 	bl	8003c4c <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800698e:	f7fd f95d 	bl	8003c4c <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e1a8      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a0:	4b2b      	ldr	r3, [pc, #172]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ac:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4925      	ldr	r1, [pc, #148]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]
 80069c0:	e015      	b.n	80069ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_OscConfig+0x244>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fd f940 	bl	8003c4c <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d0:	f7fd f93c 	bl	8003c4c <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e187      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e2:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d036      	beq.n	8006a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <HAL_RCC_OscConfig+0x248>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a08:	f7fd f920 	bl	8003c4c <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a10:	f7fd f91c 	bl	8003c4c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e167      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0x200>
 8006a2e:	e01b      	b.n	8006a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <HAL_RCC_OscConfig+0x248>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a36:	f7fd f909 	bl	8003c4c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3c:	e00e      	b.n	8006a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a3e:	f7fd f905 	bl	8003c4c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d907      	bls.n	8006a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e150      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
 8006a50:	40023800 	.word	0x40023800
 8006a54:	42470000 	.word	0x42470000
 8006a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a5c:	4b88      	ldr	r3, [pc, #544]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1ea      	bne.n	8006a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8097 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7a:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	4b7d      	ldr	r3, [pc, #500]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	4a7c      	ldr	r2, [pc, #496]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6413      	str	r3, [r2, #64]	; 0x40
 8006a96:	4b7a      	ldr	r3, [pc, #488]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b77      	ldr	r3, [pc, #476]	; (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d118      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	4b74      	ldr	r3, [pc, #464]	; (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a73      	ldr	r2, [pc, #460]	; (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7fd f8c5 	bl	8003c4c <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac6:	f7fd f8c1 	bl	8003c4c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e10c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad8:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_OscConfig+0x2ea>
 8006aec:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	4a63      	ldr	r2, [pc, #396]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	; 0x70
 8006af8:	e01c      	b.n	8006b34 <HAL_RCC_OscConfig+0x324>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x30c>
 8006b02:	4b5f      	ldr	r3, [pc, #380]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b06:	4a5e      	ldr	r2, [pc, #376]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b08:	f043 0304 	orr.w	r3, r3, #4
 8006b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0e:	4b5c      	ldr	r3, [pc, #368]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	4a5b      	ldr	r2, [pc, #364]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0x324>
 8006b1c:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	4a57      	ldr	r2, [pc, #348]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70
 8006b28:	4b55      	ldr	r3, [pc, #340]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	4a54      	ldr	r2, [pc, #336]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	f023 0304 	bic.w	r3, r3, #4
 8006b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d015      	beq.n	8006b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fd f886 	bl	8003c4c <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	e00a      	b.n	8006b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b44:	f7fd f882 	bl	8003c4c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0cb      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5a:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ee      	beq.n	8006b44 <HAL_RCC_OscConfig+0x334>
 8006b66:	e014      	b.n	8006b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b68:	f7fd f870 	bl	8003c4c <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6e:	e00a      	b.n	8006b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b70:	f7fd f86c 	bl	8003c4c <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e0b5      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b86:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ee      	bne.n	8006b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b98:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	4a38      	ldr	r2, [pc, #224]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a1 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bae:	4b34      	ldr	r3, [pc, #208]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d05c      	beq.n	8006c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d141      	bne.n	8006c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc8:	f7fd f840 	bl	8003c4c <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd0:	f7fd f83c 	bl	8003c4c <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e087      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	019b      	lsls	r3, r3, #6
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	3b01      	subs	r3, #1
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	491b      	ldr	r1, [pc, #108]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c18:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7fd f815 	bl	8003c4c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c26:	f7fd f811 	bl	8003c4c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e05c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x416>
 8006c44:	e054      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fc fffe 	bl	8003c4c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fc fffa 	bl	8003c4c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e045      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x444>
 8006c72:	e03d      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e038      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
 8006c80:	40023800 	.word	0x40023800
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <HAL_RCC_OscConfig+0x4ec>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d028      	beq.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d121      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d11a      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d111      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d107      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800

08006d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0cc      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d14:	4b68      	ldr	r3, [pc, #416]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d90c      	bls.n	8006d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d22:	4b65      	ldr	r3, [pc, #404]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2a:	4b63      	ldr	r3, [pc, #396]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0b8      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d020      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d54:	4b59      	ldr	r3, [pc, #356]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a58      	ldr	r2, [pc, #352]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d6c:	4b53      	ldr	r3, [pc, #332]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a52      	ldr	r2, [pc, #328]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d78:	4b50      	ldr	r3, [pc, #320]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	494d      	ldr	r1, [pc, #308]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d044      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d107      	bne.n	8006dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	4b47      	ldr	r3, [pc, #284]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d119      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e07f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e06f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dce:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e067      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dde:	4b37      	ldr	r3, [pc, #220]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f023 0203 	bic.w	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4934      	ldr	r1, [pc, #208]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df0:	f7fc ff2c 	bl	8003c4c <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df8:	f7fc ff28 	bl	8003c4c <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e04f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 020c 	and.w	r2, r3, #12
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d1eb      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d20c      	bcs.n	8006e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e032      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e54:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4916      	ldr	r1, [pc, #88]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	490e      	ldr	r1, [pc, #56]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e86:	f000 f821 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	490a      	ldr	r1, [pc, #40]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e98:	5ccb      	ldrb	r3, [r1, r3]
 8006e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fa fe14 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023c00 	.word	0x40023c00
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	08011c68 	.word	0x08011c68
 8006ec4:	20000000 	.word	0x20000000
 8006ec8:	20000088 	.word	0x20000088

08006ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed0:	b094      	sub	sp, #80	; 0x50
 8006ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed8:	2300      	movs	r3, #0
 8006eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006edc:	2300      	movs	r3, #0
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee4:	4b79      	ldr	r3, [pc, #484]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 030c 	and.w	r3, r3, #12
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d00d      	beq.n	8006f0c <HAL_RCC_GetSysClockFreq+0x40>
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	f200 80e1 	bhi.w	80070b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x34>
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d003      	beq.n	8006f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006efe:	e0db      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f00:	4b73      	ldr	r3, [pc, #460]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f04:	e0db      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f06:	4b73      	ldr	r3, [pc, #460]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f0a:	e0d8      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f0c:	4b6f      	ldr	r3, [pc, #444]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f16:	4b6d      	ldr	r3, [pc, #436]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d063      	beq.n	8006fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f22:	4b6a      	ldr	r3, [pc, #424]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	2200      	movs	r2, #0
 8006f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	0159      	lsls	r1, r3, #5
 8006f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f50:	0150      	lsls	r0, r2, #5
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4621      	mov	r1, r4
 8006f58:	1a51      	subs	r1, r2, r1
 8006f5a:	6139      	str	r1, [r7, #16]
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f70:	4659      	mov	r1, fp
 8006f72:	018b      	lsls	r3, r1, #6
 8006f74:	4651      	mov	r1, sl
 8006f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	018a      	lsls	r2, r1, #6
 8006f7e:	4651      	mov	r1, sl
 8006f80:	ebb2 0801 	subs.w	r8, r2, r1
 8006f84:	4659      	mov	r1, fp
 8006f86:	eb63 0901 	sbc.w	r9, r3, r1
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f9e:	4690      	mov	r8, r2
 8006fa0:	4699      	mov	r9, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	eb18 0303 	adds.w	r3, r8, r3
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	462b      	mov	r3, r5
 8006fac:	eb49 0303 	adc.w	r3, r9, r3
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	024b      	lsls	r3, r1, #9
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fc8:	4621      	mov	r1, r4
 8006fca:	024a      	lsls	r2, r1, #9
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fdc:	f7f9 fe44 	bl	8000c68 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	e058      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fea:	4b38      	ldr	r3, [pc, #224]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8007000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	0159      	lsls	r1, r3, #5
 8007012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007016:	0150      	lsls	r0, r2, #5
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4641      	mov	r1, r8
 800701e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007022:	4649      	mov	r1, r9
 8007024:	eb63 0b01 	sbc.w	fp, r3, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800703c:	ebb2 040a 	subs.w	r4, r2, sl
 8007040:	eb63 050b 	sbc.w	r5, r3, fp
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	00eb      	lsls	r3, r5, #3
 800704e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007052:	00e2      	lsls	r2, r4, #3
 8007054:	4614      	mov	r4, r2
 8007056:	461d      	mov	r5, r3
 8007058:	4643      	mov	r3, r8
 800705a:	18e3      	adds	r3, r4, r3
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	464b      	mov	r3, r9
 8007060:	eb45 0303 	adc.w	r3, r5, r3
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007072:	4629      	mov	r1, r5
 8007074:	028b      	lsls	r3, r1, #10
 8007076:	4621      	mov	r1, r4
 8007078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800707c:	4621      	mov	r1, r4
 800707e:	028a      	lsls	r2, r1, #10
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007086:	2200      	movs	r2, #0
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	61fa      	str	r2, [r7, #28]
 800708c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007090:	f7f9 fdea 	bl	8000c68 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4613      	mov	r3, r2
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80070ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070b6:	e002      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80070ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3750      	adds	r7, #80	; 0x50
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ca:	bf00      	nop
 80070cc:	40023800 	.word	0x40023800
 80070d0:	00f42400 	.word	0x00f42400
 80070d4:	007a1200 	.word	0x007a1200

080070d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070dc:	4b03      	ldr	r3, [pc, #12]	; (80070ec <HAL_RCC_GetHCLKFreq+0x14>)
 80070de:	681b      	ldr	r3, [r3, #0]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20000000 	.word	0x20000000

080070f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070f4:	f7ff fff0 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	0a9b      	lsrs	r3, r3, #10
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	4903      	ldr	r1, [pc, #12]	; (8007114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007106:	5ccb      	ldrb	r3, [r1, r3]
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40023800 	.word	0x40023800
 8007114:	08011c78 	.word	0x08011c78

08007118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220f      	movs	r2, #15
 8007126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007128:	4b12      	ldr	r3, [pc, #72]	; (8007174 <HAL_RCC_GetClockConfig+0x5c>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0203 	and.w	r2, r3, #3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <HAL_RCC_GetClockConfig+0x5c>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RCC_GetClockConfig+0x5c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <HAL_RCC_GetClockConfig+0x5c>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <HAL_RCC_GetClockConfig+0x60>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 020f 	and.w	r2, r3, #15
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	601a      	str	r2, [r3, #0]
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40023800 	.word	0x40023800
 8007178:	40023c00 	.word	0x40023c00

0800717c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10b      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d075      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071b0:	4b91      	ldr	r3, [pc, #580]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071b6:	f7fc fd49 	bl	8003c4c <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071bc:	e008      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071be:	f7fc fd45 	bl	8003c4c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e189      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071d0:	4b8a      	ldr	r3, [pc, #552]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f0      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	019a      	lsls	r2, r3, #6
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	071b      	lsls	r3, r3, #28
 80071f4:	4981      	ldr	r1, [pc, #516]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007208:	4b7c      	ldr	r3, [pc, #496]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800720a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720e:	0f1b      	lsrs	r3, r3, #28
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	019a      	lsls	r2, r3, #6
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	061b      	lsls	r3, r3, #24
 8007222:	431a      	orrs	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	071b      	lsls	r3, r3, #28
 8007228:	4974      	ldr	r1, [pc, #464]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007230:	4b72      	ldr	r3, [pc, #456]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007236:	f023 021f 	bic.w	r2, r3, #31
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	3b01      	subs	r3, #1
 8007240:	496e      	ldr	r1, [pc, #440]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	019a      	lsls	r2, r3, #6
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	061b      	lsls	r3, r3, #24
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	071b      	lsls	r3, r3, #28
 8007268:	4964      	ldr	r1, [pc, #400]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007270:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007276:	f7fc fce9 	bl	8003c4c <HAL_GetTick>
 800727a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800727e:	f7fc fce5 	bl	8003c4c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e129      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007290:	4b5a      	ldr	r3, [pc, #360]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d079      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072b4:	4b52      	ldr	r3, [pc, #328]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ba:	f7fc fcc7 	bl	8003c4c <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072c0:	e008      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80072c2:	f7fc fcc3 	bl	8003c4c <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e107      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072d4:	4b49      	ldr	r3, [pc, #292]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e0:	d0ef      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d020      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072ee:	4b43      	ldr	r3, [pc, #268]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	0f1b      	lsrs	r3, r3, #28
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	019a      	lsls	r2, r3, #6
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	061b      	lsls	r3, r3, #24
 8007308:	431a      	orrs	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	071b      	lsls	r3, r3, #28
 800730e:	493b      	ldr	r1, [pc, #236]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007316:	4b39      	ldr	r3, [pc, #228]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	3b01      	subs	r3, #1
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	4934      	ldr	r1, [pc, #208]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01e      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800733c:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	0e1b      	lsrs	r3, r3, #24
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	019a      	lsls	r2, r3, #6
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	061b      	lsls	r3, r3, #24
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	071b      	lsls	r3, r3, #28
 800735c:	4927      	ldr	r1, [pc, #156]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	4922      	ldr	r1, [pc, #136]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800737a:	4b21      	ldr	r3, [pc, #132]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800737c:	2201      	movs	r2, #1
 800737e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007380:	f7fc fc64 	bl	8003c4c <HAL_GetTick>
 8007384:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007386:	e008      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007388:	f7fc fc60 	bl	8003c4c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0a4      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800739a:	4b18      	ldr	r3, [pc, #96]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a6:	d1ef      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 808b 	beq.w	80074cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	4a0f      	ldr	r2, [pc, #60]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c4:	6413      	str	r3, [r2, #64]	; 0x40
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80073d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073de:	f7fc fc35 	bl	8003c4c <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073e4:	e010      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073e6:	f7fc fc31 	bl	8003c4c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d909      	bls.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e075      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80073f8:	42470068 	.word	0x42470068
 80073fc:	40023800 	.word	0x40023800
 8007400:	42470070 	.word	0x42470070
 8007404:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007408:	4b38      	ldr	r3, [pc, #224]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0e8      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007414:	4b36      	ldr	r3, [pc, #216]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02f      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d028      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007432:	4b2f      	ldr	r3, [pc, #188]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007442:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007448:	4a29      	ldr	r2, [pc, #164]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800744e:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d114      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800745a:	f7fc fbf7 	bl	8003c4c <HAL_GetTick>
 800745e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007460:	e00a      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fc fbf3 	bl	8003c4c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e035      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ee      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007490:	d10d      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007492:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a6:	4912      	ldr	r1, [pc, #72]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	608b      	str	r3, [r1, #8]
 80074ac:	e005      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074b8:	6093      	str	r3, [r2, #8]
 80074ba:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c6:	490a      	ldr	r1, [pc, #40]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80074e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40007000 	.word	0x40007000
 80074f0:	40023800 	.word	0x40023800
 80074f4:	42470e40 	.word	0x42470e40
 80074f8:	424711e0 	.word	0x424711e0

080074fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e025      	b.n	800755c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f81d 	bl	8007564 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3304      	adds	r3, #4
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f001 fa23 	bl	8008988 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	461a      	mov	r2, r3
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	f001 fa78 	bl	8008a42 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800758a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d101      	bne.n	8007596 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
 8007594:	e021      	b.n	80075da <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d002      	beq.n	80075a2 <HAL_SDRAM_SendCommand+0x2a>
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d118      	bne.n	80075d4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 faae 	bl	8008b14 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d104      	bne.n	80075ca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2205      	movs	r2, #5
 80075c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075c8:	e006      	b.n	80075d8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075d2:	e001      	b.n	80075d8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d101      	bne.n	80075fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80075f8:	2302      	movs	r3, #2
 80075fa:	e016      	b.n	800762a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10f      	bne.n	8007628 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fab9 	bl	8008b8e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	e000      	b.n	800762a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e07b      	b.n	800773c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007654:	d009      	beq.n	800766a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	61da      	str	r2, [r3, #28]
 800765c:	e005      	b.n	800766a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fa f9b3 	bl	80019f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	ea42 0103 	orr.w	r1, r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	f003 0104 	and.w	r1, r3, #4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	f003 0210 	and.w	r2, r3, #16
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69da      	ldr	r2, [r3, #28]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e01a      	b.n	800778c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fa f98e 	bl	8001a90 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_SPI_Transmit+0x22>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e126      	b.n	8007a04 <HAL_SPI_Transmit+0x270>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077be:	f7fc fa45 	bl	8003c4c <HAL_GetTick>
 80077c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077c4:	88fb      	ldrh	r3, [r7, #6]
 80077c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d002      	beq.n	80077da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077d4:	2302      	movs	r3, #2
 80077d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077d8:	e10b      	b.n	80079f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_SPI_Transmit+0x52>
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077ea:	e102      	b.n	80079f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2203      	movs	r2, #3
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007832:	d10f      	bne.n	8007854 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007852:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d007      	beq.n	8007872 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787a:	d14b      	bne.n	8007914 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_SPI_Transmit+0xf6>
 8007884:	8afb      	ldrh	r3, [r7, #22]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d13e      	bne.n	8007908 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	881a      	ldrh	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	1c9a      	adds	r2, r3, #2
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078ae:	e02b      	b.n	8007908 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d112      	bne.n	80078e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80078e2:	e011      	b.n	8007908 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e4:	f7fc f9b2 	bl	8003c4c <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d803      	bhi.n	80078fc <HAL_SPI_Transmit+0x168>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d102      	bne.n	8007902 <HAL_SPI_Transmit+0x16e>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007906:	e074      	b.n	80079f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1ce      	bne.n	80078b0 <HAL_SPI_Transmit+0x11c>
 8007912:	e04c      	b.n	80079ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_Transmit+0x18e>
 800791c:	8afb      	ldrh	r3, [r7, #22]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d140      	bne.n	80079a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007948:	e02c      	b.n	80079a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d113      	bne.n	8007980 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	86da      	strh	r2, [r3, #54]	; 0x36
 800797e:	e011      	b.n	80079a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007980:	f7fc f964 	bl	8003c4c <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d803      	bhi.n	8007998 <HAL_SPI_Transmit+0x204>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d102      	bne.n	800799e <HAL_SPI_Transmit+0x20a>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079a2:	e026      	b.n	80079f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1cd      	bne.n	800794a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fcf8 	bl	80083a8 <SPI_EndRxTxTransaction>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2220      	movs	r2, #32
 80079c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e000      	b.n	80079f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80079f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a28:	d112      	bne.n	8007a50 <HAL_SPI_Receive+0x44>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10e      	bne.n	8007a50 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2204      	movs	r2, #4
 8007a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4613      	mov	r3, r2
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f8f1 	bl	8007c2e <HAL_SPI_TransmitReceive>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	e0ea      	b.n	8007c26 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_SPI_Receive+0x52>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0e3      	b.n	8007c26 <HAL_SPI_Receive+0x21a>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a66:	f7fc f8f1 	bl	8003c4c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d002      	beq.n	8007a7e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a7c:	e0ca      	b.n	8007c14 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_SPI_Receive+0x7e>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a8e:	e0c1      	b.n	8007c14 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad6:	d10f      	bne.n	8007af8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007af6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d007      	beq.n	8007b16 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d162      	bne.n	8007be4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b1e:	e02e      	b.n	8007b7e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d115      	bne.n	8007b5a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f103 020c 	add.w	r2, r3, #12
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b58:	e011      	b.n	8007b7e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b5a:	f7fc f877 	bl	8003c4c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d803      	bhi.n	8007b72 <HAL_SPI_Receive+0x166>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d102      	bne.n	8007b78 <HAL_SPI_Receive+0x16c>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b7c:	e04a      	b.n	8007c14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1cb      	bne.n	8007b20 <HAL_SPI_Receive+0x114>
 8007b88:	e031      	b.n	8007bee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d113      	bne.n	8007bc0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	1c9a      	adds	r2, r3, #2
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bbe:	e011      	b.n	8007be4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bc0:	f7fc f844 	bl	8003c4c <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d803      	bhi.n	8007bd8 <HAL_SPI_Receive+0x1cc>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d102      	bne.n	8007bde <HAL_SPI_Receive+0x1d2>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007be2:	e017      	b.n	8007c14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1cd      	bne.n	8007b8a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fb72 	bl	80082dc <SPI_EndRxTransaction>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]
 8007c10:	e000      	b.n	8007c14 <HAL_SPI_Receive+0x208>
  }

error :
 8007c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b08c      	sub	sp, #48	; 0x30
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x26>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e18a      	b.n	8007f6a <HAL_SPI_TransmitReceive+0x33c>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c5c:	f7fb fff6 	bl	8003c4c <HAL_GetTick>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c72:	887b      	ldrh	r3, [r7, #2]
 8007c74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d00f      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x70>
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c84:	d107      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x68>
 8007c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d003      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
 8007c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c9c:	e15b      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_SPI_TransmitReceive+0x82>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <HAL_SPI_TransmitReceive+0x82>
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007cb6:	e14e      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d003      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	887a      	ldrh	r2, [r7, #2]
 8007cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	887a      	ldrh	r2, [r7, #2]
 8007ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	887a      	ldrh	r2, [r7, #2]
 8007cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d28:	d178      	bne.n	8007e1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x10a>
 8007d32:	8b7b      	ldrh	r3, [r7, #26]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d166      	bne.n	8007e06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d5c:	e053      	b.n	8007e06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d11b      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x176>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x176>
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d113      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d119      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x1b8>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d014      	beq.n	8007de6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007de2:	2301      	movs	r3, #1
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007de6:	f7fb ff31 	bl	8003c4c <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d807      	bhi.n	8007e06 <HAL_SPI_TransmitReceive+0x1d8>
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d003      	beq.n	8007e06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e04:	e0a7      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1a6      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x130>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1a1      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x130>
 8007e1a:	e07c      	b.n	8007f16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_SPI_TransmitReceive+0x1fc>
 8007e24:	8b7b      	ldrh	r3, [r7, #26]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d16b      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	7812      	ldrb	r2, [r2, #0]
 8007e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e50:	e057      	b.n	8007f02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d11c      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x26c>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d017      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x26c>
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d114      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d119      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x2ae>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d014      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007edc:	f7fb feb6 	bl	8003c4c <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d803      	bhi.n	8007ef4 <HAL_SPI_TransmitReceive+0x2c6>
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d102      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x2cc>
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d103      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f00:	e029      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1a2      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x224>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d19d      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fa44 	bl	80083a8 <SPI_EndRxTxTransaction>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f32:	e010      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	e000      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3730      	adds	r7, #48	; 0x30
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	099b      	lsrs	r3, r3, #6
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	099b      	lsrs	r3, r3, #6
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
    return;
 8007fb6:	e0d7      	b.n	8008168 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <HAL_SPI_IRQHandler+0x66>
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	09db      	lsrs	r3, r3, #7
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
    return;
 8007fd8:	e0c6      	b.n	8008168 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10c      	bne.n	8008000 <HAL_SPI_IRQHandler+0x8c>
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	099b      	lsrs	r3, r3, #6
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80b4 	beq.w	8008168 <HAL_SPI_IRQHandler+0x1f4>
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80ad 	beq.w	8008168 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d023      	beq.n	8008062 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d011      	beq.n	800804a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f043 0204 	orr.w	r2, r3, #4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	e00b      	b.n	8008062 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	693b      	ldr	r3, [r7, #16]
        return;
 8008060:	e082      	b.n	8008168 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d014      	beq.n	8008098 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	f043 0208 	orr.w	r2, r3, #8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	60bb      	str	r3, [r7, #8]
 80080bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d04f      	beq.n	8008166 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_SPI_IRQHandler+0x17e>
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d034      	beq.n	800815c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0203 	bic.w	r2, r2, #3
 8008100:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d011      	beq.n	800812e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810e:	4a18      	ldr	r2, [pc, #96]	; (8008170 <HAL_SPI_IRQHandler+0x1fc>)
 8008110:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008116:	4618      	mov	r0, r3
 8008118:	f7fb ffe8 	bl	80040ec <HAL_DMA_Abort_IT>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813a:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <HAL_SPI_IRQHandler+0x1fc>)
 800813c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	4618      	mov	r0, r3
 8008144:	f7fb ffd2 	bl	80040ec <HAL_DMA_Abort_IT>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800815a:	e003      	b.n	8008164 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f809 	bl	8008174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008162:	e000      	b.n	8008166 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008164:	bf00      	nop
    return;
 8008166:	bf00      	nop
  }
}
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	080081a5 	.word	0x080081a5

08008174 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008196:	b2db      	uxtb	r3, r3
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff ffd8 	bl	8008174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b088      	sub	sp, #32
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081dc:	f7fb fd36 	bl	8003c4c <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4413      	add	r3, r2
 80081ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081ec:	f7fb fd2e 	bl	8003c4c <HAL_GetTick>
 80081f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081f2:	4b39      	ldr	r3, [pc, #228]	; (80082d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	015b      	lsls	r3, r3, #5
 80081f8:	0d1b      	lsrs	r3, r3, #20
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008202:	e054      	b.n	80082ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d050      	beq.n	80082ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800820c:	f7fb fd1e 	bl	8003c4c <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	429a      	cmp	r2, r3
 800821a:	d902      	bls.n	8008222 <SPI_WaitFlagStateUntilTimeout+0x56>
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d13d      	bne.n	800829e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008230:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800823a:	d111      	bne.n	8008260 <SPI_WaitFlagStateUntilTimeout+0x94>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008244:	d004      	beq.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824e:	d107      	bne.n	8008260 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800825e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008268:	d10f      	bne.n	800828a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008288:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e017      	b.n	80082ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4013      	ands	r3, r2
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	bf0c      	ite	eq
 80082be:	2301      	moveq	r3, #1
 80082c0:	2300      	movne	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d19b      	bne.n	8008204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3720      	adds	r7, #32
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000000 	.word	0x20000000

080082dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f0:	d111      	bne.n	8008316 <SPI_EndRxTransaction+0x3a>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fa:	d004      	beq.n	8008306 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	d107      	bne.n	8008316 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800831e:	d12a      	bne.n	8008376 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008328:	d012      	beq.n	8008350 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	2180      	movs	r1, #128	; 0x80
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff ff49 	bl	80081cc <SPI_WaitFlagStateUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d02d      	beq.n	800839c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008344:	f043 0220 	orr.w	r2, r3, #32
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e026      	b.n	800839e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	2101      	movs	r1, #1
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff ff36 	bl	80081cc <SPI_WaitFlagStateUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01a      	beq.n	800839c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	f043 0220 	orr.w	r2, r3, #32
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e013      	b.n	800839e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	2101      	movs	r1, #1
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff ff23 	bl	80081cc <SPI_WaitFlagStateUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008390:	f043 0220 	orr.w	r2, r3, #32
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e000      	b.n	800839e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083b4:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <SPI_EndRxTxTransaction+0x7c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <SPI_EndRxTxTransaction+0x80>)
 80083ba:	fba2 2303 	umull	r2, r3, r2, r3
 80083be:	0d5b      	lsrs	r3, r3, #21
 80083c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083c4:	fb02 f303 	mul.w	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083d2:	d112      	bne.n	80083fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fef4 	bl	80081cc <SPI_WaitFlagStateUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d016      	beq.n	8008418 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ee:	f043 0220 	orr.w	r2, r3, #32
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e00f      	b.n	800841a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3b01      	subs	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d0f2      	beq.n	80083fa <SPI_EndRxTxTransaction+0x52>
 8008414:	e000      	b.n	8008418 <SPI_EndRxTxTransaction+0x70>
        break;
 8008416:	bf00      	nop
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000000 	.word	0x20000000
 8008428:	165e9f81 	.word	0x165e9f81

0800842c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e041      	b.n	80084c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f839 	bl	80084ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f000 f9d8 	bl	8008820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d001      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e04e      	b.n	8008596 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d022      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008522:	d01d      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1f      	ldr	r2, [pc, #124]	; (80085a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d018      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <HAL_TIM_Base_Start_IT+0xcc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1c      	ldr	r2, [pc, #112]	; (80085b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00e      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <HAL_TIM_Base_Start_IT+0x80>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a18      	ldr	r2, [pc, #96]	; (80085bc <HAL_TIM_Base_Start_IT+0xdc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d111      	bne.n	8008584 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b06      	cmp	r3, #6
 8008570:	d010      	beq.n	8008594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 0201 	orr.w	r2, r2, #1
 8008580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008582:	e007      	b.n	8008594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40000400 	.word	0x40000400
 80085ac:	40000800 	.word	0x40000800
 80085b0:	40000c00 	.word	0x40000c00
 80085b4:	40010400 	.word	0x40010400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40001800 	.word	0x40001800

080085c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d122      	bne.n	800861c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d11b      	bne.n	800861c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0202 	mvn.w	r2, #2
 80085ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8ee 	bl	80087e4 <HAL_TIM_IC_CaptureCallback>
 8008608:	e005      	b.n	8008616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8e0 	bl	80087d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f8f1 	bl	80087f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b04      	cmp	r3, #4
 8008628:	d122      	bne.n	8008670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b04      	cmp	r3, #4
 8008636:	d11b      	bne.n	8008670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0204 	mvn.w	r2, #4
 8008640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8c4 	bl	80087e4 <HAL_TIM_IC_CaptureCallback>
 800865c:	e005      	b.n	800866a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f8b6 	bl	80087d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8c7 	bl	80087f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b08      	cmp	r3, #8
 800867c:	d122      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b08      	cmp	r3, #8
 800868a:	d11b      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0208 	mvn.w	r2, #8
 8008694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2204      	movs	r2, #4
 800869a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f89a 	bl	80087e4 <HAL_TIM_IC_CaptureCallback>
 80086b0:	e005      	b.n	80086be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f88c 	bl	80087d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f89d 	bl	80087f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d122      	bne.n	8008718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d11b      	bne.n	8008718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0210 	mvn.w	r2, #16
 80086e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2208      	movs	r2, #8
 80086ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f870 	bl	80087e4 <HAL_TIM_IC_CaptureCallback>
 8008704:	e005      	b.n	8008712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f862 	bl	80087d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f873 	bl	80087f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	d10e      	bne.n	8008744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b01      	cmp	r3, #1
 8008732:	d107      	bne.n	8008744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0201 	mvn.w	r2, #1
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7f9 f90a 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874e:	2b80      	cmp	r3, #128	; 0x80
 8008750:	d10e      	bne.n	8008770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875c:	2b80      	cmp	r3, #128	; 0x80
 800875e:	d107      	bne.n	8008770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f902 	bl	8008974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b40      	cmp	r3, #64	; 0x40
 800877c:	d10e      	bne.n	800879c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008788:	2b40      	cmp	r3, #64	; 0x40
 800878a:	d107      	bne.n	800879c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f838 	bl	800880c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b20      	cmp	r3, #32
 80087a8:	d10e      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d107      	bne.n	80087c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0220 	mvn.w	r2, #32
 80087c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8cc 	bl	8008960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a40      	ldr	r2, [pc, #256]	; (8008934 <TIM_Base_SetConfig+0x114>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d013      	beq.n	8008860 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d00f      	beq.n	8008860 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a3d      	ldr	r2, [pc, #244]	; (8008938 <TIM_Base_SetConfig+0x118>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00b      	beq.n	8008860 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a3c      	ldr	r2, [pc, #240]	; (800893c <TIM_Base_SetConfig+0x11c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_Base_SetConfig+0x40>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a3b      	ldr	r2, [pc, #236]	; (8008940 <TIM_Base_SetConfig+0x120>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_Base_SetConfig+0x40>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a3a      	ldr	r2, [pc, #232]	; (8008944 <TIM_Base_SetConfig+0x124>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d108      	bne.n	8008872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2f      	ldr	r2, [pc, #188]	; (8008934 <TIM_Base_SetConfig+0x114>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d02b      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d027      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2c      	ldr	r2, [pc, #176]	; (8008938 <TIM_Base_SetConfig+0x118>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d023      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2b      	ldr	r2, [pc, #172]	; (800893c <TIM_Base_SetConfig+0x11c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01f      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2a      	ldr	r2, [pc, #168]	; (8008940 <TIM_Base_SetConfig+0x120>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d01b      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a29      	ldr	r2, [pc, #164]	; (8008944 <TIM_Base_SetConfig+0x124>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d017      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a28      	ldr	r2, [pc, #160]	; (8008948 <TIM_Base_SetConfig+0x128>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d013      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a27      	ldr	r2, [pc, #156]	; (800894c <TIM_Base_SetConfig+0x12c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00f      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a26      	ldr	r2, [pc, #152]	; (8008950 <TIM_Base_SetConfig+0x130>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a25      	ldr	r2, [pc, #148]	; (8008954 <TIM_Base_SetConfig+0x134>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d007      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a24      	ldr	r2, [pc, #144]	; (8008958 <TIM_Base_SetConfig+0x138>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a23      	ldr	r2, [pc, #140]	; (800895c <TIM_Base_SetConfig+0x13c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d108      	bne.n	80088e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a0a      	ldr	r2, [pc, #40]	; (8008934 <TIM_Base_SetConfig+0x114>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_Base_SetConfig+0xf8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a0c      	ldr	r2, [pc, #48]	; (8008944 <TIM_Base_SetConfig+0x124>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d103      	bne.n	8008920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	615a      	str	r2, [r3, #20]
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40000400 	.word	0x40000400
 800893c:	40000800 	.word	0x40000800
 8008940:	40000c00 	.word	0x40000c00
 8008944:	40010400 	.word	0x40010400
 8008948:	40014000 	.word	0x40014000
 800894c:	40014400 	.word	0x40014400
 8008950:	40014800 	.word	0x40014800
 8008954:	40001800 	.word	0x40001800
 8008958:	40001c00 	.word	0x40001c00
 800895c:	40002000 	.word	0x40002000

08008960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d123      	bne.n	80089e2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80089a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	6851      	ldr	r1, [r2, #4]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	6892      	ldr	r2, [r2, #8]
 80089ae:	4311      	orrs	r1, r2
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	68d2      	ldr	r2, [r2, #12]
 80089b4:	4311      	orrs	r1, r2
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	6912      	ldr	r2, [r2, #16]
 80089ba:	4311      	orrs	r1, r2
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	6952      	ldr	r2, [r2, #20]
 80089c0:	4311      	orrs	r1, r2
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	6992      	ldr	r2, [r2, #24]
 80089c6:	4311      	orrs	r1, r2
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	69d2      	ldr	r2, [r2, #28]
 80089cc:	4311      	orrs	r1, r2
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	6a12      	ldr	r2, [r2, #32]
 80089d2:	4311      	orrs	r1, r2
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089d8:	430a      	orrs	r2, r1
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e028      	b.n	8008a34 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	69d9      	ldr	r1, [r3, #28]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	4319      	orrs	r1, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	430b      	orrs	r3, r1
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	6851      	ldr	r1, [r2, #4]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	6892      	ldr	r2, [r2, #8]
 8008a14:	4311      	orrs	r1, r2
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	68d2      	ldr	r2, [r2, #12]
 8008a1a:	4311      	orrs	r1, r2
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	6912      	ldr	r2, [r2, #16]
 8008a20:	4311      	orrs	r1, r2
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	6952      	ldr	r2, [r2, #20]
 8008a26:	4311      	orrs	r1, r2
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	6992      	ldr	r2, [r2, #24]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d128      	bne.n	8008aa6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	1e59      	subs	r1, r3, #1
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	4319      	orrs	r1, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	4319      	orrs	r1, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	4319      	orrs	r1, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	4319      	orrs	r1, r3
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	051b      	lsls	r3, r3, #20
 8008a92:	4319      	orrs	r1, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	061b      	lsls	r3, r3, #24
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
 8008aa4:	e02f      	b.n	8008b06 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	68d2      	ldr	r2, [r2, #12]
 8008ab6:	3a01      	subs	r2, #1
 8008ab8:	0311      	lsls	r1, r2, #12
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	6952      	ldr	r2, [r2, #20]
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	0512      	lsls	r2, r2, #20
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1e59      	subs	r1, r3, #1
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	4319      	orrs	r1, r3
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	4319      	orrs	r1, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	4319      	orrs	r1, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	430b      	orrs	r3, r1
 8008b00:	431a      	orrs	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	0d9b      	lsrs	r3, r3, #22
 8008b2a:	059b      	lsls	r3, r3, #22
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	6811      	ldr	r1, [r2, #0]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	6852      	ldr	r2, [r2, #4]
 8008b34:	4311      	orrs	r1, r2
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	6892      	ldr	r2, [r2, #8]
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	0152      	lsls	r2, r2, #5
 8008b3e:	4311      	orrs	r1, r2
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	68d2      	ldr	r2, [r2, #12]
 8008b44:	0252      	lsls	r2, r2, #9
 8008b46:	430a      	orrs	r2, r1
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008b4e:	f7fb f87d 	bl	8003c4c <HAL_GetTick>
 8008b52:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b54:	e010      	b.n	8008b78 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5c:	d00c      	beq.n	8008b78 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <FMC_SDRAM_SendCommand+0x60>
 8008b64:	f7fb f872 	bl	8003c4c <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d201      	bcs.n	8008b78 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e006      	b.n	8008b86 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d0e8      	beq.n	8008b56 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ba0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	0052      	lsls	r2, r2, #1
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	f107 001c 	add.w	r0, r7, #28
 8008bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d122      	bne.n	8008c1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d105      	bne.n	8008c0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 fbee 	bl	800a3f0 <USB_CoreReset>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
 8008c18:	e01a      	b.n	8008c50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fbe2 	bl	800a3f0 <USB_CoreReset>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
 8008c42:	e005      	b.n	8008c50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d10b      	bne.n	8008c6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f043 0206 	orr.w	r2, r3, #6
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f043 0220 	orr.w	r2, r3, #32
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c7a:	b004      	add	sp, #16
 8008c7c:	4770      	bx	lr
	...

08008c80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d165      	bne.n	8008d60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a41      	ldr	r2, [pc, #260]	; (8008d9c <USB_SetTurnaroundTime+0x11c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d906      	bls.n	8008caa <USB_SetTurnaroundTime+0x2a>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4a40      	ldr	r2, [pc, #256]	; (8008da0 <USB_SetTurnaroundTime+0x120>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d202      	bcs.n	8008caa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ca4:	230f      	movs	r3, #15
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e062      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a3c      	ldr	r2, [pc, #240]	; (8008da0 <USB_SetTurnaroundTime+0x120>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d306      	bcc.n	8008cc0 <USB_SetTurnaroundTime+0x40>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	4a3b      	ldr	r2, [pc, #236]	; (8008da4 <USB_SetTurnaroundTime+0x124>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d202      	bcs.n	8008cc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008cba:	230e      	movs	r3, #14
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	e057      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a38      	ldr	r2, [pc, #224]	; (8008da4 <USB_SetTurnaroundTime+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d306      	bcc.n	8008cd6 <USB_SetTurnaroundTime+0x56>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a37      	ldr	r2, [pc, #220]	; (8008da8 <USB_SetTurnaroundTime+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d202      	bcs.n	8008cd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008cd0:	230d      	movs	r3, #13
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e04c      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4a33      	ldr	r2, [pc, #204]	; (8008da8 <USB_SetTurnaroundTime+0x128>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d306      	bcc.n	8008cec <USB_SetTurnaroundTime+0x6c>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4a32      	ldr	r2, [pc, #200]	; (8008dac <USB_SetTurnaroundTime+0x12c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d802      	bhi.n	8008cec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e041      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4a2f      	ldr	r2, [pc, #188]	; (8008dac <USB_SetTurnaroundTime+0x12c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d906      	bls.n	8008d02 <USB_SetTurnaroundTime+0x82>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4a2e      	ldr	r2, [pc, #184]	; (8008db0 <USB_SetTurnaroundTime+0x130>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d802      	bhi.n	8008d02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cfc:	230b      	movs	r3, #11
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e036      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4a2a      	ldr	r2, [pc, #168]	; (8008db0 <USB_SetTurnaroundTime+0x130>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d906      	bls.n	8008d18 <USB_SetTurnaroundTime+0x98>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4a29      	ldr	r2, [pc, #164]	; (8008db4 <USB_SetTurnaroundTime+0x134>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d802      	bhi.n	8008d18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d12:	230a      	movs	r3, #10
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e02b      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4a26      	ldr	r2, [pc, #152]	; (8008db4 <USB_SetTurnaroundTime+0x134>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d906      	bls.n	8008d2e <USB_SetTurnaroundTime+0xae>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4a25      	ldr	r2, [pc, #148]	; (8008db8 <USB_SetTurnaroundTime+0x138>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d202      	bcs.n	8008d2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d28:	2309      	movs	r3, #9
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e020      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4a21      	ldr	r2, [pc, #132]	; (8008db8 <USB_SetTurnaroundTime+0x138>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d306      	bcc.n	8008d44 <USB_SetTurnaroundTime+0xc4>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	4a20      	ldr	r2, [pc, #128]	; (8008dbc <USB_SetTurnaroundTime+0x13c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d802      	bhi.n	8008d44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	e015      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4a1d      	ldr	r2, [pc, #116]	; (8008dbc <USB_SetTurnaroundTime+0x13c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d906      	bls.n	8008d5a <USB_SetTurnaroundTime+0xda>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4a1c      	ldr	r2, [pc, #112]	; (8008dc0 <USB_SetTurnaroundTime+0x140>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d202      	bcs.n	8008d5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d54:	2307      	movs	r3, #7
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e00a      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d5a:	2306      	movs	r3, #6
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	e007      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d66:	2309      	movs	r3, #9
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	e001      	b.n	8008d70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d6c:	2309      	movs	r3, #9
 8008d6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	029b      	lsls	r3, r3, #10
 8008d84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	00d8acbf 	.word	0x00d8acbf
 8008da0:	00e4e1c0 	.word	0x00e4e1c0
 8008da4:	00f42400 	.word	0x00f42400
 8008da8:	01067380 	.word	0x01067380
 8008dac:	011a499f 	.word	0x011a499f
 8008db0:	01312cff 	.word	0x01312cff
 8008db4:	014ca43f 	.word	0x014ca43f
 8008db8:	016e3600 	.word	0x016e3600
 8008dbc:	01a6ab1f 	.word	0x01a6ab1f
 8008dc0:	01e84800 	.word	0x01e84800

08008dc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f043 0201 	orr.w	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f023 0201 	bic.w	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d115      	bne.n	8008e56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e36:	2001      	movs	r0, #1
 8008e38:	f7fa ff14 	bl	8003c64 <HAL_Delay>
      ms++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 fa45 	bl	800a2d2 <USB_GetMode>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d01e      	beq.n	8008e8c <USB_SetCurrentMode+0x84>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b31      	cmp	r3, #49	; 0x31
 8008e52:	d9f0      	bls.n	8008e36 <USB_SetCurrentMode+0x2e>
 8008e54:	e01a      	b.n	8008e8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d115      	bne.n	8008e88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7fa fefb 	bl	8003c64 <HAL_Delay>
      ms++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 fa2c 	bl	800a2d2 <USB_GetMode>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <USB_SetCurrentMode+0x84>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b31      	cmp	r3, #49	; 0x31
 8008e84:	d9f0      	bls.n	8008e68 <USB_SetCurrentMode+0x60>
 8008e86:	e001      	b.n	8008e8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e005      	b.n	8008e98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b32      	cmp	r3, #50	; 0x32
 8008e90:	d101      	bne.n	8008e96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	e009      	b.n	8008ed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	3340      	adds	r3, #64	; 0x40
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	613b      	str	r3, [r7, #16]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b0e      	cmp	r3, #14
 8008ed8:	d9f2      	bls.n	8008ec0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d11c      	bne.n	8008f1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eee:	f043 0302 	orr.w	r3, r3, #2
 8008ef2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
 8008f18:	e00b      	b.n	8008f32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f38:	461a      	mov	r2, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f44:	4619      	mov	r1, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	680b      	ldr	r3, [r1, #0]
 8008f50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d10c      	bne.n	8008f72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f5e:	2100      	movs	r1, #0
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f965 	bl	8009230 <USB_SetDevSpeed>
 8008f66:	e008      	b.n	8008f7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f68:	2101      	movs	r1, #1
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f960 	bl	8009230 <USB_SetDevSpeed>
 8008f70:	e003      	b.n	8008f7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f72:	2103      	movs	r1, #3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f95b 	bl	8009230 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f7a:	2110      	movs	r1, #16
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f8f3 	bl	8009168 <USB_FlushTxFifo>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f91f 	bl	80091d0 <USB_FlushRxFifo>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	461a      	mov	r2, r3
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	461a      	mov	r2, r3
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e043      	b.n	800904e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fdc:	d118      	bne.n	8009010 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e013      	b.n	8009022 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009006:	461a      	mov	r2, r3
 8009008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	e008      	b.n	8009022 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901c:	461a      	mov	r2, r3
 800901e:	2300      	movs	r3, #0
 8009020:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	461a      	mov	r2, r3
 8009030:	2300      	movs	r3, #0
 8009032:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009040:	461a      	mov	r2, r3
 8009042:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009046:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	3301      	adds	r3, #1
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d3b7      	bcc.n	8008fc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009056:	2300      	movs	r3, #0
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	e043      	b.n	80090e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009072:	d118      	bne.n	80090a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009086:	461a      	mov	r2, r3
 8009088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e013      	b.n	80090b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909c:	461a      	mov	r2, r3
 800909e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	e008      	b.n	80090b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b2:	461a      	mov	r2, r3
 80090b4:	2300      	movs	r3, #0
 80090b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	461a      	mov	r2, r3
 80090c6:	2300      	movs	r3, #0
 80090c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	461a      	mov	r2, r3
 80090d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d3b7      	bcc.n	800905c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800910c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	f043 0210 	orr.w	r2, r3, #16
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <USB_DevInit+0x2c4>)
 8009126:	4313      	orrs	r3, r2
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800912c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f043 0208 	orr.w	r2, r3, #8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800913e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d107      	bne.n	8009154 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009154:	7dfb      	ldrb	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009160:	b004      	add	sp, #16
 8009162:	4770      	bx	lr
 8009164:	803c3800 	.word	0x803c3800

08009168 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a13      	ldr	r2, [pc, #76]	; (80091cc <USB_FlushTxFifo+0x64>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e01b      	b.n	80091c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	daf2      	bge.n	8009176 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	019b      	lsls	r3, r3, #6
 8009198:	f043 0220 	orr.w	r2, r3, #32
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4a08      	ldr	r2, [pc, #32]	; (80091cc <USB_FlushTxFifo+0x64>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d901      	bls.n	80091b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e006      	b.n	80091c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d0f0      	beq.n	80091a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	00030d40 	.word	0x00030d40

080091d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4a11      	ldr	r2, [pc, #68]	; (800922c <USB_FlushRxFifo+0x5c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d901      	bls.n	80091ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e018      	b.n	8009220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	daf2      	bge.n	80091dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2210      	movs	r2, #16
 80091fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4a08      	ldr	r2, [pc, #32]	; (800922c <USB_FlushRxFifo+0x5c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d901      	bls.n	8009212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e006      	b.n	8009220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0310 	and.w	r3, r3, #16
 800921a:	2b10      	cmp	r3, #16
 800921c:	d0f0      	beq.n	8009200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	00030d40 	.word	0x00030d40

08009230 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009250:	4313      	orrs	r3, r2
 8009252:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
 8009286:	e00a      	b.n	800929e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d002      	beq.n	8009294 <USB_GetDevSpeed+0x32>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b06      	cmp	r3, #6
 8009292:	d102      	bne.n	800929a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
 8009298:	e001      	b.n	800929e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800929a:	230f      	movs	r3, #15
 800929c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d13a      	bne.n	800933e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f303 	lsl.w	r3, r1, r3
 80092de:	b29b      	uxth	r3, r3
 80092e0:	68f9      	ldr	r1, [r7, #12]
 80092e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e6:	4313      	orrs	r3, r2
 80092e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d155      	bne.n	80093ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	791b      	ldrb	r3, [r3, #4]
 800931a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800931c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009324:	4313      	orrs	r3, r2
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	440a      	add	r2, r1
 800932e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e036      	b.n	80093ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	2101      	movs	r1, #1
 8009350:	fa01 f303 	lsl.w	r3, r1, r3
 8009354:	041b      	lsls	r3, r3, #16
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800935c:	4313      	orrs	r3, r2
 800935e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d11a      	bne.n	80093ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	791b      	ldrb	r3, [r3, #4]
 8009390:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009392:	430b      	orrs	r3, r1
 8009394:	4313      	orrs	r3, r2
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d161      	bne.n	800949c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ee:	d11f      	bne.n	8009430 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800940e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800942e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	2101      	movs	r1, #1
 8009442:	fa01 f303 	lsl.w	r3, r1, r3
 8009446:	b29b      	uxth	r3, r3
 8009448:	43db      	mvns	r3, r3
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009450:	4013      	ands	r3, r2
 8009452:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	2101      	movs	r1, #1
 8009466:	fa01 f303 	lsl.w	r3, r1, r3
 800946a:	b29b      	uxth	r3, r3
 800946c:	43db      	mvns	r3, r3
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009474:	4013      	ands	r3, r2
 8009476:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	0159      	lsls	r1, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	440b      	add	r3, r1
 800948e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009492:	4619      	mov	r1, r3
 8009494:	4b35      	ldr	r3, [pc, #212]	; (800956c <USB_DeactivateEndpoint+0x1b0>)
 8009496:	4013      	ands	r3, r2
 8009498:	600b      	str	r3, [r1, #0]
 800949a:	e060      	b.n	800955e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b2:	d11f      	bne.n	80094f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	0151      	lsls	r1, r2, #5
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	440a      	add	r2, r1
 80094ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	2101      	movs	r1, #1
 8009506:	fa01 f303 	lsl.w	r3, r1, r3
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	43db      	mvns	r3, r3
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009514:	4013      	ands	r3, r2
 8009516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	2101      	movs	r1, #1
 800952a:	fa01 f303 	lsl.w	r3, r1, r3
 800952e:	041b      	lsls	r3, r3, #16
 8009530:	43db      	mvns	r3, r3
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009538:	4013      	ands	r3, r2
 800953a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	0159      	lsls	r1, r3, #5
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	440b      	add	r3, r1
 8009552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009556:	4619      	mov	r1, r3
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <USB_DeactivateEndpoint+0x1b4>)
 800955a:	4013      	ands	r3, r2
 800955c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	ec337800 	.word	0xec337800
 8009570:	eff37800 	.word	0xeff37800

08009574 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af02      	add	r7, sp, #8
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	785b      	ldrb	r3, [r3, #1]
 8009590:	2b01      	cmp	r3, #1
 8009592:	f040 815c 	bne.w	800984e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d132      	bne.n	8009604 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	69fa      	ldr	r2, [r7, #28]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fc:	0cdb      	lsrs	r3, r3, #19
 80095fe:	04db      	lsls	r3, r3, #19
 8009600:	6113      	str	r3, [r2, #16]
 8009602:	e074      	b.n	80096ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961e:	0cdb      	lsrs	r3, r3, #19
 8009620:	04db      	lsls	r3, r3, #19
 8009622:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	440a      	add	r2, r1
 800963a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800963e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009642:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6999      	ldr	r1, [r3, #24]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	440b      	add	r3, r1
 8009660:	1e59      	subs	r1, r3, #1
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	fbb1 f3f3 	udiv	r3, r1, r3
 800966a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800966c:	4b9d      	ldr	r3, [pc, #628]	; (80098e4 <USB_EPStartXfer+0x370>)
 800966e:	400b      	ands	r3, r1
 8009670:	69b9      	ldr	r1, [r7, #24]
 8009672:	0148      	lsls	r0, r1, #5
 8009674:	69f9      	ldr	r1, [r7, #28]
 8009676:	4401      	add	r1, r0
 8009678:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800967c:	4313      	orrs	r3, r2
 800967e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	0148      	lsls	r0, r1, #5
 800969a:	69f9      	ldr	r1, [r7, #28]
 800969c:	4401      	add	r1, r0
 800969e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096a2:	4313      	orrs	r3, r2
 80096a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	791b      	ldrb	r3, [r3, #4]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d11f      	bne.n	80096ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	0151      	lsls	r1, r2, #5
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	440a      	add	r2, r1
 80096c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80096cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d14b      	bne.n	800978c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	461a      	mov	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	791b      	ldrb	r3, [r3, #4]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d128      	bne.n	800976a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d110      	bne.n	800974a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e00f      	b.n	800976a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	440a      	add	r2, r1
 8009760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009768:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e133      	b.n	80099f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	791b      	ldrb	r3, [r3, #4]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d015      	beq.n	80097e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 811b 	beq.w	80099f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	2101      	movs	r1, #1
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097da:	4313      	orrs	r3, r2
 80097dc:	634b      	str	r3, [r1, #52]	; 0x34
 80097de:	e109      	b.n	80099f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d110      	bne.n	8009812 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	e00f      	b.n	8009832 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009830:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6919      	ldr	r1, [r3, #16]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	b298      	uxth	r0, r3
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fade 	bl	8009e08 <USB_WritePacket>
 800984c:	e0d2      	b.n	80099f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009868:	0cdb      	lsrs	r3, r3, #19
 800986a:	04db      	lsls	r3, r3, #19
 800986c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800988c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009890:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d126      	bne.n	80098e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098b0:	69b9      	ldr	r1, [r7, #24]
 80098b2:	0148      	lsls	r0, r1, #5
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	4401      	add	r1, r0
 80098b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098bc:	4313      	orrs	r3, r2
 80098be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	0151      	lsls	r1, r2, #5
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	440a      	add	r2, r1
 80098d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098de:	6113      	str	r3, [r2, #16]
 80098e0:	e03a      	b.n	8009958 <USB_EPStartXfer+0x3e4>
 80098e2:	bf00      	nop
 80098e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	1e5a      	subs	r2, r3, #1
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	8afa      	ldrh	r2, [r7, #22]
 8009904:	fb03 f202 	mul.w	r2, r3, r2
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	8afb      	ldrh	r3, [r7, #22]
 800991c:	04d9      	lsls	r1, r3, #19
 800991e:	4b38      	ldr	r3, [pc, #224]	; (8009a00 <USB_EPStartXfer+0x48c>)
 8009920:	400b      	ands	r3, r1
 8009922:	69b9      	ldr	r1, [r7, #24]
 8009924:	0148      	lsls	r0, r1, #5
 8009926:	69f9      	ldr	r1, [r7, #28]
 8009928:	4401      	add	r1, r0
 800992a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800992e:	4313      	orrs	r3, r2
 8009930:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	691a      	ldr	r2, [r3, #16]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009948:	69b9      	ldr	r1, [r7, #24]
 800994a:	0148      	lsls	r0, r1, #5
 800994c:	69f9      	ldr	r1, [r7, #28]
 800994e:	4401      	add	r1, r0
 8009950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009954:	4313      	orrs	r3, r2
 8009956:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d10d      	bne.n	800997a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d009      	beq.n	800997a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6919      	ldr	r1, [r3, #16]
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	460a      	mov	r2, r1
 8009978:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	791b      	ldrb	r3, [r3, #4]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d128      	bne.n	80099d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998e:	2b00      	cmp	r3, #0
 8009990:	d110      	bne.n	80099b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	e00f      	b.n	80099d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	1ff80000 	.word	0x1ff80000

08009a04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	f040 80ce 	bne.w	8009bc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d132      	bne.n	8009a94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8c:	0cdb      	lsrs	r3, r3, #19
 8009a8e:	04db      	lsls	r3, r3, #19
 8009a90:	6113      	str	r3, [r2, #16]
 8009a92:	e04e      	b.n	8009b32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aae:	0cdb      	lsrs	r3, r3, #19
 8009ab0:	04db      	lsls	r3, r3, #19
 8009ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	0151      	lsls	r1, r2, #5
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	440a      	add	r2, r1
 8009aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ace:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ad2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ad6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d903      	bls.n	8009aec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b22:	6939      	ldr	r1, [r7, #16]
 8009b24:	0148      	lsls	r0, r1, #5
 8009b26:	6979      	ldr	r1, [r7, #20]
 8009b28:	4401      	add	r1, r0
 8009b2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d11e      	bne.n	8009b76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b72:	6013      	str	r3, [r2, #0]
 8009b74:	e097      	b.n	8009ca6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	0151      	lsls	r1, r2, #5
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	440a      	add	r2, r1
 8009b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8083 	beq.w	8009ca6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bb6:	6979      	ldr	r1, [r7, #20]
 8009bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	634b      	str	r3, [r1, #52]	; 0x34
 8009bc0:	e071      	b.n	8009ca6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bdc:	0cdb      	lsrs	r3, r3, #19
 8009bde:	04db      	lsls	r3, r3, #19
 8009be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c54:	6939      	ldr	r1, [r7, #16]
 8009c56:	0148      	lsls	r0, r1, #5
 8009c58:	6979      	ldr	r1, [r7, #20]
 8009c5a:	4401      	add	r1, r0
 8009c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c60:	4313      	orrs	r3, r2
 8009c62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d10d      	bne.n	8009c86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d009      	beq.n	8009c86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6919      	ldr	r1, [r3, #16]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c82:	460a      	mov	r2, r1
 8009c84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ca4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	371c      	adds	r7, #28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	785b      	ldrb	r3, [r3, #1]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d14a      	bne.n	8009d68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cea:	f040 8086 	bne.w	8009dfa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	7812      	ldrb	r2, [r2, #0]
 8009d02:	0151      	lsls	r1, r2, #5
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	440a      	add	r2, r1
 8009d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	7812      	ldrb	r2, [r2, #0]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d902      	bls.n	8009d4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	75fb      	strb	r3, [r7, #23]
          break;
 8009d4a:	e056      	b.n	8009dfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d64:	d0e7      	beq.n	8009d36 <USB_EPStopXfer+0x82>
 8009d66:	e048      	b.n	8009dfa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d80:	d13b      	bne.n	8009dfa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	7812      	ldrb	r2, [r2, #0]
 8009d96:	0151      	lsls	r1, r2, #5
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	440a      	add	r2, r1
 8009d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009da4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d902      	bls.n	8009de0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8009dde:	e00c      	b.n	8009dfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009df8:	d0e7      	beq.n	8009dca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b089      	sub	sp, #36	; 0x24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4611      	mov	r1, r2
 8009e14:	461a      	mov	r2, r3
 8009e16:	460b      	mov	r3, r1
 8009e18:	71fb      	strb	r3, [r7, #7]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d123      	bne.n	8009e76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e2e:	88bb      	ldrh	r3, [r7, #4]
 8009e30:	3303      	adds	r3, #3
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	e018      	b.n	8009e6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	031a      	lsls	r2, r3, #12
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	461a      	mov	r2, r3
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	3301      	adds	r3, #1
 8009e54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d3e2      	bcc.n	8009e3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3724      	adds	r7, #36	; 0x24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b08b      	sub	sp, #44	; 0x2c
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	089b      	lsrs	r3, r3, #2
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	623b      	str	r3, [r7, #32]
 8009eae:	e014      	b.n	8009eda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	3301      	adds	r3, #1
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	623b      	str	r3, [r7, #32]
 8009eda:	6a3a      	ldr	r2, [r7, #32]
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d3e6      	bcc.n	8009eb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ee2:	8bfb      	ldrh	r3, [r7, #30]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01e      	beq.n	8009f26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f107 0310 	add.w	r3, r7, #16
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	fa22 f303 	lsr.w	r3, r2, r3
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	701a      	strb	r2, [r3, #0]
      i++;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	3301      	adds	r3, #1
 8009f12:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	3301      	adds	r3, #1
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f1a:	8bfb      	ldrh	r3, [r7, #30]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f20:	8bfb      	ldrh	r3, [r7, #30]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1ea      	bne.n	8009efc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	372c      	adds	r7, #44	; 0x2c
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	785b      	ldrb	r3, [r3, #1]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d12c      	bne.n	8009faa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	db12      	blt.n	8009f88 <USB_EPSetStall+0x54>
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00f      	beq.n	8009f88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	0151      	lsls	r1, r2, #5
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	440a      	add	r2, r1
 8009f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	e02b      	b.n	800a002 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	db12      	blt.n	8009fe2 <USB_EPSetStall+0xae>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00f      	beq.n	8009fe2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fe0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a000:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d128      	bne.n	800a07e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	0151      	lsls	r1, r2, #5
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	440a      	add	r2, r1
 800a042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a04a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	791b      	ldrb	r3, [r3, #4]
 800a050:	2b03      	cmp	r3, #3
 800a052:	d003      	beq.n	800a05c <USB_EPClearStall+0x4c>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	791b      	ldrb	r3, [r3, #4]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d138      	bne.n	800a0ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	e027      	b.n	800a0ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	0151      	lsls	r1, r2, #5
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	440a      	add	r2, r1
 800a094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a098:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a09c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	791b      	ldrb	r3, [r3, #4]
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d003      	beq.n	800a0ae <USB_EPClearStall+0x9e>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d10f      	bne.n	800a0ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a110:	68f9      	ldr	r1, [r7, #12]
 800a112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a116:	4313      	orrs	r3, r2
 800a118:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a156:	f023 0302 	bic.w	r3, r3, #2
 800a15a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b085      	sub	sp, #20
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a184:	f023 0303 	bic.w	r3, r3, #3
 800a188:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a198:	f043 0302 	orr.w	r3, r3, #2
 800a19c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	0c1b      	lsrs	r3, r3, #16
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4013      	ands	r3, r2
 800a228:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	b29b      	uxth	r3, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b085      	sub	sp, #20
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	4013      	ands	r3, r2
 800a266:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a268:	68bb      	ldr	r3, [r7, #8]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a276:	b480      	push	{r7}
 800a278:	b087      	sub	sp, #28
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	460b      	mov	r3, r1
 800a280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a298:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a6:	01db      	lsls	r3, r3, #7
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	f003 0301 	and.w	r3, r3, #1
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a308:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a324:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	460b      	mov	r3, r1
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	333c      	adds	r3, #60	; 0x3c
 800a34a:	3304      	adds	r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	4a26      	ldr	r2, [pc, #152]	; (800a3ec <USB_EP0_OutStart+0xb8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d90a      	bls.n	800a36e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a368:	d101      	bne.n	800a36e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e037      	b.n	800a3de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a374:	461a      	mov	r2, r3
 800a376:	2300      	movs	r3, #0
 800a378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f043 0318 	orr.w	r3, r3, #24
 800a3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d10f      	bne.n	800a3dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	4f54300a 	.word	0x4f54300a

0800a3f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <USB_CoreReset+0x64>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d901      	bls.n	800a40e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e01b      	b.n	800a446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	daf2      	bge.n	800a3fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f043 0201 	orr.w	r2, r3, #1
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3301      	adds	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4a09      	ldr	r2, [pc, #36]	; (800a454 <USB_CoreReset+0x64>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d901      	bls.n	800a438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e006      	b.n	800a446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b01      	cmp	r3, #1
 800a442:	d0f0      	beq.n	800a426 <USB_CoreReset+0x36>

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	00030d40 	.word	0x00030d40

0800a458 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a46a:	2b84      	cmp	r3, #132	; 0x84
 800a46c:	d005      	beq.n	800a47a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a46e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4413      	add	r3, r2
 800a476:	3303      	adds	r3, #3
 800a478:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a47a:	68fb      	ldr	r3, [r7, #12]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	607b      	str	r3, [r7, #4]
  return(result);
 800a494:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a496:	2b00      	cmp	r3, #0
 800a498:	bf14      	ite	ne
 800a49a:	2301      	movne	r3, #1
 800a49c:	2300      	moveq	r3, #0
 800a49e:	b2db      	uxtb	r3, r3
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a4b0:	f001 f9a4 	bl	800b7fc <vTaskStartScheduler>
  
  return osOK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4bc:	b089      	sub	sp, #36	; 0x24
 800a4be:	af04      	add	r7, sp, #16
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d020      	beq.n	800a50e <osThreadCreate+0x54>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01c      	beq.n	800a50e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685c      	ldr	r4, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681d      	ldr	r5, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	691e      	ldr	r6, [r3, #16]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff ffb6 	bl	800a458 <makeFreeRtosPriority>
 800a4ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4f6:	9202      	str	r2, [sp, #8]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	9100      	str	r1, [sp, #0]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	4632      	mov	r2, r6
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	f000 ff21 	bl	800b34a <xTaskCreateStatic>
 800a508:	4603      	mov	r3, r0
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e01c      	b.n	800a548 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685c      	ldr	r4, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a51a:	b29e      	uxth	r6, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff ff98 	bl	800a458 <makeFreeRtosPriority>
 800a528:	4602      	mov	r2, r0
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9200      	str	r2, [sp, #0]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	4632      	mov	r2, r6
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 ff63 	bl	800b404 <xTaskCreate>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b01      	cmp	r3, #1
 800a542:	d001      	beq.n	800a548 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a544:	2300      	movs	r3, #0
 800a546:	e000      	b.n	800a54a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <osDelay+0x16>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	e000      	b.n	800a56a <osDelay+0x18>
 800a568:	2301      	movs	r3, #1
 800a56a:	4618      	mov	r0, r3
 800a56c:	f001 f880 	bl	800b670 <vTaskDelay>
  
  return osOK;
 800a570:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af02      	add	r7, sp, #8
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a58e:	f7ff ff7b 	bl	800a488 <inHandlerMode>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01c      	beq.n	800a5d2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	f107 0208 	add.w	r2, r7, #8
 800a59e:	f107 030c 	add.w	r3, r7, #12
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 fd8d 	bl	800c0c8 <xTaskGenericNotifyFromISR>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d002      	beq.n	800a5ba <osSignalSet+0x3e>
      return 0x80000000;
 800a5b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5b8:	e019      	b.n	800a5ee <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d015      	beq.n	800a5ec <osSignalSet+0x70>
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <osSignalSet+0x7c>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e00c      	b.n	800a5ec <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	f107 0308 	add.w	r3, r7, #8
 800a5d8:	2201      	movs	r2, #1
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fcbe 	bl	800bf5c <xTaskGenericNotify>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d002      	beq.n	800a5ec <osSignalSet+0x70>
    return 0x80000000;
 800a5e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ea:	e000      	b.n	800a5ee <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b089      	sub	sp, #36	; 0x24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d103      	bne.n	800a620 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	e009      	b.n	800a634 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <osSignalWait+0x38>
      ticks = 1;
 800a630:	2301      	movs	r3, #1
 800a632:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a634:	f7ff ff28 	bl	800a488 <inHandlerMode>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a63e:	2382      	movs	r3, #130	; 0x82
 800a640:	613b      	str	r3, [r7, #16]
 800a642:	e01b      	b.n	800a67c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	f107 0310 	add.w	r3, r7, #16
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	2000      	movs	r0, #0
 800a650:	f001 fc2a 	bl	800bea8 <xTaskNotifyWait>
 800a654:	4603      	mov	r3, r0
 800a656:	2b01      	cmp	r3, #1
 800a658:	d008      	beq.n	800a66c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d102      	bne.n	800a666 <osSignalWait+0x6a>
 800a660:	2300      	movs	r3, #0
 800a662:	613b      	str	r3, [r7, #16]
 800a664:	e00a      	b.n	800a67c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	e007      	b.n	800a67c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da02      	bge.n	800a678 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a672:	2386      	movs	r3, #134	; 0x86
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	e001      	b.n	800a67c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a678:	2308      	movs	r3, #8
 800a67a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	461c      	mov	r4, r3
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	3724      	adds	r7, #36	; 0x24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd90      	pop	{r4, r7, pc}

0800a694 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a694:	b590      	push	{r4, r7, lr}
 800a696:	b085      	sub	sp, #20
 800a698:	af02      	add	r7, sp, #8
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d011      	beq.n	800a6ca <osMessageCreate+0x36>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6859      	ldr	r1, [r3, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	2400      	movs	r4, #0
 800a6c0:	9400      	str	r4, [sp, #0]
 800a6c2:	f000 fd71 	bl	800b1a8 <xQueueGenericCreateStatic>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	e008      	b.n	800a6dc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f000 fddf 	bl	800b298 <xQueueGenericCreate>
 800a6da:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd90      	pop	{r4, r7, pc}

0800a6e4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fff3 	bl	800b6d8 <vTaskSuspend>
  
  return osOK;
 800a6f2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08a      	sub	sp, #40	; 0x28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a708:	f001 f8d8 	bl	800b8bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a70c:	4b5b      	ldr	r3, [pc, #364]	; (800a87c <pvPortMalloc+0x180>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a714:	f000 f920 	bl	800a958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a718:	4b59      	ldr	r3, [pc, #356]	; (800a880 <pvPortMalloc+0x184>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4013      	ands	r3, r2
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 8093 	bne.w	800a84c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01d      	beq.n	800a768 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a72c:	2208      	movs	r2, #8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4413      	add	r3, r2
 800a732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d014      	beq.n	800a768 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f023 0307 	bic.w	r3, r3, #7
 800a744:	3308      	adds	r3, #8
 800a746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d06e      	beq.n	800a84c <pvPortMalloc+0x150>
 800a76e:	4b45      	ldr	r3, [pc, #276]	; (800a884 <pvPortMalloc+0x188>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	429a      	cmp	r2, r3
 800a776:	d869      	bhi.n	800a84c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a778:	4b43      	ldr	r3, [pc, #268]	; (800a888 <pvPortMalloc+0x18c>)
 800a77a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a77c:	4b42      	ldr	r3, [pc, #264]	; (800a888 <pvPortMalloc+0x18c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a782:	e004      	b.n	800a78e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d903      	bls.n	800a7a0 <pvPortMalloc+0xa4>
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f1      	bne.n	800a784 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7a0:	4b36      	ldr	r3, [pc, #216]	; (800a87c <pvPortMalloc+0x180>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d050      	beq.n	800a84c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2208      	movs	r2, #8
 800a7b0:	4413      	add	r3, r2
 800a7b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	1ad2      	subs	r2, r2, r3
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d91f      	bls.n	800a80c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <pvPortMalloc+0xf8>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	613b      	str	r3, [r7, #16]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a806:	69b8      	ldr	r0, [r7, #24]
 800a808:	f000 f908 	bl	800aa1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a80c:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <pvPortMalloc+0x188>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	4a1b      	ldr	r2, [pc, #108]	; (800a884 <pvPortMalloc+0x188>)
 800a818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a81a:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <pvPortMalloc+0x188>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b1b      	ldr	r3, [pc, #108]	; (800a88c <pvPortMalloc+0x190>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d203      	bcs.n	800a82e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a826:	4b17      	ldr	r3, [pc, #92]	; (800a884 <pvPortMalloc+0x188>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a18      	ldr	r2, [pc, #96]	; (800a88c <pvPortMalloc+0x190>)
 800a82c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <pvPortMalloc+0x184>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	431a      	orrs	r2, r3
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a842:	4b13      	ldr	r3, [pc, #76]	; (800a890 <pvPortMalloc+0x194>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3301      	adds	r3, #1
 800a848:	4a11      	ldr	r2, [pc, #68]	; (800a890 <pvPortMalloc+0x194>)
 800a84a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a84c:	f001 f844 	bl	800b8d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <pvPortMalloc+0x174>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	60fb      	str	r3, [r7, #12]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <pvPortMalloc+0x172>
	return pvReturn;
 800a870:	69fb      	ldr	r3, [r7, #28]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3728      	adds	r7, #40	; 0x28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20004540 	.word	0x20004540
 800a880:	20004554 	.word	0x20004554
 800a884:	20004544 	.word	0x20004544
 800a888:	20004538 	.word	0x20004538
 800a88c:	20004548 	.word	0x20004548
 800a890:	2000454c 	.word	0x2000454c

0800a894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d04d      	beq.n	800a942 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	4b24      	ldr	r3, [pc, #144]	; (800a94c <vPortFree+0xb8>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <vPortFree+0x44>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	60fb      	str	r3, [r7, #12]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00a      	beq.n	800a8f6 <vPortFree+0x62>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	60bb      	str	r3, [r7, #8]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	4b14      	ldr	r3, [pc, #80]	; (800a94c <vPortFree+0xb8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4013      	ands	r3, r2
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01e      	beq.n	800a942 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11a      	bne.n	800a942 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <vPortFree+0xb8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	43db      	mvns	r3, r3
 800a916:	401a      	ands	r2, r3
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a91c:	f000 ffce 	bl	800b8bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <vPortFree+0xbc>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4413      	add	r3, r2
 800a92a:	4a09      	ldr	r2, [pc, #36]	; (800a950 <vPortFree+0xbc>)
 800a92c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f000 f874 	bl	800aa1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <vPortFree+0xc0>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	4a06      	ldr	r2, [pc, #24]	; (800a954 <vPortFree+0xc0>)
 800a93c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a93e:	f000 ffcb 	bl	800b8d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a942:	bf00      	nop
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20004554 	.word	0x20004554
 800a950:	20004544 	.word	0x20004544
 800a954:	20004550 	.word	0x20004550

0800a958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a95e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a964:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <prvHeapInit+0xac>)
 800a966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00c      	beq.n	800a98c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3307      	adds	r3, #7
 800a976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0307 	bic.w	r3, r3, #7
 800a97e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	4a1f      	ldr	r2, [pc, #124]	; (800aa04 <prvHeapInit+0xac>)
 800a988:	4413      	add	r3, r2
 800a98a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a990:	4a1d      	ldr	r2, [pc, #116]	; (800aa08 <prvHeapInit+0xb0>)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a996:	4b1c      	ldr	r3, [pc, #112]	; (800aa08 <prvHeapInit+0xb0>)
 800a998:	2200      	movs	r2, #0
 800a99a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	1a9b      	subs	r3, r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0307 	bic.w	r3, r3, #7
 800a9b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a15      	ldr	r2, [pc, #84]	; (800aa0c <prvHeapInit+0xb4>)
 800a9b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9ba:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <prvHeapInit+0xb4>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9c2:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <prvHeapInit+0xb4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	1ad2      	subs	r2, r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <prvHeapInit+0xb4>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	4a0a      	ldr	r2, [pc, #40]	; (800aa10 <prvHeapInit+0xb8>)
 800a9e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <prvHeapInit+0xbc>)
 800a9ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9f0:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <prvHeapInit+0xc0>)
 800a9f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9f6:	601a      	str	r2, [r3, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000938 	.word	0x20000938
 800aa08:	20004538 	.word	0x20004538
 800aa0c:	20004540 	.word	0x20004540
 800aa10:	20004548 	.word	0x20004548
 800aa14:	20004544 	.word	0x20004544
 800aa18:	20004554 	.word	0x20004554

0800aa1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa24:	4b28      	ldr	r3, [pc, #160]	; (800aac8 <prvInsertBlockIntoFreeList+0xac>)
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e002      	b.n	800aa30 <prvInsertBlockIntoFreeList+0x14>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d8f7      	bhi.n	800aa2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	4413      	add	r3, r2
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d108      	bne.n	800aa5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	441a      	add	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	441a      	add	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d118      	bne.n	800aaa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	4b15      	ldr	r3, [pc, #84]	; (800aacc <prvInsertBlockIntoFreeList+0xb0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d00d      	beq.n	800aa9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	441a      	add	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	e008      	b.n	800aaac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa9a:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <prvInsertBlockIntoFreeList+0xb0>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e003      	b.n	800aaac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d002      	beq.n	800aaba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20004538 	.word	0x20004538
 800aacc:	20004540 	.word	0x20004540

0800aad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f103 0208 	add.w	r2, r3, #8
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f103 0208 	add.w	r2, r3, #8
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f103 0208 	add.w	r2, r3, #8
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689a      	ldr	r2, [r3, #8]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
}
 800ab66:	bf00      	nop
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab72:	b480      	push	{r7}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab88:	d103      	bne.n	800ab92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e00c      	b.n	800abac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3308      	adds	r3, #8
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	e002      	b.n	800aba0 <vListInsert+0x2e>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d2f6      	bcs.n	800ab9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	601a      	str	r2, [r3, #0]
}
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6892      	ldr	r2, [r2, #8]
 800abfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6852      	ldr	r2, [r2, #4]
 800ac04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d103      	bne.n	800ac18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	1e5a      	subs	r2, r3, #1
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3b04      	subs	r3, #4
 800ac48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3b04      	subs	r3, #4
 800ac56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f023 0201 	bic.w	r2, r3, #1
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3b04      	subs	r3, #4
 800ac66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac68:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <pxPortInitialiseStack+0x64>)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b14      	subs	r3, #20
 800ac72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3b04      	subs	r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f06f 0202 	mvn.w	r2, #2
 800ac86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3b20      	subs	r3, #32
 800ac8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	0800aca1 	.word	0x0800aca1

0800aca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <prvTaskExitError+0x54>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb2:	d00a      	beq.n	800acca <prvTaskExitError+0x2a>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	60fb      	str	r3, [r7, #12]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <prvTaskExitError+0x28>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	60bb      	str	r3, [r7, #8]
}
 800acdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acde:	bf00      	nop
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0fc      	beq.n	800ace0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ace6:	bf00      	nop
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	20000090 	.word	0x20000090
	...

0800ad00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <pxCurrentTCBConst2>)
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	6808      	ldr	r0, [r1, #0]
 800ad06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	f380 8809 	msr	PSP, r0
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8811 	msr	BASEPRI, r0
 800ad1a:	4770      	bx	lr
 800ad1c:	f3af 8000 	nop.w

0800ad20 <pxCurrentTCBConst2>:
 800ad20:	20004560 	.word	0x20004560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop

0800ad28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad28:	4808      	ldr	r0, [pc, #32]	; (800ad4c <prvPortStartFirstTask+0x24>)
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	6800      	ldr	r0, [r0, #0]
 800ad2e:	f380 8808 	msr	MSP, r0
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8814 	msr	CONTROL, r0
 800ad3a:	b662      	cpsie	i
 800ad3c:	b661      	cpsie	f
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	df00      	svc	0
 800ad48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad4a:	bf00      	nop
 800ad4c:	e000ed08 	.word	0xe000ed08

0800ad50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad56:	4b46      	ldr	r3, [pc, #280]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a46      	ldr	r2, [pc, #280]	; (800ae74 <xPortStartScheduler+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10a      	bne.n	800ad76 <xPortStartScheduler+0x26>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad76:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <xPortStartScheduler+0x120>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a3f      	ldr	r2, [pc, #252]	; (800ae78 <xPortStartScheduler+0x128>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10a      	bne.n	800ad96 <xPortStartScheduler+0x46>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad96:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <xPortStartScheduler+0x12c>)
 800ad98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b31      	ldr	r3, [pc, #196]	; (800ae80 <xPortStartScheduler+0x130>)
 800adbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc0:	2207      	movs	r2, #7
 800adc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adc4:	e009      	b.n	800adda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <xPortStartScheduler+0x134>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3b01      	subs	r3, #1
 800adcc:	4a2d      	ldr	r2, [pc, #180]	; (800ae84 <xPortStartScheduler+0x134>)
 800adce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	b2db      	uxtb	r3, r3
 800add8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d0ef      	beq.n	800adc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ade6:	4b27      	ldr	r3, [pc, #156]	; (800ae84 <xPortStartScheduler+0x134>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f1c3 0307 	rsb	r3, r3, #7
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d00a      	beq.n	800ae08 <xPortStartScheduler+0xb8>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	60bb      	str	r3, [r7, #8]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae1a:	4a1a      	ldr	r2, [pc, #104]	; (800ae84 <xPortStartScheduler+0x134>)
 800ae1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae32:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a14      	ldr	r2, [pc, #80]	; (800ae88 <xPortStartScheduler+0x138>)
 800ae38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae3e:	f000 f8dd 	bl	800affc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <xPortStartScheduler+0x13c>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae48:	f000 f8fc 	bl	800b044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <xPortStartScheduler+0x140>)
 800ae52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae58:	f7ff ff66 	bl	800ad28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae5c:	f000 fe90 	bl	800bb80 <vTaskSwitchContext>
	prvTaskExitError();
 800ae60:	f7ff ff1e 	bl	800aca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	e000ed00 	.word	0xe000ed00
 800ae74:	410fc271 	.word	0x410fc271
 800ae78:	410fc270 	.word	0x410fc270
 800ae7c:	e000e400 	.word	0xe000e400
 800ae80:	20004558 	.word	0x20004558
 800ae84:	2000455c 	.word	0x2000455c
 800ae88:	e000ed20 	.word	0xe000ed20
 800ae8c:	20000090 	.word	0x20000090
 800ae90:	e000ef34 	.word	0xe000ef34

0800ae94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	607b      	str	r3, [r7, #4]
}
 800aeac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <vPortEnterCritical+0x58>)
 800aeb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <vPortEnterCritical+0x58>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d10f      	bne.n	800aee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <vPortEnterCritical+0x5c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	603b      	str	r3, [r7, #0]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <vPortEnterCritical+0x4a>
	}
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20000090 	.word	0x20000090
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aefa:	4b12      	ldr	r3, [pc, #72]	; (800af44 <vPortExitCritical+0x50>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <vPortExitCritical+0x24>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	607b      	str	r3, [r7, #4]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <vPortExitCritical+0x50>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <vPortExitCritical+0x50>)
 800af20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af22:	4b08      	ldr	r3, [pc, #32]	; (800af44 <vPortExitCritical+0x50>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <vPortExitCritical+0x42>
 800af2a:	2300      	movs	r3, #0
 800af2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20000090 	.word	0x20000090
	...

0800af50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af50:	f3ef 8009 	mrs	r0, PSP
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <pxCurrentTCBConst>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	f01e 0f10 	tst.w	lr, #16
 800af60:	bf08      	it	eq
 800af62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af74:	f380 8811 	msr	BASEPRI, r0
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f000 fdfe 	bl	800bb80 <vTaskSwitchContext>
 800af84:	f04f 0000 	mov.w	r0, #0
 800af88:	f380 8811 	msr	BASEPRI, r0
 800af8c:	bc09      	pop	{r0, r3}
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	6808      	ldr	r0, [r1, #0]
 800af92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	f01e 0f10 	tst.w	lr, #16
 800af9a:	bf08      	it	eq
 800af9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afa0:	f380 8809 	msr	PSP, r0
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst>:
 800afb0:	20004560 	.word	0x20004560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afd2:	f000 fd1d 	bl	800ba10 <xTaskIncrementTick>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <SysTick_Handler+0x40>)
 800afde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2300      	movs	r3, #0
 800afe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f383 8811 	msr	BASEPRI, r3
}
 800afee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800affc:	b480      	push	{r7}
 800affe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <vPortSetupTimerInterrupt+0x38>)
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <vPortSetupTimerInterrupt+0x3c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <vPortSetupTimerInterrupt+0x40>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	099b      	lsrs	r3, r3, #6
 800b018:	4a09      	ldr	r2, [pc, #36]	; (800b040 <vPortSetupTimerInterrupt+0x44>)
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <vPortSetupTimerInterrupt+0x34>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	e000e010 	.word	0xe000e010
 800b034:	e000e018 	.word	0xe000e018
 800b038:	20000000 	.word	0x20000000
 800b03c:	10624dd3 	.word	0x10624dd3
 800b040:	e000e014 	.word	0xe000e014

0800b044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b054 <vPortEnableVFP+0x10>
 800b048:	6801      	ldr	r1, [r0, #0]
 800b04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b04e:	6001      	str	r1, [r0, #0]
 800b050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b052:	bf00      	nop
 800b054:	e000ed88 	.word	0xe000ed88

0800b058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b0f      	cmp	r3, #15
 800b068:	d914      	bls.n	800b094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <vPortValidateInterruptPriority+0x70>)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <vPortValidateInterruptPriority+0x74>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	7afa      	ldrb	r2, [r7, #11]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d20a      	bcs.n	800b094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b094:	4b0e      	ldr	r3, [pc, #56]	; (800b0d0 <vPortValidateInterruptPriority+0x78>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b09c:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <vPortValidateInterruptPriority+0x7c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d90a      	bls.n	800b0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	603b      	str	r3, [r7, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <vPortValidateInterruptPriority+0x60>
	}
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	e000e3f0 	.word	0xe000e3f0
 800b0cc:	20004558 	.word	0x20004558
 800b0d0:	e000ed0c 	.word	0xe000ed0c
 800b0d4:	2000455c 	.word	0x2000455c

0800b0d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <xQueueGenericReset+0x2a>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	60bb      	str	r3, [r7, #8]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b102:	f7ff fec7 	bl	800ae94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b112:	fb01 f303 	mul.w	r3, r1, r3
 800b116:	441a      	add	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b132:	3b01      	subs	r3, #1
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b138:	fb01 f303 	mul.w	r3, r1, r3
 800b13c:	441a      	add	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	22ff      	movs	r2, #255	; 0xff
 800b146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	22ff      	movs	r2, #255	; 0xff
 800b14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d114      	bne.n	800b182 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01a      	beq.n	800b196 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3310      	adds	r3, #16
 800b164:	4618      	mov	r0, r3
 800b166:	f000 fd67 	bl	800bc38 <xTaskRemoveFromEventList>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d012      	beq.n	800b196 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <xQueueGenericReset+0xcc>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	e009      	b.n	800b196 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3310      	adds	r3, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fca2 	bl	800aad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3324      	adds	r3, #36	; 0x24
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fc9d 	bl	800aad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b196:	f7ff fead 	bl	800aef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b19a:	2301      	movs	r3, #1
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08e      	sub	sp, #56	; 0x38
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <xQueueGenericCreateStatic+0x52>
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <xQueueGenericCreateStatic+0x56>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <xQueueGenericCreateStatic+0x58>
 800b1fe:	2300      	movs	r3, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	623b      	str	r3, [r7, #32]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <xQueueGenericCreateStatic+0x7e>
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <xQueueGenericCreateStatic+0x82>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <xQueueGenericCreateStatic+0x84>
 800b22a:	2300      	movs	r3, #0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	61fb      	str	r3, [r7, #28]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b246:	2348      	movs	r3, #72	; 0x48
 800b248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b48      	cmp	r3, #72	; 0x48
 800b24e:	d00a      	beq.n	800b266 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	61bb      	str	r3, [r7, #24]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b266:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00d      	beq.n	800b28e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b27a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	4613      	mov	r3, r2
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 f83f 	bl	800b30c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b290:	4618      	mov	r0, r3
 800b292:	3730      	adds	r7, #48	; 0x30
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08a      	sub	sp, #40	; 0x28
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	613b      	str	r3, [r7, #16]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	3348      	adds	r3, #72	; 0x48
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fa13 	bl	800a6fc <pvPortMalloc>
 800b2d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d011      	beq.n	800b302 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	3348      	adds	r3, #72	; 0x48
 800b2e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2f0:	79fa      	ldrb	r2, [r7, #7]
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 f805 	bl	800b30c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b302:	69bb      	ldr	r3, [r7, #24]
	}
 800b304:	4618      	mov	r0, r3
 800b306:	3720      	adds	r7, #32
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d103      	bne.n	800b328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e002      	b.n	800b32e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b33a:	2101      	movs	r1, #1
 800b33c:	69b8      	ldr	r0, [r7, #24]
 800b33e:	f7ff fecb 	bl	800b0d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b08e      	sub	sp, #56	; 0x38
 800b34e:	af04      	add	r7, sp, #16
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	623b      	str	r3, [r7, #32]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <xTaskCreateStatic+0x46>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	61fb      	str	r3, [r7, #28]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b390:	2354      	movs	r3, #84	; 0x54
 800b392:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2b54      	cmp	r3, #84	; 0x54
 800b398:	d00a      	beq.n	800b3b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	61bb      	str	r3, [r7, #24]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01e      	beq.n	800b3f6 <xTaskCreateStatic+0xac>
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d01b      	beq.n	800b3f6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	f107 0314 	add.w	r3, r7, #20
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f850 	bl	800b48e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f0:	f000 f8d4 	bl	800b59c <prvAddNewTaskToReadyList>
 800b3f4:	e001      	b.n	800b3fa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3fa:	697b      	ldr	r3, [r7, #20]
	}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3728      	adds	r7, #40	; 0x28
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08c      	sub	sp, #48	; 0x30
 800b408:	af04      	add	r7, sp, #16
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	4613      	mov	r3, r2
 800b412:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b414:	88fb      	ldrh	r3, [r7, #6]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4618      	mov	r0, r3
 800b41a:	f7ff f96f 	bl	800a6fc <pvPortMalloc>
 800b41e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00e      	beq.n	800b444 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b426:	2054      	movs	r0, #84	; 0x54
 800b428:	f7ff f968 	bl	800a6fc <pvPortMalloc>
 800b42c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	631a      	str	r2, [r3, #48]	; 0x30
 800b43a:	e005      	b.n	800b448 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b43c:	6978      	ldr	r0, [r7, #20]
 800b43e:	f7ff fa29 	bl	800a894 <vPortFree>
 800b442:	e001      	b.n	800b448 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d017      	beq.n	800b47e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b456:	88fa      	ldrh	r2, [r7, #6]
 800b458:	2300      	movs	r3, #0
 800b45a:	9303      	str	r3, [sp, #12]
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	9302      	str	r3, [sp, #8]
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 f80e 	bl	800b48e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b472:	69f8      	ldr	r0, [r7, #28]
 800b474:	f000 f892 	bl	800b59c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b478:	2301      	movs	r3, #1
 800b47a:	61bb      	str	r3, [r7, #24]
 800b47c:	e002      	b.n	800b484 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b484:	69bb      	ldr	r3, [r7, #24]
	}
 800b486:	4618      	mov	r0, r3
 800b488:	3720      	adds	r7, #32
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b088      	sub	sp, #32
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	f023 0307 	bic.w	r3, r3, #7
 800b4b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00a      	beq.n	800b4d6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	617b      	str	r3, [r7, #20]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01f      	beq.n	800b51c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61fb      	str	r3, [r7, #28]
 800b4e0:	e012      	b.n	800b508 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	7819      	ldrb	r1, [r3, #0]
 800b4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	3334      	adds	r3, #52	; 0x34
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d006      	beq.n	800b510 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	3301      	adds	r3, #1
 800b506:	61fb      	str	r3, [r7, #28]
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	2b0f      	cmp	r3, #15
 800b50c:	d9e9      	bls.n	800b4e2 <prvInitialiseNewTask+0x54>
 800b50e:	e000      	b.n	800b512 <prvInitialiseNewTask+0x84>
			{
				break;
 800b510:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b51a:	e003      	b.n	800b524 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	2b06      	cmp	r3, #6
 800b528:	d901      	bls.n	800b52e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b52a:	2306      	movs	r3, #6
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b532:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	2200      	movs	r2, #0
 800b53e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	3304      	adds	r3, #4
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff fae3 	bl	800ab10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	3318      	adds	r3, #24
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff fade 	bl	800ab10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b558:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55c:	f1c3 0207 	rsb	r2, r3, #7
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b568:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	2200      	movs	r2, #0
 800b56e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	68f9      	ldr	r1, [r7, #12]
 800b57c:	69b8      	ldr	r0, [r7, #24]
 800b57e:	f7ff fb5b 	bl	800ac38 <pxPortInitialiseStack>
 800b582:	4602      	mov	r2, r0
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d002      	beq.n	800b594 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b594:	bf00      	nop
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5a4:	f7ff fc76 	bl	800ae94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5a8:	4b2a      	ldr	r3, [pc, #168]	; (800b654 <prvAddNewTaskToReadyList+0xb8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a29      	ldr	r2, [pc, #164]	; (800b654 <prvAddNewTaskToReadyList+0xb8>)
 800b5b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5b2:	4b29      	ldr	r3, [pc, #164]	; (800b658 <prvAddNewTaskToReadyList+0xbc>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5ba:	4a27      	ldr	r2, [pc, #156]	; (800b658 <prvAddNewTaskToReadyList+0xbc>)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5c0:	4b24      	ldr	r3, [pc, #144]	; (800b654 <prvAddNewTaskToReadyList+0xb8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d110      	bne.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5c8:	f000 fbb0 	bl	800bd2c <prvInitialiseTaskLists>
 800b5cc:	e00d      	b.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5ce:	4b23      	ldr	r3, [pc, #140]	; (800b65c <prvAddNewTaskToReadyList+0xc0>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5d6:	4b20      	ldr	r3, [pc, #128]	; (800b658 <prvAddNewTaskToReadyList+0xbc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d802      	bhi.n	800b5ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5e4:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <prvAddNewTaskToReadyList+0xbc>)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5ea:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	4a1b      	ldr	r2, [pc, #108]	; (800b660 <prvAddNewTaskToReadyList+0xc4>)
 800b5f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	409a      	lsls	r2, r3
 800b5fc:	4b19      	ldr	r3, [pc, #100]	; (800b664 <prvAddNewTaskToReadyList+0xc8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4313      	orrs	r3, r2
 800b602:	4a18      	ldr	r2, [pc, #96]	; (800b664 <prvAddNewTaskToReadyList+0xc8>)
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60a:	4613      	mov	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4a15      	ldr	r2, [pc, #84]	; (800b668 <prvAddNewTaskToReadyList+0xcc>)
 800b614:	441a      	add	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3304      	adds	r3, #4
 800b61a:	4619      	mov	r1, r3
 800b61c:	4610      	mov	r0, r2
 800b61e:	f7ff fa84 	bl	800ab2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b622:	f7ff fc67 	bl	800aef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b626:	4b0d      	ldr	r3, [pc, #52]	; (800b65c <prvAddNewTaskToReadyList+0xc0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00e      	beq.n	800b64c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <prvAddNewTaskToReadyList+0xbc>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d207      	bcs.n	800b64c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b63c:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <prvAddNewTaskToReadyList+0xd0>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20004660 	.word	0x20004660
 800b658:	20004560 	.word	0x20004560
 800b65c:	2000466c 	.word	0x2000466c
 800b660:	2000467c 	.word	0x2000467c
 800b664:	20004668 	.word	0x20004668
 800b668:	20004564 	.word	0x20004564
 800b66c:	e000ed04 	.word	0xe000ed04

0800b670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d017      	beq.n	800b6b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <vTaskDelay+0x60>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <vTaskDelay+0x30>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60bb      	str	r3, [r7, #8]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6a0:	f000 f90c 	bl	800b8bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fde8 	bl	800c27c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6ac:	f000 f914 	bl	800b8d8 <xTaskResumeAll>
 800b6b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d107      	bne.n	800b6c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6b8:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <vTaskDelay+0x64>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20004688 	.word	0x20004688
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b6e0:	f7ff fbd8 	bl	800ae94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d102      	bne.n	800b6f0 <vTaskSuspend+0x18>
 800b6ea:	4b3c      	ldr	r3, [pc, #240]	; (800b7dc <vTaskSuspend+0x104>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	e000      	b.n	800b6f2 <vTaskSuspend+0x1a>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff fa73 	bl	800abe4 <uxListRemove>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d115      	bne.n	800b730 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b708:	4935      	ldr	r1, [pc, #212]	; (800b7e0 <vTaskSuspend+0x108>)
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	440b      	add	r3, r1
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <vTaskSuspend+0x58>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	2201      	movs	r2, #1
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	43da      	mvns	r2, r3
 800b726:	4b2f      	ldr	r3, [pc, #188]	; (800b7e4 <vTaskSuspend+0x10c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4013      	ands	r3, r2
 800b72c:	4a2d      	ldr	r2, [pc, #180]	; (800b7e4 <vTaskSuspend+0x10c>)
 800b72e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3318      	adds	r3, #24
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fa51 	bl	800abe4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3304      	adds	r3, #4
 800b746:	4619      	mov	r1, r3
 800b748:	4827      	ldr	r0, [pc, #156]	; (800b7e8 <vTaskSuspend+0x110>)
 800b74a:	f7ff f9ee 	bl	800ab2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b01      	cmp	r3, #1
 800b758:	d103      	bne.n	800b762 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b762:	f7ff fbc7 	bl	800aef4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b766:	4b21      	ldr	r3, [pc, #132]	; (800b7ec <vTaskSuspend+0x114>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b76e:	f7ff fb91 	bl	800ae94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b772:	f000 fb79 	bl	800be68 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b776:	f7ff fbbd 	bl	800aef4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b77a:	4b18      	ldr	r3, [pc, #96]	; (800b7dc <vTaskSuspend+0x104>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	429a      	cmp	r2, r3
 800b782:	d127      	bne.n	800b7d4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b784:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <vTaskSuspend+0x114>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d017      	beq.n	800b7bc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b78c:	4b18      	ldr	r3, [pc, #96]	; (800b7f0 <vTaskSuspend+0x118>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00a      	beq.n	800b7aa <vTaskSuspend+0xd2>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	60bb      	str	r3, [r7, #8]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <vTaskSuspend+0x11c>)
 800b7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7ba:	e00b      	b.n	800b7d4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <vTaskSuspend+0x110>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	4b0d      	ldr	r3, [pc, #52]	; (800b7f8 <vTaskSuspend+0x120>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d103      	bne.n	800b7d0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b7c8:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <vTaskSuspend+0x104>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	601a      	str	r2, [r3, #0]
	}
 800b7ce:	e001      	b.n	800b7d4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b7d0:	f000 f9d6 	bl	800bb80 <vTaskSwitchContext>
	}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20004560 	.word	0x20004560
 800b7e0:	20004564 	.word	0x20004564
 800b7e4:	20004668 	.word	0x20004668
 800b7e8:	2000464c 	.word	0x2000464c
 800b7ec:	2000466c 	.word	0x2000466c
 800b7f0:	20004688 	.word	0x20004688
 800b7f4:	e000ed04 	.word	0xe000ed04
 800b7f8:	20004660 	.word	0x20004660

0800b7fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b80a:	463a      	mov	r2, r7
 800b80c:	1d39      	adds	r1, r7, #4
 800b80e:	f107 0308 	add.w	r3, r7, #8
 800b812:	4618      	mov	r0, r3
 800b814:	f7f5 fbaa 	bl	8000f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	9202      	str	r2, [sp, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	2300      	movs	r3, #0
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	2300      	movs	r3, #0
 800b828:	460a      	mov	r2, r1
 800b82a:	491e      	ldr	r1, [pc, #120]	; (800b8a4 <vTaskStartScheduler+0xa8>)
 800b82c:	481e      	ldr	r0, [pc, #120]	; (800b8a8 <vTaskStartScheduler+0xac>)
 800b82e:	f7ff fd8c 	bl	800b34a <xTaskCreateStatic>
 800b832:	4603      	mov	r3, r0
 800b834:	4a1d      	ldr	r2, [pc, #116]	; (800b8ac <vTaskStartScheduler+0xb0>)
 800b836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b838:	4b1c      	ldr	r3, [pc, #112]	; (800b8ac <vTaskStartScheduler+0xb0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b840:	2301      	movs	r3, #1
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	e001      	b.n	800b84a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d116      	bne.n	800b87e <vTaskStartScheduler+0x82>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b864:	4b12      	ldr	r3, [pc, #72]	; (800b8b0 <vTaskStartScheduler+0xb4>)
 800b866:	f04f 32ff 	mov.w	r2, #4294967295
 800b86a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b86c:	4b11      	ldr	r3, [pc, #68]	; (800b8b4 <vTaskStartScheduler+0xb8>)
 800b86e:	2201      	movs	r2, #1
 800b870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b872:	4b11      	ldr	r3, [pc, #68]	; (800b8b8 <vTaskStartScheduler+0xbc>)
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b878:	f7ff fa6a 	bl	800ad50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b87c:	e00e      	b.n	800b89c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d10a      	bne.n	800b89c <vTaskStartScheduler+0xa0>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	60fb      	str	r3, [r7, #12]
}
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vTaskStartScheduler+0x9e>
}
 800b89c:	bf00      	nop
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	08011c18 	.word	0x08011c18
 800b8a8:	0800bcfd 	.word	0x0800bcfd
 800b8ac:	20004684 	.word	0x20004684
 800b8b0:	20004680 	.word	0x20004680
 800b8b4:	2000466c 	.word	0x2000466c
 800b8b8:	20004664 	.word	0x20004664

0800b8bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8c0:	4b04      	ldr	r3, [pc, #16]	; (800b8d4 <vTaskSuspendAll+0x18>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	4a03      	ldr	r2, [pc, #12]	; (800b8d4 <vTaskSuspendAll+0x18>)
 800b8c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8ca:	bf00      	nop
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	20004688 	.word	0x20004688

0800b8d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8e6:	4b41      	ldr	r3, [pc, #260]	; (800b9ec <xTaskResumeAll+0x114>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	603b      	str	r3, [r7, #0]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b904:	f7ff fac6 	bl	800ae94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b908:	4b38      	ldr	r3, [pc, #224]	; (800b9ec <xTaskResumeAll+0x114>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	4a37      	ldr	r2, [pc, #220]	; (800b9ec <xTaskResumeAll+0x114>)
 800b910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b912:	4b36      	ldr	r3, [pc, #216]	; (800b9ec <xTaskResumeAll+0x114>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d161      	bne.n	800b9de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b91a:	4b35      	ldr	r3, [pc, #212]	; (800b9f0 <xTaskResumeAll+0x118>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d05d      	beq.n	800b9de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b922:	e02e      	b.n	800b982 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b924:	4b33      	ldr	r3, [pc, #204]	; (800b9f4 <xTaskResumeAll+0x11c>)
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3318      	adds	r3, #24
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff f957 	bl	800abe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff f952 	bl	800abe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	2201      	movs	r2, #1
 800b946:	409a      	lsls	r2, r3
 800b948:	4b2b      	ldr	r3, [pc, #172]	; (800b9f8 <xTaskResumeAll+0x120>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <xTaskResumeAll+0x120>)
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4a27      	ldr	r2, [pc, #156]	; (800b9fc <xTaskResumeAll+0x124>)
 800b960:	441a      	add	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f7ff f8de 	bl	800ab2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	4b23      	ldr	r3, [pc, #140]	; (800ba00 <xTaskResumeAll+0x128>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b97c:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <xTaskResumeAll+0x12c>)
 800b97e:	2201      	movs	r2, #1
 800b980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b982:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <xTaskResumeAll+0x11c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1cc      	bne.n	800b924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b990:	f000 fa6a 	bl	800be68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b994:	4b1c      	ldr	r3, [pc, #112]	; (800ba08 <xTaskResumeAll+0x130>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d010      	beq.n	800b9c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9a0:	f000 f836 	bl	800ba10 <xTaskIncrementTick>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b9aa:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <xTaskResumeAll+0x12c>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1f1      	bne.n	800b9a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b9bc:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <xTaskResumeAll+0x130>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9c2:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <xTaskResumeAll+0x12c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d009      	beq.n	800b9de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <xTaskResumeAll+0x134>)
 800b9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9de:	f7ff fa89 	bl	800aef4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20004688 	.word	0x20004688
 800b9f0:	20004660 	.word	0x20004660
 800b9f4:	20004620 	.word	0x20004620
 800b9f8:	20004668 	.word	0x20004668
 800b9fc:	20004564 	.word	0x20004564
 800ba00:	20004560 	.word	0x20004560
 800ba04:	20004674 	.word	0x20004674
 800ba08:	20004670 	.word	0x20004670
 800ba0c:	e000ed04 	.word	0xe000ed04

0800ba10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1a:	4b4e      	ldr	r3, [pc, #312]	; (800bb54 <xTaskIncrementTick+0x144>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f040 808e 	bne.w	800bb40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba24:	4b4c      	ldr	r3, [pc, #304]	; (800bb58 <xTaskIncrementTick+0x148>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba2c:	4a4a      	ldr	r2, [pc, #296]	; (800bb58 <xTaskIncrementTick+0x148>)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d120      	bne.n	800ba7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba38:	4b48      	ldr	r3, [pc, #288]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	603b      	str	r3, [r7, #0]
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xTaskIncrementTick+0x46>
 800ba58:	4b40      	ldr	r3, [pc, #256]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	4b40      	ldr	r3, [pc, #256]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a3e      	ldr	r2, [pc, #248]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4a3e      	ldr	r2, [pc, #248]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	4b3d      	ldr	r3, [pc, #244]	; (800bb64 <xTaskIncrementTick+0x154>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	4a3c      	ldr	r2, [pc, #240]	; (800bb64 <xTaskIncrementTick+0x154>)
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	f000 f9f7 	bl	800be68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba7a:	4b3b      	ldr	r3, [pc, #236]	; (800bb68 <xTaskIncrementTick+0x158>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d348      	bcc.n	800bb16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba84:	4b35      	ldr	r3, [pc, #212]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8e:	4b36      	ldr	r3, [pc, #216]	; (800bb68 <xTaskIncrementTick+0x158>)
 800ba90:	f04f 32ff 	mov.w	r2, #4294967295
 800ba94:	601a      	str	r2, [r3, #0]
					break;
 800ba96:	e03e      	b.n	800bb16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	4b30      	ldr	r3, [pc, #192]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d203      	bcs.n	800bab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bab0:	4a2d      	ldr	r2, [pc, #180]	; (800bb68 <xTaskIncrementTick+0x158>)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bab6:	e02e      	b.n	800bb16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3304      	adds	r3, #4
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff f891 	bl	800abe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3318      	adds	r3, #24
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff f888 	bl	800abe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	2201      	movs	r2, #1
 800bada:	409a      	lsls	r2, r3
 800badc:	4b23      	ldr	r3, [pc, #140]	; (800bb6c <xTaskIncrementTick+0x15c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	4a22      	ldr	r2, [pc, #136]	; (800bb6c <xTaskIncrementTick+0x15c>)
 800bae4:	6013      	str	r3, [r2, #0]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4a1f      	ldr	r2, [pc, #124]	; (800bb70 <xTaskIncrementTick+0x160>)
 800baf4:	441a      	add	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3304      	adds	r3, #4
 800bafa:	4619      	mov	r1, r3
 800bafc:	4610      	mov	r0, r2
 800bafe:	f7ff f814 	bl	800ab2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb06:	4b1b      	ldr	r3, [pc, #108]	; (800bb74 <xTaskIncrementTick+0x164>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d3b9      	bcc.n	800ba84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb10:	2301      	movs	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb14:	e7b6      	b.n	800ba84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb16:	4b17      	ldr	r3, [pc, #92]	; (800bb74 <xTaskIncrementTick+0x164>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1c:	4914      	ldr	r1, [pc, #80]	; (800bb70 <xTaskIncrementTick+0x160>)
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	440b      	add	r3, r1
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d901      	bls.n	800bb32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb32:	4b11      	ldr	r3, [pc, #68]	; (800bb78 <xTaskIncrementTick+0x168>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d007      	beq.n	800bb4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	e004      	b.n	800bb4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb40:	4b0e      	ldr	r3, [pc, #56]	; (800bb7c <xTaskIncrementTick+0x16c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	4a0d      	ldr	r2, [pc, #52]	; (800bb7c <xTaskIncrementTick+0x16c>)
 800bb48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb4a:	697b      	ldr	r3, [r7, #20]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20004688 	.word	0x20004688
 800bb58:	20004664 	.word	0x20004664
 800bb5c:	20004618 	.word	0x20004618
 800bb60:	2000461c 	.word	0x2000461c
 800bb64:	20004678 	.word	0x20004678
 800bb68:	20004680 	.word	0x20004680
 800bb6c:	20004668 	.word	0x20004668
 800bb70:	20004564 	.word	0x20004564
 800bb74:	20004560 	.word	0x20004560
 800bb78:	20004674 	.word	0x20004674
 800bb7c:	20004670 	.word	0x20004670

0800bb80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb86:	4b27      	ldr	r3, [pc, #156]	; (800bc24 <vTaskSwitchContext+0xa4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb8e:	4b26      	ldr	r3, [pc, #152]	; (800bc28 <vTaskSwitchContext+0xa8>)
 800bb90:	2201      	movs	r2, #1
 800bb92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb94:	e03f      	b.n	800bc16 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bb96:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <vTaskSwitchContext+0xa8>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9c:	4b23      	ldr	r3, [pc, #140]	; (800bc2c <vTaskSwitchContext+0xac>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	fab3 f383 	clz	r3, r3
 800bba8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bbaa:	7afb      	ldrb	r3, [r7, #11]
 800bbac:	f1c3 031f 	rsb	r3, r3, #31
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	491f      	ldr	r1, [pc, #124]	; (800bc30 <vTaskSwitchContext+0xb0>)
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10a      	bne.n	800bbdc <vTaskSwitchContext+0x5c>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	607b      	str	r3, [r7, #4]
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <vTaskSwitchContext+0x5a>
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <vTaskSwitchContext+0xb0>)
 800bbe8:	4413      	add	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d104      	bne.n	800bc0c <vTaskSwitchContext+0x8c>
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	605a      	str	r2, [r3, #4]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <vTaskSwitchContext+0xb4>)
 800bc14:	6013      	str	r3, [r2, #0]
}
 800bc16:	bf00      	nop
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20004688 	.word	0x20004688
 800bc28:	20004674 	.word	0x20004674
 800bc2c:	20004668 	.word	0x20004668
 800bc30:	20004564 	.word	0x20004564
 800bc34:	20004560 	.word	0x20004560

0800bc38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	60fb      	str	r3, [r7, #12]
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3318      	adds	r3, #24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe ffbb 	bl	800abe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6e:	4b1d      	ldr	r3, [pc, #116]	; (800bce4 <xTaskRemoveFromEventList+0xac>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d11c      	bne.n	800bcb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	3304      	adds	r3, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe ffb2 	bl	800abe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc84:	2201      	movs	r2, #1
 800bc86:	409a      	lsls	r2, r3
 800bc88:	4b17      	ldr	r3, [pc, #92]	; (800bce8 <xTaskRemoveFromEventList+0xb0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	4a16      	ldr	r2, [pc, #88]	; (800bce8 <xTaskRemoveFromEventList+0xb0>)
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4a13      	ldr	r2, [pc, #76]	; (800bcec <xTaskRemoveFromEventList+0xb4>)
 800bca0:	441a      	add	r2, r3
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3304      	adds	r3, #4
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fe ff3e 	bl	800ab2a <vListInsertEnd>
 800bcae:	e005      	b.n	800bcbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	3318      	adds	r3, #24
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	480e      	ldr	r0, [pc, #56]	; (800bcf0 <xTaskRemoveFromEventList+0xb8>)
 800bcb8:	f7fe ff37 	bl	800ab2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc0:	4b0c      	ldr	r3, [pc, #48]	; (800bcf4 <xTaskRemoveFromEventList+0xbc>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d905      	bls.n	800bcd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcca:	2301      	movs	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcce:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <xTaskRemoveFromEventList+0xc0>)
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e001      	b.n	800bcda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcda:	697b      	ldr	r3, [r7, #20]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	20004688 	.word	0x20004688
 800bce8:	20004668 	.word	0x20004668
 800bcec:	20004564 	.word	0x20004564
 800bcf0:	20004620 	.word	0x20004620
 800bcf4:	20004560 	.word	0x20004560
 800bcf8:	20004674 	.word	0x20004674

0800bcfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd04:	f000 f852 	bl	800bdac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd08:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <prvIdleTask+0x28>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d9f9      	bls.n	800bd04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd10:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <prvIdleTask+0x2c>)
 800bd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd20:	e7f0      	b.n	800bd04 <prvIdleTask+0x8>
 800bd22:	bf00      	nop
 800bd24:	20004564 	.word	0x20004564
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd32:	2300      	movs	r3, #0
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	e00c      	b.n	800bd52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4a12      	ldr	r2, [pc, #72]	; (800bd8c <prvInitialiseTaskLists+0x60>)
 800bd44:	4413      	add	r3, r2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fec2 	bl	800aad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b06      	cmp	r3, #6
 800bd56:	d9ef      	bls.n	800bd38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd58:	480d      	ldr	r0, [pc, #52]	; (800bd90 <prvInitialiseTaskLists+0x64>)
 800bd5a:	f7fe feb9 	bl	800aad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd5e:	480d      	ldr	r0, [pc, #52]	; (800bd94 <prvInitialiseTaskLists+0x68>)
 800bd60:	f7fe feb6 	bl	800aad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd64:	480c      	ldr	r0, [pc, #48]	; (800bd98 <prvInitialiseTaskLists+0x6c>)
 800bd66:	f7fe feb3 	bl	800aad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd6a:	480c      	ldr	r0, [pc, #48]	; (800bd9c <prvInitialiseTaskLists+0x70>)
 800bd6c:	f7fe feb0 	bl	800aad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd70:	480b      	ldr	r0, [pc, #44]	; (800bda0 <prvInitialiseTaskLists+0x74>)
 800bd72:	f7fe fead 	bl	800aad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <prvInitialiseTaskLists+0x78>)
 800bd78:	4a05      	ldr	r2, [pc, #20]	; (800bd90 <prvInitialiseTaskLists+0x64>)
 800bd7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <prvInitialiseTaskLists+0x7c>)
 800bd7e:	4a05      	ldr	r2, [pc, #20]	; (800bd94 <prvInitialiseTaskLists+0x68>)
 800bd80:	601a      	str	r2, [r3, #0]
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20004564 	.word	0x20004564
 800bd90:	200045f0 	.word	0x200045f0
 800bd94:	20004604 	.word	0x20004604
 800bd98:	20004620 	.word	0x20004620
 800bd9c:	20004634 	.word	0x20004634
 800bda0:	2000464c 	.word	0x2000464c
 800bda4:	20004618 	.word	0x20004618
 800bda8:	2000461c 	.word	0x2000461c

0800bdac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdb2:	e019      	b.n	800bde8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdb4:	f7ff f86e 	bl	800ae94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb8:	4b10      	ldr	r3, [pc, #64]	; (800bdfc <prvCheckTasksWaitingTermination+0x50>)
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe ff0d 	bl	800abe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdca:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <prvCheckTasksWaitingTermination+0x54>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	4a0b      	ldr	r2, [pc, #44]	; (800be00 <prvCheckTasksWaitingTermination+0x54>)
 800bdd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdd4:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <prvCheckTasksWaitingTermination+0x58>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	4a0a      	ldr	r2, [pc, #40]	; (800be04 <prvCheckTasksWaitingTermination+0x58>)
 800bddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdde:	f7ff f889 	bl	800aef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f810 	bl	800be08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bde8:	4b06      	ldr	r3, [pc, #24]	; (800be04 <prvCheckTasksWaitingTermination+0x58>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e1      	bne.n	800bdb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	20004634 	.word	0x20004634
 800be00:	20004660 	.word	0x20004660
 800be04:	20004648 	.word	0x20004648

0800be08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be16:	2b00      	cmp	r3, #0
 800be18:	d108      	bne.n	800be2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fd38 	bl	800a894 <vPortFree>
				vPortFree( pxTCB );
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7fe fd35 	bl	800a894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be2a:	e018      	b.n	800be5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be32:	2b01      	cmp	r3, #1
 800be34:	d103      	bne.n	800be3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7fe fd2c 	bl	800a894 <vPortFree>
	}
 800be3c:	e00f      	b.n	800be5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be44:	2b02      	cmp	r3, #2
 800be46:	d00a      	beq.n	800be5e <prvDeleteTCB+0x56>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	60fb      	str	r3, [r7, #12]
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <prvDeleteTCB+0x54>
	}
 800be5e:	bf00      	nop
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be6e:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <prvResetNextTaskUnblockTime+0x38>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <prvResetNextTaskUnblockTime+0x3c>)
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be80:	e008      	b.n	800be94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be82:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <prvResetNextTaskUnblockTime+0x38>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	4a04      	ldr	r2, [pc, #16]	; (800bea4 <prvResetNextTaskUnblockTime+0x3c>)
 800be92:	6013      	str	r3, [r2, #0]
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	20004618 	.word	0x20004618
 800bea4:	20004680 	.word	0x20004680

0800bea8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800beb6:	f7fe ffed 	bl	800ae94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800beba:	4b26      	ldr	r3, [pc, #152]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d01a      	beq.n	800befe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bec8:	4b22      	ldr	r3, [pc, #136]	; (800bf54 <xTaskNotifyWait+0xac>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	43d2      	mvns	r2, r2
 800bed2:	400a      	ands	r2, r1
 800bed4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bed6:	4b1f      	ldr	r3, [pc, #124]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00b      	beq.n	800befe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bee6:	2101      	movs	r1, #1
 800bee8:	6838      	ldr	r0, [r7, #0]
 800beea:	f000 f9c7 	bl	800c27c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800beee:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <xTaskNotifyWait+0xb0>)
 800bef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800befe:	f7fe fff9 	bl	800aef4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bf02:	f7fe ffc7 	bl	800ae94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d004      	beq.n	800bf16 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bf0c:	4b11      	ldr	r3, [pc, #68]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf16:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d002      	beq.n	800bf2a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e008      	b.n	800bf3c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bf2a:	4b0a      	ldr	r3, [pc, #40]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	43d2      	mvns	r2, r2
 800bf34:	400a      	ands	r2, r1
 800bf36:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <xTaskNotifyWait+0xac>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800bf46:	f7fe ffd5 	bl	800aef4 <vPortExitCritical>

		return xReturn;
 800bf4a:	697b      	ldr	r3, [r7, #20]
	}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20004560 	.word	0x20004560
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	; 0x28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <xTaskGenericNotify+0x30>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	61bb      	str	r3, [r7, #24]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bf90:	f7fe ff80 	bl	800ae94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bfa8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	2202      	movs	r2, #2
 800bfae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d828      	bhi.n	800c00a <xTaskGenericNotify+0xae>
 800bfb8:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <xTaskGenericNotify+0x64>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800c02b 	.word	0x0800c02b
 800bfc4:	0800bfd5 	.word	0x0800bfd5
 800bfc8:	0800bfe3 	.word	0x0800bfe3
 800bfcc:	0800bfef 	.word	0x0800bfef
 800bfd0:	0800bff7 	.word	0x0800bff7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bfe0:	e026      	b.n	800c030 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	6a3b      	ldr	r3, [r7, #32]
 800bfea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bfec:	e020      	b.n	800c030 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bff4:	e01c      	b.n	800c030 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bff6:	7ffb      	ldrb	r3, [r7, #31]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d003      	beq.n	800c004 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c002:	e015      	b.n	800c030 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c004:	2300      	movs	r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c008:	e012      	b.n	800c030 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c012:	d00c      	beq.n	800c02e <xTaskGenericNotify+0xd2>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	617b      	str	r3, [r7, #20]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xTaskGenericNotify+0xcc>
					break;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <xTaskGenericNotify+0xd4>

					break;
 800c02e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c030:	7ffb      	ldrb	r3, [r7, #31]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d139      	bne.n	800c0aa <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	3304      	adds	r3, #4
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fdd2 	bl	800abe4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	2201      	movs	r2, #1
 800c046:	409a      	lsls	r2, r3
 800c048:	4b1b      	ldr	r3, [pc, #108]	; (800c0b8 <xTaskGenericNotify+0x15c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	4a1a      	ldr	r2, [pc, #104]	; (800c0b8 <xTaskGenericNotify+0x15c>)
 800c050:	6013      	str	r3, [r2, #0]
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4a17      	ldr	r2, [pc, #92]	; (800c0bc <xTaskGenericNotify+0x160>)
 800c060:	441a      	add	r2, r3
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	3304      	adds	r3, #4
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7fe fd5e 	bl	800ab2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <xTaskGenericNotify+0x130>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	613b      	str	r3, [r7, #16]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c090:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <xTaskGenericNotify+0x164>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	429a      	cmp	r2, r3
 800c098:	d907      	bls.n	800c0aa <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c09a:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <xTaskGenericNotify+0x168>)
 800c09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c0aa:	f7fe ff23 	bl	800aef4 <vPortExitCritical>

		return xReturn;
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3728      	adds	r7, #40	; 0x28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	20004668 	.word	0x20004668
 800c0bc:	20004564 	.word	0x20004564
 800c0c0:	20004560 	.word	0x20004560
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08e      	sub	sp, #56	; 0x38
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0f8:	f7fe ffae 	bl	800b058 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c100:	f3ef 8211 	mrs	r2, BASEPRI
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	623a      	str	r2, [r7, #32]
 800c116:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c118:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	2202      	movs	r2, #2
 800c138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	2b04      	cmp	r3, #4
 800c140:	d828      	bhi.n	800c194 <xTaskGenericNotifyFromISR+0xcc>
 800c142:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <xTaskGenericNotifyFromISR+0x80>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c1b5 	.word	0x0800c1b5
 800c14c:	0800c15d 	.word	0x0800c15d
 800c150:	0800c16b 	.word	0x0800c16b
 800c154:	0800c177 	.word	0x0800c177
 800c158:	0800c17f 	.word	0x0800c17f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	431a      	orrs	r2, r3
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c168:	e027      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c174:	e021      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c17c:	e01d      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c17e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c182:	2b02      	cmp	r3, #2
 800c184:	d003      	beq.n	800c18e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c18c:	e015      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c18e:	2300      	movs	r3, #0
 800c190:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c192:	e012      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d00c      	beq.n	800c1b8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	61bb      	str	r3, [r7, #24]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c1b4:	bf00      	nop
 800c1b6:	e000      	b.n	800c1ba <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c1b8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d145      	bne.n	800c24e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	617b      	str	r3, [r7, #20]
}
 800c1dc:	bf00      	nop
 800c1de:	e7fe      	b.n	800c1de <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1e0:	4b20      	ldr	r3, [pc, #128]	; (800c264 <xTaskGenericNotifyFromISR+0x19c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d11c      	bne.n	800c222 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fcf9 	bl	800abe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	409a      	lsls	r2, r3
 800c1fa:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <xTaskGenericNotifyFromISR+0x1a0>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	4a19      	ldr	r2, [pc, #100]	; (800c268 <xTaskGenericNotifyFromISR+0x1a0>)
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4a16      	ldr	r2, [pc, #88]	; (800c26c <xTaskGenericNotifyFromISR+0x1a4>)
 800c212:	441a      	add	r2, r3
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	f7fe fc85 	bl	800ab2a <vListInsertEnd>
 800c220:	e005      	b.n	800c22e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	3318      	adds	r3, #24
 800c226:	4619      	mov	r1, r3
 800c228:	4811      	ldr	r0, [pc, #68]	; (800c270 <xTaskGenericNotifyFromISR+0x1a8>)
 800c22a:	f7fe fc7e 	bl	800ab2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c232:	4b10      	ldr	r3, [pc, #64]	; (800c274 <xTaskGenericNotifyFromISR+0x1ac>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	429a      	cmp	r2, r3
 800c23a:	d908      	bls.n	800c24e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d002      	beq.n	800c248 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c248:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <xTaskGenericNotifyFromISR+0x1b0>)
 800c24a:	2201      	movs	r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f383 8811 	msr	BASEPRI, r3
}
 800c258:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3738      	adds	r7, #56	; 0x38
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20004688 	.word	0x20004688
 800c268:	20004668 	.word	0x20004668
 800c26c:	20004564 	.word	0x20004564
 800c270:	20004620 	.word	0x20004620
 800c274:	20004560 	.word	0x20004560
 800c278:	20004674 	.word	0x20004674

0800c27c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c286:	4b29      	ldr	r3, [pc, #164]	; (800c32c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c28c:	4b28      	ldr	r3, [pc, #160]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3304      	adds	r3, #4
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe fca6 	bl	800abe4 <uxListRemove>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10b      	bne.n	800c2b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c29e:	4b24      	ldr	r3, [pc, #144]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	43da      	mvns	r2, r3
 800c2ac:	4b21      	ldr	r3, [pc, #132]	; (800c334 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	4a20      	ldr	r2, [pc, #128]	; (800c334 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2bc:	d10a      	bne.n	800c2d4 <prvAddCurrentTaskToDelayedList+0x58>
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d007      	beq.n	800c2d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	481a      	ldr	r0, [pc, #104]	; (800c338 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2ce:	f7fe fc2c 	bl	800ab2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2d2:	e026      	b.n	800c322 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4413      	add	r3, r2
 800c2da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2dc:	4b14      	ldr	r3, [pc, #80]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d209      	bcs.n	800c300 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ec:	4b13      	ldr	r3, [pc, #76]	; (800c33c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	f7fe fc3a 	bl	800ab72 <vListInsert>
}
 800c2fe:	e010      	b.n	800c322 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3304      	adds	r3, #4
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f7fe fc30 	bl	800ab72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c312:	4b0c      	ldr	r3, [pc, #48]	; (800c344 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d202      	bcs.n	800c322 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c31c:	4a09      	ldr	r2, [pc, #36]	; (800c344 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	6013      	str	r3, [r2, #0]
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20004664 	.word	0x20004664
 800c330:	20004560 	.word	0x20004560
 800c334:	20004668 	.word	0x20004668
 800c338:	2000464c 	.word	0x2000464c
 800c33c:	2000461c 	.word	0x2000461c
 800c340:	20004618 	.word	0x20004618
 800c344:	20004680 	.word	0x20004680

0800c348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c354:	205c      	movs	r0, #92	; 0x5c
 800c356:	f002 fc79 	bl	800ec4c <USBD_static_malloc>
 800c35a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <USBD_CDC_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	32b0      	adds	r2, #176	; 0xb0
 800c36c:	2100      	movs	r1, #0
 800c36e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c372:	2302      	movs	r3, #2
 800c374:	e0ca      	b.n	800c50c <USBD_CDC_Init+0x1c4>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c376:	225c      	movs	r2, #92	; 0x5c
 800c378:	2100      	movs	r1, #0
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f002 fce2 	bl	800ed44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	32b0      	adds	r2, #176	; 0xb0
 800c38a:	68f9      	ldr	r1, [r7, #12]
 800c38c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	32b0      	adds	r2, #176	; 0xb0
 800c39a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	7c1b      	ldrb	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d136      	bne.n	800c41a <USBD_CDC_Init+0xd2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3ac:	4b59      	ldr	r3, [pc, #356]	; (800c514 <USBD_CDC_Init+0x1cc>)
 800c3ae:	7819      	ldrb	r1, [r3, #0]
 800c3b0:	2340      	movs	r3, #64	; 0x40
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f002 fb26 	bl	800ea06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c3ba:	4b56      	ldr	r3, [pc, #344]	; (800c514 <USBD_CDC_Init+0x1cc>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	f003 020f 	and.w	r2, r3, #15
 800c3c2:	6879      	ldr	r1, [r7, #4]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	440b      	add	r3, r1
 800c3ce:	3324      	adds	r3, #36	; 0x24
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c3d4:	4b50      	ldr	r3, [pc, #320]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c3d6:	7819      	ldrb	r1, [r3, #0]
 800c3d8:	2340      	movs	r3, #64	; 0x40
 800c3da:	2202      	movs	r2, #2
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f002 fb12 	bl	800ea06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3e2:	4b4d      	ldr	r3, [pc, #308]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	f003 020f 	and.w	r2, r3, #15
 800c3ea:	6879      	ldr	r1, [r7, #4]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	4413      	add	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	440b      	add	r3, r1
 800c3f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c3fe:	4b47      	ldr	r3, [pc, #284]	; (800c51c <USBD_CDC_Init+0x1d4>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	f003 020f 	and.w	r2, r3, #15
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	3326      	adds	r3, #38	; 0x26
 800c414:	2210      	movs	r2, #16
 800c416:	801a      	strh	r2, [r3, #0]
 800c418:	e035      	b.n	800c486 <USBD_CDC_Init+0x13e>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c41a:	4b3e      	ldr	r3, [pc, #248]	; (800c514 <USBD_CDC_Init+0x1cc>)
 800c41c:	7819      	ldrb	r1, [r3, #0]
 800c41e:	2340      	movs	r3, #64	; 0x40
 800c420:	2202      	movs	r2, #2
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f002 faef 	bl	800ea06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c428:	4b3a      	ldr	r3, [pc, #232]	; (800c514 <USBD_CDC_Init+0x1cc>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	f003 020f 	and.w	r2, r3, #15
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	4613      	mov	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	440b      	add	r3, r1
 800c43c:	3324      	adds	r3, #36	; 0x24
 800c43e:	2201      	movs	r2, #1
 800c440:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c442:	4b35      	ldr	r3, [pc, #212]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c444:	7819      	ldrb	r1, [r3, #0]
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	2202      	movs	r2, #2
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f002 fadb 	bl	800ea06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c450:	4b31      	ldr	r3, [pc, #196]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	f003 020f 	and.w	r2, r3, #15
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4613      	mov	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	440b      	add	r3, r1
 800c464:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c468:	2201      	movs	r2, #1
 800c46a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c46c:	4b2b      	ldr	r3, [pc, #172]	; (800c51c <USBD_CDC_Init+0x1d4>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	f003 020f 	and.w	r2, r3, #15
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	3326      	adds	r3, #38	; 0x26
 800c482:	2210      	movs	r2, #16
 800c484:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c486:	4b25      	ldr	r3, [pc, #148]	; (800c51c <USBD_CDC_Init+0x1d4>)
 800c488:	7819      	ldrb	r1, [r3, #0]
 800c48a:	2308      	movs	r3, #8
 800c48c:	2203      	movs	r2, #3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f002 fab9 	bl	800ea06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c494:	4b21      	ldr	r3, [pc, #132]	; (800c51c <USBD_CDC_Init+0x1d4>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	f003 020f 	and.w	r2, r3, #15
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3324      	adds	r3, #36	; 0x24
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	33b0      	adds	r3, #176	; 0xb0
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	659a      	str	r2, [r3, #88]	; 0x58

  if (hcdc->RxBuffer == NULL)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d101      	bne.n	800c4e0 <USBD_CDC_Init+0x198>
  {
    return (uint8_t)USBD_EMEM;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	e015      	b.n	800c50c <USBD_CDC_Init+0x1c4>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7c1b      	ldrb	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d108      	bne.n	800c4fa <USBD_CDC_Init+0x1b2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4e8:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c4ea:	7819      	ldrb	r1, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4f0:	2340      	movs	r3, #64	; 0x40
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f002 fb76 	bl	800ebe4 <USBD_LL_PrepareReceive>
 800c4f8:	e007      	b.n	800c50a <USBD_CDC_Init+0x1c2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4fa:	4b07      	ldr	r3, [pc, #28]	; (800c518 <USBD_CDC_Init+0x1d0>)
 800c4fc:	7819      	ldrb	r1, [r3, #0]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c502:	2340      	movs	r3, #64	; 0x40
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f002 fb6d 	bl	800ebe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	2000011b 	.word	0x2000011b
 800c518:	2000011c 	.word	0x2000011c
 800c51c:	2000011d 	.word	0x2000011d

0800c520 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c52c:	4b3a      	ldr	r3, [pc, #232]	; (800c618 <USBD_CDC_DeInit+0xf8>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f002 fa8d 	bl	800ea52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c538:	4b37      	ldr	r3, [pc, #220]	; (800c618 <USBD_CDC_DeInit+0xf8>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	f003 020f 	and.w	r2, r3, #15
 800c540:	6879      	ldr	r1, [r7, #4]
 800c542:	4613      	mov	r3, r2
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	440b      	add	r3, r1
 800c54c:	3324      	adds	r3, #36	; 0x24
 800c54e:	2200      	movs	r2, #0
 800c550:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c552:	4b32      	ldr	r3, [pc, #200]	; (800c61c <USBD_CDC_DeInit+0xfc>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f002 fa7a 	bl	800ea52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c55e:	4b2f      	ldr	r3, [pc, #188]	; (800c61c <USBD_CDC_DeInit+0xfc>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	f003 020f 	and.w	r2, r3, #15
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	4613      	mov	r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	440b      	add	r3, r1
 800c572:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c576:	2200      	movs	r2, #0
 800c578:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c57a:	4b29      	ldr	r3, [pc, #164]	; (800c620 <USBD_CDC_DeInit+0x100>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f002 fa66 	bl	800ea52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c586:	4b26      	ldr	r3, [pc, #152]	; (800c620 <USBD_CDC_DeInit+0x100>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 020f 	and.w	r2, r3, #15
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	440b      	add	r3, r1
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	2200      	movs	r2, #0
 800c59e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c5a0:	4b1f      	ldr	r3, [pc, #124]	; (800c620 <USBD_CDC_DeInit+0x100>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f003 020f 	and.w	r2, r3, #15
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	3326      	adds	r3, #38	; 0x26
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	32b0      	adds	r2, #176	; 0xb0
 800c5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01f      	beq.n	800c60c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	33b0      	adds	r3, #176	; 0xb0
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	32b0      	adds	r2, #176	; 0xb0
 800c5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f002 fb3a 	bl	800ec68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	32b0      	adds	r2, #176	; 0xb0
 800c5fe:	2100      	movs	r1, #0
 800c600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	2000011b 	.word	0x2000011b
 800c61c:	2000011c 	.word	0x2000011c
 800c620:	2000011d 	.word	0x2000011d

0800c624 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32b0      	adds	r2, #176	; 0xb0
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c63e:	2300      	movs	r3, #0
 800c640:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c642:	2300      	movs	r3, #0
 800c644:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d101      	bne.n	800c654 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c650:	2303      	movs	r3, #3
 800c652:	e0bf      	b.n	800c7d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d050      	beq.n	800c702 <USBD_CDC_Setup+0xde>
 800c660:	2b20      	cmp	r3, #32
 800c662:	f040 80af 	bne.w	800c7c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	88db      	ldrh	r3, [r3, #6]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d03a      	beq.n	800c6e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	b25b      	sxtb	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	da1b      	bge.n	800c6b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	33b0      	adds	r3, #176	; 0xb0
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c68e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	88d2      	ldrh	r2, [r2, #6]
 800c694:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	88db      	ldrh	r3, [r3, #6]
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	bf28      	it	cs
 800c69e:	2307      	movcs	r3, #7
 800c6a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	89fa      	ldrh	r2, [r7, #14]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f001 fd79 	bl	800e1a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c6ae:	e090      	b.n	800c7d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	785a      	ldrb	r2, [r3, #1]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	88db      	ldrh	r3, [r3, #6]
 800c6be:	2b3f      	cmp	r3, #63	; 0x3f
 800c6c0:	d803      	bhi.n	800c6ca <USBD_CDC_Setup+0xa6>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	88db      	ldrh	r3, [r3, #6]
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	e000      	b.n	800c6cc <USBD_CDC_Setup+0xa8>
 800c6ca:	2240      	movs	r2, #64	; 0x40
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6d2:	6939      	ldr	r1, [r7, #16]
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6da:	461a      	mov	r2, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 fd8b 	bl	800e1f8 <USBD_CtlPrepareRx>
      break;
 800c6e2:	e076      	b.n	800c7d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	33b0      	adds	r3, #176	; 0xb0
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	7850      	ldrb	r0, [r2, #1]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	4798      	blx	r3
      break;
 800c700:	e067      	b.n	800c7d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	2b0b      	cmp	r3, #11
 800c708:	d851      	bhi.n	800c7ae <USBD_CDC_Setup+0x18a>
 800c70a:	a201      	add	r2, pc, #4	; (adr r2, 800c710 <USBD_CDC_Setup+0xec>)
 800c70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c710:	0800c741 	.word	0x0800c741
 800c714:	0800c7bd 	.word	0x0800c7bd
 800c718:	0800c7af 	.word	0x0800c7af
 800c71c:	0800c7af 	.word	0x0800c7af
 800c720:	0800c7af 	.word	0x0800c7af
 800c724:	0800c7af 	.word	0x0800c7af
 800c728:	0800c7af 	.word	0x0800c7af
 800c72c:	0800c7af 	.word	0x0800c7af
 800c730:	0800c7af 	.word	0x0800c7af
 800c734:	0800c7af 	.word	0x0800c7af
 800c738:	0800c76b 	.word	0x0800c76b
 800c73c:	0800c795 	.word	0x0800c795
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b03      	cmp	r3, #3
 800c74a:	d107      	bne.n	800c75c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c74c:	f107 030a 	add.w	r3, r7, #10
 800c750:	2202      	movs	r2, #2
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 fd23 	bl	800e1a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c75a:	e032      	b.n	800c7c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f001 fcad 	bl	800e0be <USBD_CtlError>
            ret = USBD_FAIL;
 800c764:	2303      	movs	r3, #3
 800c766:	75fb      	strb	r3, [r7, #23]
          break;
 800c768:	e02b      	b.n	800c7c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b03      	cmp	r3, #3
 800c774:	d107      	bne.n	800c786 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c776:	f107 030d 	add.w	r3, r7, #13
 800c77a:	2201      	movs	r2, #1
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 fd0e 	bl	800e1a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c784:	e01d      	b.n	800c7c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 fc98 	bl	800e0be <USBD_CtlError>
            ret = USBD_FAIL;
 800c78e:	2303      	movs	r3, #3
 800c790:	75fb      	strb	r3, [r7, #23]
          break;
 800c792:	e016      	b.n	800c7c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b03      	cmp	r3, #3
 800c79e:	d00f      	beq.n	800c7c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 fc8b 	bl	800e0be <USBD_CtlError>
            ret = USBD_FAIL;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7ac:	e008      	b.n	800c7c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 fc84 	bl	800e0be <USBD_CtlError>
          ret = USBD_FAIL;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ba:	e002      	b.n	800c7c2 <USBD_CDC_Setup+0x19e>
          break;
 800c7bc:	bf00      	nop
 800c7be:	e008      	b.n	800c7d2 <USBD_CDC_Setup+0x1ae>
          break;
 800c7c0:	bf00      	nop
      }
      break;
 800c7c2:	e006      	b.n	800c7d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f001 fc79 	bl	800e0be <USBD_CtlError>
      ret = USBD_FAIL;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	32b0      	adds	r2, #176	; 0xb0
 800c7fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c802:	2303      	movs	r3, #3
 800c804:	e063      	b.n	800c8ce <USBD_CDC_DataIn+0xf2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	32b0      	adds	r2, #176	; 0xb0
 800c810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c814:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c816:	78fb      	ldrb	r3, [r7, #3]
 800c818:	f003 020f 	and.w	r2, r3, #15
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	440b      	add	r3, r1
 800c828:	3318      	adds	r3, #24
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d02f      	beq.n	800c890 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	f003 020f 	and.w	r2, r3, #15
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	440b      	add	r3, r1
 800c842:	3318      	adds	r3, #24
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	f003 010f 	and.w	r1, r3, #15
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	460b      	mov	r3, r1
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	440b      	add	r3, r1
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4403      	add	r3, r0
 800c858:	3348      	adds	r3, #72	; 0x48
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c860:	fb01 f303 	mul.w	r3, r1, r3
 800c864:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c866:	2b00      	cmp	r3, #0
 800c868:	d112      	bne.n	800c890 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c86a:	78fb      	ldrb	r3, [r7, #3]
 800c86c:	f003 020f 	and.w	r2, r3, #15
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	440b      	add	r3, r1
 800c87c:	3318      	adds	r3, #24
 800c87e:	2200      	movs	r2, #0
 800c880:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c882:	78f9      	ldrb	r1, [r7, #3]
 800c884:	2300      	movs	r3, #0
 800c886:	2200      	movs	r2, #0
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f002 f98a 	bl	800eba2 <USBD_LL_Transmit>
 800c88e:	e01d      	b.n	800c8cc <USBD_CDC_DataIn+0xf0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2200      	movs	r2, #0
 800c894:	655a      	str	r2, [r3, #84]	; 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	33b0      	adds	r3, #176	; 0xb0
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00f      	beq.n	800c8cc <USBD_CDC_DataIn+0xf0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	33b0      	adds	r3, #176	; 0xb0
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	f102 0150 	add.w	r1, r2, #80	; 0x50
 800c8c8:	78fa      	ldrb	r2, [r7, #3]
 800c8ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	460b      	mov	r3, r1
 800c8e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	32b0      	adds	r2, #176	; 0xb0
 800c8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	32b0      	adds	r2, #176	; 0xb0
 800c8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c904:	2303      	movs	r3, #3
 800c906:	e017      	b.n	800c938 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c908:	78fb      	ldrb	r3, [r7, #3]
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f002 f98a 	bl	800ec26 <USBD_LL_GetRxDataSize>
 800c912:	4602      	mov	r2, r0
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	33b0      	adds	r3, #176	; 0xb0
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	324c      	adds	r2, #76	; 0x4c
 800c932:	4611      	mov	r1, r2
 800c934:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	32b0      	adds	r2, #176	; 0xb0
 800c952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c956:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c95e:	2303      	movs	r3, #3
 800c960:	e025      	b.n	800c9ae <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	33b0      	adds	r3, #176	; 0xb0
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d01a      	beq.n	800c9ac <USBD_CDC_EP0_RxReady+0x6c>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c97c:	2bff      	cmp	r3, #255	; 0xff
 800c97e:	d015      	beq.n	800c9ac <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	33b0      	adds	r3, #176	; 0xb0
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                                     (uint8_t *)hcdc->data,
 800c998:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9a0:	b292      	uxth	r2, r2
 800c9a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	22ff      	movs	r2, #255	; 0xff
 800c9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return (uint8_t)USBD_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9c0:	2182      	movs	r1, #130	; 0x82
 800c9c2:	4818      	ldr	r0, [pc, #96]	; (800ca24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9c4:	f000 fd43 	bl	800d44e <USBD_GetEpDesc>
 800c9c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	4815      	ldr	r0, [pc, #84]	; (800ca24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9ce:	f000 fd3e 	bl	800d44e <USBD_GetEpDesc>
 800c9d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9d4:	2181      	movs	r1, #129	; 0x81
 800c9d6:	4813      	ldr	r0, [pc, #76]	; (800ca24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9d8:	f000 fd39 	bl	800d44e <USBD_GetEpDesc>
 800c9dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2210      	movs	r2, #16
 800c9e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d006      	beq.n	800c9fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9f8:	711a      	strb	r2, [r3, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d006      	beq.n	800ca12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca0c:	711a      	strb	r2, [r3, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2243      	movs	r2, #67	; 0x43
 800ca16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca18:	4b02      	ldr	r3, [pc, #8]	; (800ca24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	200000d8 	.word	0x200000d8

0800ca28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca30:	2182      	movs	r1, #130	; 0x82
 800ca32:	4818      	ldr	r0, [pc, #96]	; (800ca94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca34:	f000 fd0b 	bl	800d44e <USBD_GetEpDesc>
 800ca38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	4815      	ldr	r0, [pc, #84]	; (800ca94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca3e:	f000 fd06 	bl	800d44e <USBD_GetEpDesc>
 800ca42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca44:	2181      	movs	r1, #129	; 0x81
 800ca46:	4813      	ldr	r0, [pc, #76]	; (800ca94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca48:	f000 fd01 	bl	800d44e <USBD_GetEpDesc>
 800ca4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2210      	movs	r2, #16
 800ca58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d006      	beq.n	800ca6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca68:	711a      	strb	r2, [r3, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d006      	beq.n	800ca82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca7c:	711a      	strb	r2, [r3, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2243      	movs	r2, #67	; 0x43
 800ca86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca88:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	200000d8 	.word	0x200000d8

0800ca98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800caa0:	2182      	movs	r1, #130	; 0x82
 800caa2:	4818      	ldr	r0, [pc, #96]	; (800cb04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800caa4:	f000 fcd3 	bl	800d44e <USBD_GetEpDesc>
 800caa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800caaa:	2101      	movs	r1, #1
 800caac:	4815      	ldr	r0, [pc, #84]	; (800cb04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800caae:	f000 fcce 	bl	800d44e <USBD_GetEpDesc>
 800cab2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cab4:	2181      	movs	r1, #129	; 0x81
 800cab6:	4813      	ldr	r0, [pc, #76]	; (800cb04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cab8:	f000 fcc9 	bl	800d44e <USBD_GetEpDesc>
 800cabc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2210      	movs	r2, #16
 800cac8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cad8:	711a      	strb	r2, [r3, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caec:	711a      	strb	r2, [r3, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2243      	movs	r2, #67	; 0x43
 800caf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	200000d8 	.word	0x200000d8

0800cb08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	220a      	movs	r2, #10
 800cb14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb16:	4b03      	ldr	r3, [pc, #12]	; (800cb24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	20000094 	.word	0x20000094

0800cb28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e009      	b.n	800cb50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	33b0      	adds	r3, #176	; 0xb0
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	32b0      	adds	r2, #176	; 0xb0
 800cb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb76:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e006      	b.n	800cb90 <USBD_CDC_SetTxBuffer+0x34>
  }

  hcdc->TxBuffer = pbuff;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	371c      	adds	r7, #28
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	32b0      	adds	r2, #176	; 0xb0
 800cbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	e003      	b.n	800cbc8 <USBD_CDC_SetRxBuffer+0x2c>
  }

  hcdc->RxBuffer = pbuff;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3714      	adds	r7, #20
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	32b0      	adds	r2, #176	; 0xb0
 800cbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cbec:	2301      	movs	r3, #1
 800cbee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	32b0      	adds	r2, #176	; 0xb0
 800cbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e020      	b.n	800cc48 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d11b      	bne.n	800cc46 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2201      	movs	r2, #1
 800cc12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc14:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <USBD_CDC_TransmitPacket+0x7c>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 020f 	and.w	r2, r3, #15
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4403      	add	r3, r0
 800cc2c:	3318      	adds	r3, #24
 800cc2e:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc30:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <USBD_CDC_TransmitPacket+0x7c>)
 800cc32:	7819      	ldrb	r1, [r3, #0]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 ffb0 	bl	800eba2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	2000011b 	.word	0x2000011b

0800cc54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	32b0      	adds	r2, #176	; 0xb0
 800cc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	32b0      	adds	r2, #176	; 0xb0
 800cc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e015      	b.n	800ccae <USBD_CDC_ReceivePacket+0x5a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	7c1b      	ldrb	r3, [r3, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d108      	bne.n	800cc9c <USBD_CDC_ReceivePacket+0x48>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc8a:	4b0b      	ldr	r3, [pc, #44]	; (800ccb8 <USBD_CDC_ReceivePacket+0x64>)
 800cc8c:	7819      	ldrb	r1, [r3, #0]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc92:	2340      	movs	r3, #64	; 0x40
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f001 ffa5 	bl	800ebe4 <USBD_LL_PrepareReceive>
 800cc9a:	e007      	b.n	800ccac <USBD_CDC_ReceivePacket+0x58>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <USBD_CDC_ReceivePacket+0x64>)
 800cc9e:	7819      	ldrb	r1, [r3, #0]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f001 ff9c 	bl	800ebe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	2000011c 	.word	0x2000011c

0800ccbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e01f      	b.n	800cd14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	79fa      	ldrb	r2, [r7, #7]
 800cd06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f001 fe0f 	bl	800e92c <USBD_LL_Init>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e025      	b.n	800cd80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	32ae      	adds	r2, #174	; 0xae
 800cd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00f      	beq.n	800cd70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	32ae      	adds	r2, #174	; 0xae
 800cd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	f107 020e 	add.w	r2, r7, #14
 800cd64:	4610      	mov	r0, r2
 800cd66:	4798      	blx	r3
 800cd68:	4602      	mov	r2, r0
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 fe1d 	bl	800e9d0 <USBD_LL_Start>
 800cd96:	4603      	mov	r3, r0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cda8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	4798      	blx	r3
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce14:	2303      	movs	r3, #3
 800ce16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 f908 	bl	800e04a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce56:	f003 031f 	and.w	r3, r3, #31
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d01a      	beq.n	800ce94 <USBD_LL_SetupStage+0x72>
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d822      	bhi.n	800cea8 <USBD_LL_SetupStage+0x86>
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <USBD_LL_SetupStage+0x4a>
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d00a      	beq.n	800ce80 <USBD_LL_SetupStage+0x5e>
 800ce6a:	e01d      	b.n	800cea8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fb5f 	bl	800d538 <USBD_StdDevReq>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce7e:	e020      	b.n	800cec2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fbc7 	bl	800d61c <USBD_StdItfReq>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73fb      	strb	r3, [r7, #15]
      break;
 800ce92:	e016      	b.n	800cec2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fc29 	bl	800d6f4 <USBD_StdEPReq>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73fb      	strb	r3, [r7, #15]
      break;
 800cea6:	e00c      	b.n	800cec2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ceae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 fdea 	bl	800ea90 <USBD_LL_StallEP>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]
      break;
 800cec0:	bf00      	nop
  }

  return ret;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	460b      	mov	r3, r1
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cede:	7afb      	ldrb	r3, [r7, #11]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d16e      	bne.n	800cfc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ceea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	f040 8098 	bne.w	800d028 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d913      	bls.n	800cf2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	1ad2      	subs	r2, r2, r3
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	bf28      	it	cs
 800cf1e:	4613      	movcs	r3, r2
 800cf20:	461a      	mov	r2, r3
 800cf22:	6879      	ldr	r1, [r7, #4]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f001 f984 	bl	800e232 <USBD_CtlContinueRx>
 800cf2a:	e07d      	b.n	800d028 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf32:	f003 031f 	and.w	r3, r3, #31
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d014      	beq.n	800cf64 <USBD_LL_DataOutStage+0x98>
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d81d      	bhi.n	800cf7a <USBD_LL_DataOutStage+0xae>
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <USBD_LL_DataOutStage+0x7c>
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d003      	beq.n	800cf4e <USBD_LL_DataOutStage+0x82>
 800cf46:	e018      	b.n	800cf7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	75bb      	strb	r3, [r7, #22]
            break;
 800cf4c:	e018      	b.n	800cf80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	4619      	mov	r1, r3
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 fa5e 	bl	800d41a <USBD_CoreFindIF>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75bb      	strb	r3, [r7, #22]
            break;
 800cf62:	e00d      	b.n	800cf80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f000 fa60 	bl	800d434 <USBD_CoreFindEP>
 800cf74:	4603      	mov	r3, r0
 800cf76:	75bb      	strb	r3, [r7, #22]
            break;
 800cf78:	e002      	b.n	800cf80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75bb      	strb	r3, [r7, #22]
            break;
 800cf7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cf80:	7dbb      	ldrb	r3, [r7, #22]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d119      	bne.n	800cfba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	d113      	bne.n	800cfba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cf92:	7dba      	ldrb	r2, [r7, #22]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	32ae      	adds	r2, #174	; 0xae
 800cf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00b      	beq.n	800cfba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cfa2:	7dba      	ldrb	r2, [r7, #22]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cfaa:	7dba      	ldrb	r2, [r7, #22]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	32ae      	adds	r2, #174	; 0xae
 800cfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f001 f94a 	bl	800e254 <USBD_CtlSendStatus>
 800cfc0:	e032      	b.n	800d028 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cfc2:	7afb      	ldrb	r3, [r7, #11]
 800cfc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	4619      	mov	r1, r3
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 fa31 	bl	800d434 <USBD_CoreFindEP>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfd6:	7dbb      	ldrb	r3, [r7, #22]
 800cfd8:	2bff      	cmp	r3, #255	; 0xff
 800cfda:	d025      	beq.n	800d028 <USBD_LL_DataOutStage+0x15c>
 800cfdc:	7dbb      	ldrb	r3, [r7, #22]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d122      	bne.n	800d028 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d117      	bne.n	800d01e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cfee:	7dba      	ldrb	r2, [r7, #22]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	32ae      	adds	r2, #174	; 0xae
 800cff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00f      	beq.n	800d01e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cffe:	7dba      	ldrb	r2, [r7, #22]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d006:	7dba      	ldrb	r2, [r7, #22]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	32ae      	adds	r2, #174	; 0xae
 800d00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	7afa      	ldrb	r2, [r7, #11]
 800d014:	4611      	mov	r1, r2
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	4798      	blx	r3
 800d01a:	4603      	mov	r3, r0
 800d01c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	e000      	b.n	800d02a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b086      	sub	sp, #24
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	460b      	mov	r3, r1
 800d03c:	607a      	str	r2, [r7, #4]
 800d03e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d16f      	bne.n	800d126 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3314      	adds	r3, #20
 800d04a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d052:	2b02      	cmp	r3, #2
 800d054:	d15a      	bne.n	800d10c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	689a      	ldr	r2, [r3, #8]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d914      	bls.n	800d08c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	689a      	ldr	r2, [r3, #8]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	1ad2      	subs	r2, r2, r3
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	461a      	mov	r2, r3
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f001 f8ac 	bl	800e1d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d07e:	2300      	movs	r3, #0
 800d080:	2200      	movs	r2, #0
 800d082:	2100      	movs	r1, #0
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f001 fdad 	bl	800ebe4 <USBD_LL_PrepareReceive>
 800d08a:	e03f      	b.n	800d10c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	68da      	ldr	r2, [r3, #12]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	429a      	cmp	r2, r3
 800d096:	d11c      	bne.n	800d0d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d316      	bcc.n	800d0d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d20f      	bcs.n	800d0d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f001 f88d 	bl	800e1d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f001 fd8a 	bl	800ebe4 <USBD_LL_PrepareReceive>
 800d0d0:	e01c      	b.n	800d10c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d10f      	bne.n	800d0fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d009      	beq.n	800d0fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0fe:	2180      	movs	r1, #128	; 0x80
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f001 fcc5 	bl	800ea90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f001 f8b7 	bl	800e27a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d03a      	beq.n	800d18c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7ff fe42 	bl	800cda0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d124:	e032      	b.n	800d18c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d126:	7afb      	ldrb	r3, [r7, #11]
 800d128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	4619      	mov	r1, r3
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f000 f97f 	bl	800d434 <USBD_CoreFindEP>
 800d136:	4603      	mov	r3, r0
 800d138:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	2bff      	cmp	r3, #255	; 0xff
 800d13e:	d025      	beq.n	800d18c <USBD_LL_DataInStage+0x15a>
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d122      	bne.n	800d18c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d11c      	bne.n	800d18c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d152:	7dfa      	ldrb	r2, [r7, #23]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	32ae      	adds	r2, #174	; 0xae
 800d158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d014      	beq.n	800d18c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d162:	7dfa      	ldrb	r2, [r7, #23]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d16a:	7dfa      	ldrb	r2, [r7, #23]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	32ae      	adds	r2, #174	; 0xae
 800d170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	7afa      	ldrb	r2, [r7, #11]
 800d178:	4611      	mov	r1, r2
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	4798      	blx	r3
 800d17e:	4603      	mov	r3, r0
 800d180:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d182:	7dbb      	ldrb	r3, [r7, #22]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d188:	7dbb      	ldrb	r3, [r7, #22]
 800d18a:	e000      	b.n	800d18e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3718      	adds	r7, #24
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d014      	beq.n	800d1fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00e      	beq.n	800d1fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	6852      	ldr	r2, [r2, #4]
 800d1ea:	b2d2      	uxtb	r2, r2
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	4798      	blx	r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	2200      	movs	r2, #0
 800d200:	2100      	movs	r1, #0
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fbff 	bl	800ea06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2240      	movs	r2, #64	; 0x40
 800d214:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	2200      	movs	r2, #0
 800d21c:	2180      	movs	r1, #128	; 0x80
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f001 fbf1 	bl	800ea06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2240      	movs	r2, #64	; 0x40
 800d22e:	621a      	str	r2, [r3, #32]

  return ret;
 800d230:	7bfb      	ldrb	r3, [r7, #15]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	460b      	mov	r3, r1
 800d244:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	78fa      	ldrb	r2, [r7, #3]
 800d24a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2204      	movs	r2, #4
 800d274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b04      	cmp	r3, #4
 800d298:	d106      	bne.n	800d2a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d110      	bne.n	800d2ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00b      	beq.n	800d2ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2da:	69db      	ldr	r3, [r3, #28]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	460b      	mov	r3, r1
 800d300:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	32ae      	adds	r2, #174	; 0xae
 800d30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d314:	2303      	movs	r3, #3
 800d316:	e01c      	b.n	800d352 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b03      	cmp	r3, #3
 800d322:	d115      	bne.n	800d350 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	32ae      	adds	r2, #174	; 0xae
 800d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00b      	beq.n	800d350 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	32ae      	adds	r2, #174	; 0xae
 800d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d346:	6a1b      	ldr	r3, [r3, #32]
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	4611      	mov	r1, r2
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	460b      	mov	r3, r1
 800d364:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	32ae      	adds	r2, #174	; 0xae
 800d370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d378:	2303      	movs	r3, #3
 800d37a:	e01c      	b.n	800d3b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b03      	cmp	r3, #3
 800d386:	d115      	bne.n	800d3b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	32ae      	adds	r2, #174	; 0xae
 800d392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00b      	beq.n	800d3b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	32ae      	adds	r2, #174	; 0xae
 800d3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	78fa      	ldrb	r2, [r7, #3]
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00e      	beq.n	800d410 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	6852      	ldr	r2, [r2, #4]
 800d3fe:	b2d2      	uxtb	r2, r2
 800d400:	4611      	mov	r1, r2
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	4798      	blx	r3
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d40c:	2303      	movs	r3, #3
 800d40e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d410:	7bfb      	ldrb	r3, [r7, #15]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d426:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d428:	4618      	mov	r0, r3
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d440:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d442:	4618      	mov	r0, r3
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b086      	sub	sp, #24
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	885b      	ldrh	r3, [r3, #2]
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b29b      	uxth	r3, r3
 800d472:	429a      	cmp	r2, r3
 800d474:	d920      	bls.n	800d4b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d47e:	e013      	b.n	800d4a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d480:	f107 030a 	add.w	r3, r7, #10
 800d484:	4619      	mov	r1, r3
 800d486:	6978      	ldr	r0, [r7, #20]
 800d488:	f000 f81b 	bl	800d4c2 <USBD_GetNextDesc>
 800d48c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2b05      	cmp	r3, #5
 800d494:	d108      	bne.n	800d4a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	789b      	ldrb	r3, [r3, #2]
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d008      	beq.n	800d4b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	885b      	ldrh	r3, [r3, #2]
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	897b      	ldrh	r3, [r7, #10]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d8e5      	bhi.n	800d480 <USBD_GetEpDesc+0x32>
 800d4b4:	e000      	b.n	800d4b8 <USBD_GetEpDesc+0x6a>
          break;
 800d4b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d4b8:	693b      	ldr	r3, [r7, #16]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b085      	sub	sp, #20
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	881a      	ldrh	r2, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	4413      	add	r3, r2
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	3301      	adds	r3, #1
 800d512:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d51a:	8a3b      	ldrh	r3, [r7, #16]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	b21a      	sxth	r2, r3
 800d520:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d524:	4313      	orrs	r3, r2
 800d526:	b21b      	sxth	r3, r3
 800d528:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d52a:	89fb      	ldrh	r3, [r7, #14]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	371c      	adds	r7, #28
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d54e:	2b40      	cmp	r3, #64	; 0x40
 800d550:	d005      	beq.n	800d55e <USBD_StdDevReq+0x26>
 800d552:	2b40      	cmp	r3, #64	; 0x40
 800d554:	d857      	bhi.n	800d606 <USBD_StdDevReq+0xce>
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00f      	beq.n	800d57a <USBD_StdDevReq+0x42>
 800d55a:	2b20      	cmp	r3, #32
 800d55c:	d153      	bne.n	800d606 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	32ae      	adds	r2, #174	; 0xae
 800d568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	4798      	blx	r3
 800d574:	4603      	mov	r3, r0
 800d576:	73fb      	strb	r3, [r7, #15]
      break;
 800d578:	e04a      	b.n	800d610 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	2b09      	cmp	r3, #9
 800d580:	d83b      	bhi.n	800d5fa <USBD_StdDevReq+0xc2>
 800d582:	a201      	add	r2, pc, #4	; (adr r2, 800d588 <USBD_StdDevReq+0x50>)
 800d584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d588:	0800d5dd 	.word	0x0800d5dd
 800d58c:	0800d5f1 	.word	0x0800d5f1
 800d590:	0800d5fb 	.word	0x0800d5fb
 800d594:	0800d5e7 	.word	0x0800d5e7
 800d598:	0800d5fb 	.word	0x0800d5fb
 800d59c:	0800d5bb 	.word	0x0800d5bb
 800d5a0:	0800d5b1 	.word	0x0800d5b1
 800d5a4:	0800d5fb 	.word	0x0800d5fb
 800d5a8:	0800d5d3 	.word	0x0800d5d3
 800d5ac:	0800d5c5 	.word	0x0800d5c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fa3c 	bl	800da30 <USBD_GetDescriptor>
          break;
 800d5b8:	e024      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fba1 	bl	800dd04 <USBD_SetAddress>
          break;
 800d5c2:	e01f      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fbe0 	bl	800dd8c <USBD_SetConfig>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]
          break;
 800d5d0:	e018      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d5d2:	6839      	ldr	r1, [r7, #0]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fc83 	bl	800dee0 <USBD_GetConfig>
          break;
 800d5da:	e013      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fcb4 	bl	800df4c <USBD_GetStatus>
          break;
 800d5e4:	e00e      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fce3 	bl	800dfb4 <USBD_SetFeature>
          break;
 800d5ee:	e009      	b.n	800d604 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fd07 	bl	800e006 <USBD_ClrFeature>
          break;
 800d5f8:	e004      	b.n	800d604 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fd5e 	bl	800e0be <USBD_CtlError>
          break;
 800d602:	bf00      	nop
      }
      break;
 800d604:	e004      	b.n	800d610 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fd58 	bl	800e0be <USBD_CtlError>
      break;
 800d60e:	bf00      	nop
  }

  return ret;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop

0800d61c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d632:	2b40      	cmp	r3, #64	; 0x40
 800d634:	d005      	beq.n	800d642 <USBD_StdItfReq+0x26>
 800d636:	2b40      	cmp	r3, #64	; 0x40
 800d638:	d852      	bhi.n	800d6e0 <USBD_StdItfReq+0xc4>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <USBD_StdItfReq+0x26>
 800d63e:	2b20      	cmp	r3, #32
 800d640:	d14e      	bne.n	800d6e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	3b01      	subs	r3, #1
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d840      	bhi.n	800d6d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	889b      	ldrh	r3, [r3, #4]
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b01      	cmp	r3, #1
 800d658:	d836      	bhi.n	800d6c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	889b      	ldrh	r3, [r3, #4]
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff fed9 	bl	800d41a <USBD_CoreFindIF>
 800d668:	4603      	mov	r3, r0
 800d66a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
 800d66e:	2bff      	cmp	r3, #255	; 0xff
 800d670:	d01d      	beq.n	800d6ae <USBD_StdItfReq+0x92>
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11a      	bne.n	800d6ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d678:	7bba      	ldrb	r2, [r7, #14]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	32ae      	adds	r2, #174	; 0xae
 800d67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d00f      	beq.n	800d6a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d688:	7bba      	ldrb	r2, [r7, #14]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d690:	7bba      	ldrb	r2, [r7, #14]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	32ae      	adds	r2, #174	; 0xae
 800d696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	4798      	blx	r3
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6a6:	e004      	b.n	800d6b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6ac:	e001      	b.n	800d6b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	88db      	ldrh	r3, [r3, #6]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d110      	bne.n	800d6dc <USBD_StdItfReq+0xc0>
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10d      	bne.n	800d6dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fdc7 	bl	800e254 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6c6:	e009      	b.n	800d6dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fcf7 	bl	800e0be <USBD_CtlError>
          break;
 800d6d0:	e004      	b.n	800d6dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fcf2 	bl	800e0be <USBD_CtlError>
          break;
 800d6da:	e000      	b.n	800d6de <USBD_StdItfReq+0xc2>
          break;
 800d6dc:	bf00      	nop
      }
      break;
 800d6de:	e004      	b.n	800d6ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fceb 	bl	800e0be <USBD_CtlError>
      break;
 800d6e8:	bf00      	nop
  }

  return ret;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	889b      	ldrh	r3, [r3, #4]
 800d706:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d710:	2b40      	cmp	r3, #64	; 0x40
 800d712:	d007      	beq.n	800d724 <USBD_StdEPReq+0x30>
 800d714:	2b40      	cmp	r3, #64	; 0x40
 800d716:	f200 817f 	bhi.w	800da18 <USBD_StdEPReq+0x324>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02a      	beq.n	800d774 <USBD_StdEPReq+0x80>
 800d71e:	2b20      	cmp	r3, #32
 800d720:	f040 817a 	bne.w	800da18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d724:	7bbb      	ldrb	r3, [r7, #14]
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff fe83 	bl	800d434 <USBD_CoreFindEP>
 800d72e:	4603      	mov	r3, r0
 800d730:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d732:	7b7b      	ldrb	r3, [r7, #13]
 800d734:	2bff      	cmp	r3, #255	; 0xff
 800d736:	f000 8174 	beq.w	800da22 <USBD_StdEPReq+0x32e>
 800d73a:	7b7b      	ldrb	r3, [r7, #13]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8170 	bne.w	800da22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d742:	7b7a      	ldrb	r2, [r7, #13]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d74a:	7b7a      	ldrb	r2, [r7, #13]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	32ae      	adds	r2, #174	; 0xae
 800d750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 8163 	beq.w	800da22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d75c:	7b7a      	ldrb	r2, [r7, #13]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	32ae      	adds	r2, #174	; 0xae
 800d762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d772:	e156      	b.n	800da22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	785b      	ldrb	r3, [r3, #1]
 800d778:	2b03      	cmp	r3, #3
 800d77a:	d008      	beq.n	800d78e <USBD_StdEPReq+0x9a>
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	f300 8145 	bgt.w	800da0c <USBD_StdEPReq+0x318>
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 809b 	beq.w	800d8be <USBD_StdEPReq+0x1ca>
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d03c      	beq.n	800d806 <USBD_StdEPReq+0x112>
 800d78c:	e13e      	b.n	800da0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b02      	cmp	r3, #2
 800d798:	d002      	beq.n	800d7a0 <USBD_StdEPReq+0xac>
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d016      	beq.n	800d7cc <USBD_StdEPReq+0xd8>
 800d79e:	e02c      	b.n	800d7fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00d      	beq.n	800d7c2 <USBD_StdEPReq+0xce>
 800d7a6:	7bbb      	ldrb	r3, [r7, #14]
 800d7a8:	2b80      	cmp	r3, #128	; 0x80
 800d7aa:	d00a      	beq.n	800d7c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7ac:	7bbb      	ldrb	r3, [r7, #14]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f001 f96d 	bl	800ea90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7b6:	2180      	movs	r1, #128	; 0x80
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 f969 	bl	800ea90 <USBD_LL_StallEP>
 800d7be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7c0:	e020      	b.n	800d804 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fc7a 	bl	800e0be <USBD_CtlError>
              break;
 800d7ca:	e01b      	b.n	800d804 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	885b      	ldrh	r3, [r3, #2]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10e      	bne.n	800d7f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d7d4:	7bbb      	ldrb	r3, [r7, #14]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <USBD_StdEPReq+0xfe>
 800d7da:	7bbb      	ldrb	r3, [r7, #14]
 800d7dc:	2b80      	cmp	r3, #128	; 0x80
 800d7de:	d008      	beq.n	800d7f2 <USBD_StdEPReq+0xfe>
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	88db      	ldrh	r3, [r3, #6]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d104      	bne.n	800d7f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f001 f94f 	bl	800ea90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fd2e 	bl	800e254 <USBD_CtlSendStatus>

              break;
 800d7f8:	e004      	b.n	800d804 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fc5e 	bl	800e0be <USBD_CtlError>
              break;
 800d802:	bf00      	nop
          }
          break;
 800d804:	e107      	b.n	800da16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d002      	beq.n	800d818 <USBD_StdEPReq+0x124>
 800d812:	2b03      	cmp	r3, #3
 800d814:	d016      	beq.n	800d844 <USBD_StdEPReq+0x150>
 800d816:	e04b      	b.n	800d8b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d818:	7bbb      	ldrb	r3, [r7, #14]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00d      	beq.n	800d83a <USBD_StdEPReq+0x146>
 800d81e:	7bbb      	ldrb	r3, [r7, #14]
 800d820:	2b80      	cmp	r3, #128	; 0x80
 800d822:	d00a      	beq.n	800d83a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d824:	7bbb      	ldrb	r3, [r7, #14]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 f931 	bl	800ea90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d82e:	2180      	movs	r1, #128	; 0x80
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 f92d 	bl	800ea90 <USBD_LL_StallEP>
 800d836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d838:	e040      	b.n	800d8bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fc3e 	bl	800e0be <USBD_CtlError>
              break;
 800d842:	e03b      	b.n	800d8bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	885b      	ldrh	r3, [r3, #2]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d136      	bne.n	800d8ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d84c:	7bbb      	ldrb	r3, [r7, #14]
 800d84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d852:	2b00      	cmp	r3, #0
 800d854:	d004      	beq.n	800d860 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d856:	7bbb      	ldrb	r3, [r7, #14]
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f001 f937 	bl	800eace <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fcf7 	bl	800e254 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fde2 	bl	800d434 <USBD_CoreFindEP>
 800d870:	4603      	mov	r3, r0
 800d872:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d874:	7b7b      	ldrb	r3, [r7, #13]
 800d876:	2bff      	cmp	r3, #255	; 0xff
 800d878:	d01f      	beq.n	800d8ba <USBD_StdEPReq+0x1c6>
 800d87a:	7b7b      	ldrb	r3, [r7, #13]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d11c      	bne.n	800d8ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d880:	7b7a      	ldrb	r2, [r7, #13]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d888:	7b7a      	ldrb	r2, [r7, #13]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	32ae      	adds	r2, #174	; 0xae
 800d88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d010      	beq.n	800d8ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d898:	7b7a      	ldrb	r2, [r7, #13]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	32ae      	adds	r2, #174	; 0xae
 800d89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	4798      	blx	r3
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d8ae:	e004      	b.n	800d8ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 fc03 	bl	800e0be <USBD_CtlError>
              break;
 800d8b8:	e000      	b.n	800d8bc <USBD_StdEPReq+0x1c8>
              break;
 800d8ba:	bf00      	nop
          }
          break;
 800d8bc:	e0ab      	b.n	800da16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d002      	beq.n	800d8d0 <USBD_StdEPReq+0x1dc>
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d032      	beq.n	800d934 <USBD_StdEPReq+0x240>
 800d8ce:	e097      	b.n	800da00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8d0:	7bbb      	ldrb	r3, [r7, #14]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d007      	beq.n	800d8e6 <USBD_StdEPReq+0x1f2>
 800d8d6:	7bbb      	ldrb	r3, [r7, #14]
 800d8d8:	2b80      	cmp	r3, #128	; 0x80
 800d8da:	d004      	beq.n	800d8e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fbed 	bl	800e0be <USBD_CtlError>
                break;
 800d8e4:	e091      	b.n	800da0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	da0b      	bge.n	800d906 <USBD_StdEPReq+0x212>
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
 800d8f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	3310      	adds	r3, #16
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	4413      	add	r3, r2
 800d902:	3304      	adds	r3, #4
 800d904:	e00b      	b.n	800d91e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d906:	7bbb      	ldrb	r3, [r7, #14]
 800d908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	4413      	add	r3, r2
 800d91c:	3304      	adds	r3, #4
 800d91e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2202      	movs	r2, #2
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fc37 	bl	800e1a0 <USBD_CtlSendData>
              break;
 800d932:	e06a      	b.n	800da0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	da11      	bge.n	800d960 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	f003 020f 	and.w	r2, r3, #15
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	4613      	mov	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	440b      	add	r3, r1
 800d94e:	3324      	adds	r3, #36	; 0x24
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d117      	bne.n	800d986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d956:	6839      	ldr	r1, [r7, #0]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fbb0 	bl	800e0be <USBD_CtlError>
                  break;
 800d95e:	e054      	b.n	800da0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d960:	7bbb      	ldrb	r3, [r7, #14]
 800d962:	f003 020f 	and.w	r2, r3, #15
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	440b      	add	r3, r1
 800d972:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d104      	bne.n	800d986 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d97c:	6839      	ldr	r1, [r7, #0]
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fb9d 	bl	800e0be <USBD_CtlError>
                  break;
 800d984:	e041      	b.n	800da0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	da0b      	bge.n	800d9a6 <USBD_StdEPReq+0x2b2>
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
 800d990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d994:	4613      	mov	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	3310      	adds	r3, #16
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	e00b      	b.n	800d9be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	3304      	adds	r3, #4
 800d9be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d9c0:	7bbb      	ldrb	r3, [r7, #14]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <USBD_StdEPReq+0x2d8>
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b80      	cmp	r3, #128	; 0x80
 800d9ca:	d103      	bne.n	800d9d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e00e      	b.n	800d9f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f001 f897 	bl	800eb0c <USBD_LL_IsStallEP>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e002      	b.n	800d9f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fbd1 	bl	800e1a0 <USBD_CtlSendData>
              break;
 800d9fe:	e004      	b.n	800da0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 fb5b 	bl	800e0be <USBD_CtlError>
              break;
 800da08:	bf00      	nop
          }
          break;
 800da0a:	e004      	b.n	800da16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fb55 	bl	800e0be <USBD_CtlError>
          break;
 800da14:	bf00      	nop
      }
      break;
 800da16:	e005      	b.n	800da24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fb4f 	bl	800e0be <USBD_CtlError>
      break;
 800da20:	e000      	b.n	800da24 <USBD_StdEPReq+0x330>
      break;
 800da22:	bf00      	nop
  }

  return ret;
 800da24:	7bfb      	ldrb	r3, [r7, #15]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da3a:	2300      	movs	r3, #0
 800da3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da3e:	2300      	movs	r3, #0
 800da40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da42:	2300      	movs	r3, #0
 800da44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	885b      	ldrh	r3, [r3, #2]
 800da4a:	0a1b      	lsrs	r3, r3, #8
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	3b01      	subs	r3, #1
 800da50:	2b06      	cmp	r3, #6
 800da52:	f200 8128 	bhi.w	800dca6 <USBD_GetDescriptor+0x276>
 800da56:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <USBD_GetDescriptor+0x2c>)
 800da58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5c:	0800da79 	.word	0x0800da79
 800da60:	0800da91 	.word	0x0800da91
 800da64:	0800dad1 	.word	0x0800dad1
 800da68:	0800dca7 	.word	0x0800dca7
 800da6c:	0800dca7 	.word	0x0800dca7
 800da70:	0800dc47 	.word	0x0800dc47
 800da74:	0800dc73 	.word	0x0800dc73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	7c12      	ldrb	r2, [r2, #16]
 800da84:	f107 0108 	add.w	r1, r7, #8
 800da88:	4610      	mov	r0, r2
 800da8a:	4798      	blx	r3
 800da8c:	60f8      	str	r0, [r7, #12]
      break;
 800da8e:	e112      	b.n	800dcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	7c1b      	ldrb	r3, [r3, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10d      	bne.n	800dab4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa0:	f107 0208 	add.w	r2, r7, #8
 800daa4:	4610      	mov	r0, r2
 800daa6:	4798      	blx	r3
 800daa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	2202      	movs	r2, #2
 800dab0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dab2:	e100      	b.n	800dcb6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabc:	f107 0208 	add.w	r2, r7, #8
 800dac0:	4610      	mov	r0, r2
 800dac2:	4798      	blx	r3
 800dac4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3301      	adds	r3, #1
 800daca:	2202      	movs	r2, #2
 800dacc:	701a      	strb	r2, [r3, #0]
      break;
 800dace:	e0f2      	b.n	800dcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	885b      	ldrh	r3, [r3, #2]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b05      	cmp	r3, #5
 800dad8:	f200 80ac 	bhi.w	800dc34 <USBD_GetDescriptor+0x204>
 800dadc:	a201      	add	r2, pc, #4	; (adr r2, 800dae4 <USBD_GetDescriptor+0xb4>)
 800dade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae2:	bf00      	nop
 800dae4:	0800dafd 	.word	0x0800dafd
 800dae8:	0800db31 	.word	0x0800db31
 800daec:	0800db65 	.word	0x0800db65
 800daf0:	0800db99 	.word	0x0800db99
 800daf4:	0800dbcd 	.word	0x0800dbcd
 800daf8:	0800dc01 	.word	0x0800dc01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	7c12      	ldrb	r2, [r2, #16]
 800db14:	f107 0108 	add.w	r1, r7, #8
 800db18:	4610      	mov	r0, r2
 800db1a:	4798      	blx	r3
 800db1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db1e:	e091      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db20:	6839      	ldr	r1, [r7, #0]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 facb 	bl	800e0be <USBD_CtlError>
            err++;
 800db28:	7afb      	ldrb	r3, [r7, #11]
 800db2a:	3301      	adds	r3, #1
 800db2c:	72fb      	strb	r3, [r7, #11]
          break;
 800db2e:	e089      	b.n	800dc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00b      	beq.n	800db54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	7c12      	ldrb	r2, [r2, #16]
 800db48:	f107 0108 	add.w	r1, r7, #8
 800db4c:	4610      	mov	r0, r2
 800db4e:	4798      	blx	r3
 800db50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db52:	e077      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fab1 	bl	800e0be <USBD_CtlError>
            err++;
 800db5c:	7afb      	ldrb	r3, [r7, #11]
 800db5e:	3301      	adds	r3, #1
 800db60:	72fb      	strb	r3, [r7, #11]
          break;
 800db62:	e06f      	b.n	800dc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00b      	beq.n	800db88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	7c12      	ldrb	r2, [r2, #16]
 800db7c:	f107 0108 	add.w	r1, r7, #8
 800db80:	4610      	mov	r0, r2
 800db82:	4798      	blx	r3
 800db84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db86:	e05d      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fa97 	bl	800e0be <USBD_CtlError>
            err++;
 800db90:	7afb      	ldrb	r3, [r7, #11]
 800db92:	3301      	adds	r3, #1
 800db94:	72fb      	strb	r3, [r7, #11]
          break;
 800db96:	e055      	b.n	800dc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00b      	beq.n	800dbbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	7c12      	ldrb	r2, [r2, #16]
 800dbb0:	f107 0108 	add.w	r1, r7, #8
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
 800dbb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbba:	e043      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fa7d 	bl	800e0be <USBD_CtlError>
            err++;
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbca:	e03b      	b.n	800dc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	7c12      	ldrb	r2, [r2, #16]
 800dbe4:	f107 0108 	add.w	r1, r7, #8
 800dbe8:	4610      	mov	r0, r2
 800dbea:	4798      	blx	r3
 800dbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbee:	e029      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fa63 	bl	800e0be <USBD_CtlError>
            err++;
 800dbf8:	7afb      	ldrb	r3, [r7, #11]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbfe:	e021      	b.n	800dc44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc06:	699b      	ldr	r3, [r3, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7c12      	ldrb	r2, [r2, #16]
 800dc18:	f107 0108 	add.w	r1, r7, #8
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
 800dc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc22:	e00f      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 fa49 	bl	800e0be <USBD_CtlError>
            err++;
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	72fb      	strb	r3, [r7, #11]
          break;
 800dc32:	e007      	b.n	800dc44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fa41 	bl	800e0be <USBD_CtlError>
          err++;
 800dc3c:	7afb      	ldrb	r3, [r7, #11]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dc42:	bf00      	nop
      }
      break;
 800dc44:	e037      	b.n	800dcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	7c1b      	ldrb	r3, [r3, #16]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d109      	bne.n	800dc62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	f107 0208 	add.w	r2, r7, #8
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	4798      	blx	r3
 800dc5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc60:	e029      	b.n	800dcb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 fa2a 	bl	800e0be <USBD_CtlError>
        err++;
 800dc6a:	7afb      	ldrb	r3, [r7, #11]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	72fb      	strb	r3, [r7, #11]
      break;
 800dc70:	e021      	b.n	800dcb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7c1b      	ldrb	r3, [r3, #16]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10d      	bne.n	800dc96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc82:	f107 0208 	add.w	r2, r7, #8
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
 800dc8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	2207      	movs	r2, #7
 800dc92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc94:	e00f      	b.n	800dcb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fa10 	bl	800e0be <USBD_CtlError>
        err++;
 800dc9e:	7afb      	ldrb	r3, [r7, #11]
 800dca0:	3301      	adds	r3, #1
 800dca2:	72fb      	strb	r3, [r7, #11]
      break;
 800dca4:	e007      	b.n	800dcb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fa08 	bl	800e0be <USBD_CtlError>
      err++;
 800dcae:	7afb      	ldrb	r3, [r7, #11]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	72fb      	strb	r3, [r7, #11]
      break;
 800dcb4:	bf00      	nop
  }

  if (err != 0U)
 800dcb6:	7afb      	ldrb	r3, [r7, #11]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d11e      	bne.n	800dcfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	88db      	ldrh	r3, [r3, #6]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d016      	beq.n	800dcf2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dcc4:	893b      	ldrh	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00e      	beq.n	800dce8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	88da      	ldrh	r2, [r3, #6]
 800dcce:	893b      	ldrh	r3, [r7, #8]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	bf28      	it	cs
 800dcd4:	4613      	movcs	r3, r2
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dcda:	893b      	ldrh	r3, [r7, #8]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	68f9      	ldr	r1, [r7, #12]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fa5d 	bl	800e1a0 <USBD_CtlSendData>
 800dce6:	e009      	b.n	800dcfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f9e7 	bl	800e0be <USBD_CtlError>
 800dcf0:	e004      	b.n	800dcfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 faae 	bl	800e254 <USBD_CtlSendStatus>
 800dcf8:	e000      	b.n	800dcfc <USBD_GetDescriptor+0x2cc>
    return;
 800dcfa:	bf00      	nop
  }
}
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop

0800dd04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	889b      	ldrh	r3, [r3, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d131      	bne.n	800dd7a <USBD_SetAddress+0x76>
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	88db      	ldrh	r3, [r3, #6]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d12d      	bne.n	800dd7a <USBD_SetAddress+0x76>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	885b      	ldrh	r3, [r3, #2]
 800dd22:	2b7f      	cmp	r3, #127	; 0x7f
 800dd24:	d829      	bhi.n	800dd7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	885b      	ldrh	r3, [r3, #2]
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d104      	bne.n	800dd48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f9bc 	bl	800e0be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd46:	e01d      	b.n	800dd84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7bfa      	ldrb	r2, [r7, #15]
 800dd4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 ff05 	bl	800eb64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fa7a 	bl	800e254 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d004      	beq.n	800dd70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2202      	movs	r2, #2
 800dd6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd6e:	e009      	b.n	800dd84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd78:	e004      	b.n	800dd84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f99e 	bl	800e0be <USBD_CtlError>
  }
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	885b      	ldrh	r3, [r3, #2]
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	4b4e      	ldr	r3, [pc, #312]	; (800dedc <USBD_SetConfig+0x150>)
 800dda2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dda4:	4b4d      	ldr	r3, [pc, #308]	; (800dedc <USBD_SetConfig+0x150>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d905      	bls.n	800ddb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f985 	bl	800e0be <USBD_CtlError>
    return USBD_FAIL;
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	e08c      	b.n	800ded2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d002      	beq.n	800ddca <USBD_SetConfig+0x3e>
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d029      	beq.n	800de1c <USBD_SetConfig+0x90>
 800ddc8:	e075      	b.n	800deb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddca:	4b44      	ldr	r3, [pc, #272]	; (800dedc <USBD_SetConfig+0x150>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d020      	beq.n	800de14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ddd2:	4b42      	ldr	r3, [pc, #264]	; (800dedc <USBD_SetConfig+0x150>)
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dddc:	4b3f      	ldr	r3, [pc, #252]	; (800dedc <USBD_SetConfig+0x150>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7fe ffe7 	bl	800cdb6 <USBD_SetClassConfig>
 800dde8:	4603      	mov	r3, r0
 800ddea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d008      	beq.n	800de04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 f962 	bl	800e0be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de02:	e065      	b.n	800ded0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fa25 	bl	800e254 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2203      	movs	r2, #3
 800de0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de12:	e05d      	b.n	800ded0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fa1d 	bl	800e254 <USBD_CtlSendStatus>
      break;
 800de1a:	e059      	b.n	800ded0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de1c:	4b2f      	ldr	r3, [pc, #188]	; (800dedc <USBD_SetConfig+0x150>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d112      	bne.n	800de4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2202      	movs	r2, #2
 800de28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de2c:	4b2b      	ldr	r3, [pc, #172]	; (800dedc <USBD_SetConfig+0x150>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de36:	4b29      	ldr	r3, [pc, #164]	; (800dedc <USBD_SetConfig+0x150>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7fe ffd6 	bl	800cdee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa06 	bl	800e254 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de48:	e042      	b.n	800ded0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800de4a:	4b24      	ldr	r3, [pc, #144]	; (800dedc <USBD_SetConfig+0x150>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	d02a      	beq.n	800deae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f7fe ffc4 	bl	800cdee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de66:	4b1d      	ldr	r3, [pc, #116]	; (800dedc <USBD_SetConfig+0x150>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de70:	4b1a      	ldr	r3, [pc, #104]	; (800dedc <USBD_SetConfig+0x150>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7fe ff9d 	bl	800cdb6 <USBD_SetClassConfig>
 800de7c:	4603      	mov	r3, r0
 800de7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00f      	beq.n	800dea6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f918 	bl	800e0be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	b2db      	uxtb	r3, r3
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7fe ffa9 	bl	800cdee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2202      	movs	r2, #2
 800dea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dea4:	e014      	b.n	800ded0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f9d4 	bl	800e254 <USBD_CtlSendStatus>
      break;
 800deac:	e010      	b.n	800ded0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f9d0 	bl	800e254 <USBD_CtlSendStatus>
      break;
 800deb4:	e00c      	b.n	800ded0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 f900 	bl	800e0be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800debe:	4b07      	ldr	r3, [pc, #28]	; (800dedc <USBD_SetConfig+0x150>)
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7fe ff92 	bl	800cdee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	73fb      	strb	r3, [r7, #15]
      break;
 800dece:	bf00      	nop
  }

  return ret;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	2000468c 	.word	0x2000468c

0800dee0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	88db      	ldrh	r3, [r3, #6]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d004      	beq.n	800defc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f8e2 	bl	800e0be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800defa:	e023      	b.n	800df44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df02:	b2db      	uxtb	r3, r3
 800df04:	2b02      	cmp	r3, #2
 800df06:	dc02      	bgt.n	800df0e <USBD_GetConfig+0x2e>
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dc03      	bgt.n	800df14 <USBD_GetConfig+0x34>
 800df0c:	e015      	b.n	800df3a <USBD_GetConfig+0x5a>
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d00b      	beq.n	800df2a <USBD_GetConfig+0x4a>
 800df12:	e012      	b.n	800df3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3308      	adds	r3, #8
 800df1e:	2201      	movs	r2, #1
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f93c 	bl	800e1a0 <USBD_CtlSendData>
        break;
 800df28:	e00c      	b.n	800df44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3304      	adds	r3, #4
 800df2e:	2201      	movs	r2, #1
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f934 	bl	800e1a0 <USBD_CtlSendData>
        break;
 800df38:	e004      	b.n	800df44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f8be 	bl	800e0be <USBD_CtlError>
        break;
 800df42:	bf00      	nop
}
 800df44:	bf00      	nop
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	3b01      	subs	r3, #1
 800df60:	2b02      	cmp	r3, #2
 800df62:	d81e      	bhi.n	800dfa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	88db      	ldrh	r3, [r3, #6]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d004      	beq.n	800df76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f8a5 	bl	800e0be <USBD_CtlError>
        break;
 800df74:	e01a      	b.n	800dfac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2201      	movs	r2, #1
 800df7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f043 0202 	orr.w	r2, r3, #2
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	330c      	adds	r3, #12
 800df96:	2202      	movs	r2, #2
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f900 	bl	800e1a0 <USBD_CtlSendData>
      break;
 800dfa0:	e004      	b.n	800dfac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 f88a 	bl	800e0be <USBD_CtlError>
      break;
 800dfaa:	bf00      	nop
  }
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d107      	bne.n	800dfd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f940 	bl	800e254 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dfd4:	e013      	b.n	800dffe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d10b      	bne.n	800dff6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	889b      	ldrh	r3, [r3, #4]
 800dfe2:	0a1b      	lsrs	r3, r3, #8
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 f930 	bl	800e254 <USBD_CtlSendStatus>
}
 800dff4:	e003      	b.n	800dffe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 f860 	bl	800e0be <USBD_CtlError>
}
 800dffe:	bf00      	nop
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e016:	b2db      	uxtb	r3, r3
 800e018:	3b01      	subs	r3, #1
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d80b      	bhi.n	800e036 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	885b      	ldrh	r3, [r3, #2]
 800e022:	2b01      	cmp	r3, #1
 800e024:	d10c      	bne.n	800e040 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f910 	bl	800e254 <USBD_CtlSendStatus>
      }
      break;
 800e034:	e004      	b.n	800e040 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f840 	bl	800e0be <USBD_CtlError>
      break;
 800e03e:	e000      	b.n	800e042 <USBD_ClrFeature+0x3c>
      break;
 800e040:	bf00      	nop
  }
}
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	781a      	ldrb	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3301      	adds	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	781a      	ldrb	r2, [r3, #0]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3301      	adds	r3, #1
 800e072:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7ff fa41 	bl	800d4fc <SWAPBYTE>
 800e07a:	4603      	mov	r3, r0
 800e07c:	461a      	mov	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	3301      	adds	r3, #1
 800e086:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3301      	adds	r3, #1
 800e08c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f7ff fa34 	bl	800d4fc <SWAPBYTE>
 800e094:	4603      	mov	r3, r0
 800e096:	461a      	mov	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f7ff fa27 	bl	800d4fc <SWAPBYTE>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	80da      	strh	r2, [r3, #6]
}
 800e0b6:	bf00      	nop
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0c8:	2180      	movs	r1, #128	; 0x80
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fce0 	bl	800ea90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fcdc 	bl	800ea90 <USBD_LL_StallEP>
}
 800e0d8:	bf00      	nop
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d036      	beq.n	800e164 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e0fa:	6938      	ldr	r0, [r7, #16]
 800e0fc:	f000 f836 	bl	800e16c <USBD_GetLen>
 800e100:	4603      	mov	r3, r0
 800e102:	3301      	adds	r3, #1
 800e104:	b29b      	uxth	r3, r3
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	4413      	add	r3, r2
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	7812      	ldrb	r2, [r2, #0]
 800e118:	701a      	strb	r2, [r3, #0]
  idx++;
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	3301      	adds	r3, #1
 800e11e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	4413      	add	r3, r2
 800e126:	2203      	movs	r2, #3
 800e128:	701a      	strb	r2, [r3, #0]
  idx++;
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	3301      	adds	r3, #1
 800e12e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e130:	e013      	b.n	800e15a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	4413      	add	r3, r2
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	7812      	ldrb	r2, [r2, #0]
 800e13c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3301      	adds	r3, #1
 800e142:	613b      	str	r3, [r7, #16]
    idx++;
 800e144:	7dfb      	ldrb	r3, [r7, #23]
 800e146:	3301      	adds	r3, #1
 800e148:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	4413      	add	r3, r2
 800e150:	2200      	movs	r2, #0
 800e152:	701a      	strb	r2, [r3, #0]
    idx++;
 800e154:	7dfb      	ldrb	r3, [r7, #23]
 800e156:	3301      	adds	r3, #1
 800e158:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d1e7      	bne.n	800e132 <USBD_GetString+0x52>
 800e162:	e000      	b.n	800e166 <USBD_GetString+0x86>
    return;
 800e164:	bf00      	nop
  }
}
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e17c:	e005      	b.n	800e18a <USBD_GetLen+0x1e>
  {
    len++;
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	3301      	adds	r3, #1
 800e182:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	3301      	adds	r3, #1
 800e188:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1f5      	bne.n	800e17e <USBD_GetLen+0x12>
  }

  return len;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f000 fceb 	bl	800eba2 <USBD_LL_Transmit>

  return USBD_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f000 fcda 	bl	800eba2 <USBD_LL_Transmit>

  return USBD_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2203      	movs	r2, #3
 800e208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	2100      	movs	r1, #0
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fcde 	bl	800ebe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	2100      	movs	r1, #0
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 fccd 	bl	800ebe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2204      	movs	r2, #4
 800e260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e264:	2300      	movs	r3, #0
 800e266:	2200      	movs	r2, #0
 800e268:	2100      	movs	r1, #0
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fc99 	bl	800eba2 <USBD_LL_Transmit>

  return USBD_OK;
 800e270:	2300      	movs	r3, #0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2205      	movs	r2, #5
 800e286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e28a:	2300      	movs	r3, #0
 800e28c:	2200      	movs	r2, #0
 800e28e:	2100      	movs	r1, #0
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fca7 	bl	800ebe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	4912      	ldr	r1, [pc, #72]	; (800e2f0 <MX_USB_DEVICE_Init+0x50>)
 800e2a8:	4812      	ldr	r0, [pc, #72]	; (800e2f4 <MX_USB_DEVICE_Init+0x54>)
 800e2aa:	f7fe fd07 	bl	800ccbc <USBD_Init>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e2b4:	f7f3 fb62 	bl	800197c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e2b8:	490f      	ldr	r1, [pc, #60]	; (800e2f8 <MX_USB_DEVICE_Init+0x58>)
 800e2ba:	480e      	ldr	r0, [pc, #56]	; (800e2f4 <MX_USB_DEVICE_Init+0x54>)
 800e2bc:	f7fe fd2e 	bl	800cd1c <USBD_RegisterClass>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e2c6:	f7f3 fb59 	bl	800197c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e2ca:	490c      	ldr	r1, [pc, #48]	; (800e2fc <MX_USB_DEVICE_Init+0x5c>)
 800e2cc:	4809      	ldr	r0, [pc, #36]	; (800e2f4 <MX_USB_DEVICE_Init+0x54>)
 800e2ce:	f7fe fc2b 	bl	800cb28 <USBD_CDC_RegisterInterface>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d001      	beq.n	800e2dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e2d8:	f7f3 fb50 	bl	800197c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e2dc:	4805      	ldr	r0, [pc, #20]	; (800e2f4 <MX_USB_DEVICE_Init+0x54>)
 800e2de:	f7fe fd53 	bl	800cd88 <USBD_Start>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e2e8:	f7f3 fb48 	bl	800197c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e2ec:	bf00      	nop
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20000134 	.word	0x20000134
 800e2f4:	20004690 	.word	0x20004690
 800e2f8:	200000a0 	.word	0x200000a0
 800e2fc:	20000120 	.word	0x20000120

0800e300 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e304:	2200      	movs	r2, #0
 800e306:	4905      	ldr	r1, [pc, #20]	; (800e31c <CDC_Init_HS+0x1c>)
 800e308:	4805      	ldr	r0, [pc, #20]	; (800e320 <CDC_Init_HS+0x20>)
 800e30a:	f7fe fc27 	bl	800cb5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e30e:	4905      	ldr	r1, [pc, #20]	; (800e324 <CDC_Init_HS+0x24>)
 800e310:	4803      	ldr	r0, [pc, #12]	; (800e320 <CDC_Init_HS+0x20>)
 800e312:	f7fe fc43 	bl	800cb9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e316:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e318:	4618      	mov	r0, r3
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	2000516c 	.word	0x2000516c
 800e320:	20004690 	.word	0x20004690
 800e324:	2000496c 	.word	0x2000496c

0800e328 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e32c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e32e:	4618      	mov	r0, r3
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
 800e344:	4613      	mov	r3, r2
 800e346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	2b23      	cmp	r3, #35	; 0x23
 800e34c:	d84a      	bhi.n	800e3e4 <CDC_Control_HS+0xac>
 800e34e:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <CDC_Control_HS+0x1c>)
 800e350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e354:	0800e3e5 	.word	0x0800e3e5
 800e358:	0800e3e5 	.word	0x0800e3e5
 800e35c:	0800e3e5 	.word	0x0800e3e5
 800e360:	0800e3e5 	.word	0x0800e3e5
 800e364:	0800e3e5 	.word	0x0800e3e5
 800e368:	0800e3e5 	.word	0x0800e3e5
 800e36c:	0800e3e5 	.word	0x0800e3e5
 800e370:	0800e3e5 	.word	0x0800e3e5
 800e374:	0800e3e5 	.word	0x0800e3e5
 800e378:	0800e3e5 	.word	0x0800e3e5
 800e37c:	0800e3e5 	.word	0x0800e3e5
 800e380:	0800e3e5 	.word	0x0800e3e5
 800e384:	0800e3e5 	.word	0x0800e3e5
 800e388:	0800e3e5 	.word	0x0800e3e5
 800e38c:	0800e3e5 	.word	0x0800e3e5
 800e390:	0800e3e5 	.word	0x0800e3e5
 800e394:	0800e3e5 	.word	0x0800e3e5
 800e398:	0800e3e5 	.word	0x0800e3e5
 800e39c:	0800e3e5 	.word	0x0800e3e5
 800e3a0:	0800e3e5 	.word	0x0800e3e5
 800e3a4:	0800e3e5 	.word	0x0800e3e5
 800e3a8:	0800e3e5 	.word	0x0800e3e5
 800e3ac:	0800e3e5 	.word	0x0800e3e5
 800e3b0:	0800e3e5 	.word	0x0800e3e5
 800e3b4:	0800e3e5 	.word	0x0800e3e5
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	0800e3e5 	.word	0x0800e3e5
 800e3c0:	0800e3e5 	.word	0x0800e3e5
 800e3c4:	0800e3e5 	.word	0x0800e3e5
 800e3c8:	0800e3e5 	.word	0x0800e3e5
 800e3cc:	0800e3e5 	.word	0x0800e3e5
 800e3d0:	0800e3e5 	.word	0x0800e3e5
 800e3d4:	0800e3e5 	.word	0x0800e3e5
 800e3d8:	0800e3e5 	.word	0x0800e3e5
 800e3dc:	0800e3e5 	.word	0x0800e3e5
 800e3e0:	0800e3e5 	.word	0x0800e3e5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e3e4:	bf00      	nop
  }

  return (USBD_OK);
 800e3e6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	4805      	ldr	r0, [pc, #20]	; (800e418 <CDC_Receive_HS+0x24>)
 800e402:	f7fe fbcb 	bl	800cb9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e406:	4804      	ldr	r0, [pc, #16]	; (800e418 <CDC_Receive_HS+0x24>)
 800e408:	f7fe fc24 	bl	800cc54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e40c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20004690 	.word	0x20004690

0800e41c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e42c:	4b0c      	ldr	r3, [pc, #48]	; (800e460 <CDC_Transmit_HS+0x44>)
 800e42e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e432:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <CDC_Transmit_HS+0x24>
    return USBD_BUSY;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e00b      	b.n	800e458 <CDC_Transmit_HS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e440:	887b      	ldrh	r3, [r7, #2]
 800e442:	461a      	mov	r2, r3
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	4806      	ldr	r0, [pc, #24]	; (800e460 <CDC_Transmit_HS+0x44>)
 800e448:	f7fe fb88 	bl	800cb5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e44c:	4804      	ldr	r0, [pc, #16]	; (800e460 <CDC_Transmit_HS+0x44>)
 800e44e:	f7fe fbc1 	bl	800cbd4 <USBD_CDC_TransmitPacket>
 800e452:	4603      	mov	r3, r0
 800e454:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20004690 	.word	0x20004690

0800e464 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e464:	b480      	push	{r7}
 800e466:	b087      	sub	sp, #28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4613      	mov	r3, r2
 800e470:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	371c      	adds	r7, #28
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
	...

0800e488 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	6039      	str	r1, [r7, #0]
 800e492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2212      	movs	r2, #18
 800e498:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e49a:	4b03      	ldr	r3, [pc, #12]	; (800e4a8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	20000150 	.word	0x20000150

0800e4ac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	6039      	str	r1, [r7, #0]
 800e4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e4be:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20000164 	.word	0x20000164

0800e4d0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	6039      	str	r1, [r7, #0]
 800e4da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d105      	bne.n	800e4ee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	4907      	ldr	r1, [pc, #28]	; (800e504 <USBD_HS_ProductStrDescriptor+0x34>)
 800e4e6:	4808      	ldr	r0, [pc, #32]	; (800e508 <USBD_HS_ProductStrDescriptor+0x38>)
 800e4e8:	f7ff fdfa 	bl	800e0e0 <USBD_GetString>
 800e4ec:	e004      	b.n	800e4f8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	4904      	ldr	r1, [pc, #16]	; (800e504 <USBD_HS_ProductStrDescriptor+0x34>)
 800e4f2:	4805      	ldr	r0, [pc, #20]	; (800e508 <USBD_HS_ProductStrDescriptor+0x38>)
 800e4f4:	f7ff fdf4 	bl	800e0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4f8:	4b02      	ldr	r3, [pc, #8]	; (800e504 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	2000596c 	.word	0x2000596c
 800e508:	08011c20 	.word	0x08011c20

0800e50c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	4603      	mov	r3, r0
 800e514:	6039      	str	r1, [r7, #0]
 800e516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	4904      	ldr	r1, [pc, #16]	; (800e52c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e51c:	4804      	ldr	r0, [pc, #16]	; (800e530 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e51e:	f7ff fddf 	bl	800e0e0 <USBD_GetString>
  return USBD_StrDesc;
 800e522:	4b02      	ldr	r3, [pc, #8]	; (800e52c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	2000596c 	.word	0x2000596c
 800e530:	08011c38 	.word	0x08011c38

0800e534 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	221a      	movs	r2, #26
 800e544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e546:	f000 f843 	bl	800e5d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e54a:	4b02      	ldr	r3, [pc, #8]	; (800e554 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20000168 	.word	0x20000168

0800e558 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	6039      	str	r1, [r7, #0]
 800e562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	4907      	ldr	r1, [pc, #28]	; (800e58c <USBD_HS_ConfigStrDescriptor+0x34>)
 800e56e:	4808      	ldr	r0, [pc, #32]	; (800e590 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e570:	f7ff fdb6 	bl	800e0e0 <USBD_GetString>
 800e574:	e004      	b.n	800e580 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	4904      	ldr	r1, [pc, #16]	; (800e58c <USBD_HS_ConfigStrDescriptor+0x34>)
 800e57a:	4805      	ldr	r0, [pc, #20]	; (800e590 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e57c:	f7ff fdb0 	bl	800e0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e582:	4618      	mov	r0, r3
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	2000596c 	.word	0x2000596c
 800e590:	08011c4c 	.word	0x08011c4c

0800e594 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	6039      	str	r1, [r7, #0]
 800e59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d105      	bne.n	800e5b2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	4907      	ldr	r1, [pc, #28]	; (800e5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e5aa:	4808      	ldr	r0, [pc, #32]	; (800e5cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e5ac:	f7ff fd98 	bl	800e0e0 <USBD_GetString>
 800e5b0:	e004      	b.n	800e5bc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	4904      	ldr	r1, [pc, #16]	; (800e5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e5b6:	4805      	ldr	r0, [pc, #20]	; (800e5cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e5b8:	f7ff fd92 	bl	800e0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5bc:	4b02      	ldr	r3, [pc, #8]	; (800e5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	2000596c 	.word	0x2000596c
 800e5cc:	08011c58 	.word	0x08011c58

0800e5d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e5d6:	4b0f      	ldr	r3, [pc, #60]	; (800e614 <Get_SerialNum+0x44>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5dc:	4b0e      	ldr	r3, [pc, #56]	; (800e618 <Get_SerialNum+0x48>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5e2:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <Get_SerialNum+0x4c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d009      	beq.n	800e60a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5f6:	2208      	movs	r2, #8
 800e5f8:	4909      	ldr	r1, [pc, #36]	; (800e620 <Get_SerialNum+0x50>)
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 f814 	bl	800e628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e600:	2204      	movs	r2, #4
 800e602:	4908      	ldr	r1, [pc, #32]	; (800e624 <Get_SerialNum+0x54>)
 800e604:	68b8      	ldr	r0, [r7, #8]
 800e606:	f000 f80f 	bl	800e628 <IntToUnicode>
  }
}
 800e60a:	bf00      	nop
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	1fff7a10 	.word	0x1fff7a10
 800e618:	1fff7a14 	.word	0x1fff7a14
 800e61c:	1fff7a18 	.word	0x1fff7a18
 800e620:	2000016a 	.word	0x2000016a
 800e624:	2000017a 	.word	0x2000017a

0800e628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e628:	b480      	push	{r7}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	4613      	mov	r3, r2
 800e634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e63a:	2300      	movs	r3, #0
 800e63c:	75fb      	strb	r3, [r7, #23]
 800e63e:	e027      	b.n	800e690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	0f1b      	lsrs	r3, r3, #28
 800e644:	2b09      	cmp	r3, #9
 800e646:	d80b      	bhi.n	800e660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	0f1b      	lsrs	r3, r3, #28
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	4619      	mov	r1, r3
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	440b      	add	r3, r1
 800e658:	3230      	adds	r2, #48	; 0x30
 800e65a:	b2d2      	uxtb	r2, r2
 800e65c:	701a      	strb	r2, [r3, #0]
 800e65e:	e00a      	b.n	800e676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	0f1b      	lsrs	r3, r3, #28
 800e664:	b2da      	uxtb	r2, r3
 800e666:	7dfb      	ldrb	r3, [r7, #23]
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	4619      	mov	r1, r3
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	440b      	add	r3, r1
 800e670:	3237      	adds	r2, #55	; 0x37
 800e672:	b2d2      	uxtb	r2, r2
 800e674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	011b      	lsls	r3, r3, #4
 800e67a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e67c:	7dfb      	ldrb	r3, [r7, #23]
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	3301      	adds	r3, #1
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	4413      	add	r3, r2
 800e686:	2200      	movs	r2, #0
 800e688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e68a:	7dfb      	ldrb	r3, [r7, #23]
 800e68c:	3301      	adds	r3, #1
 800e68e:	75fb      	strb	r3, [r7, #23]
 800e690:	7dfa      	ldrb	r2, [r7, #23]
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	429a      	cmp	r2, r3
 800e696:	d3d3      	bcc.n	800e640 <IntToUnicode+0x18>
  }
}
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	371c      	adds	r7, #28
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
	...

0800e6a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	; 0x28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6b0:	f107 0314 	add.w	r3, r7, #20
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
 800e6b8:	605a      	str	r2, [r3, #4]
 800e6ba:	609a      	str	r2, [r3, #8]
 800e6bc:	60da      	str	r2, [r3, #12]
 800e6be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a1d      	ldr	r2, [pc, #116]	; (800e73c <HAL_PCD_MspInit+0x94>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d134      	bne.n	800e734 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	613b      	str	r3, [r7, #16]
 800e6ce:	4b1c      	ldr	r3, [pc, #112]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	4a1b      	ldr	r2, [pc, #108]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e6d4:	f043 0302 	orr.w	r3, r3, #2
 800e6d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e6da:	4b19      	ldr	r3, [pc, #100]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6de:	f003 0302 	and.w	r3, r3, #2
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e6e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e6ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6ec:	2302      	movs	r3, #2
 800e6ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e6f8:	230c      	movs	r3, #12
 800e6fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6fc:	f107 0314 	add.w	r3, r7, #20
 800e700:	4619      	mov	r1, r3
 800e702:	4810      	ldr	r0, [pc, #64]	; (800e744 <HAL_PCD_MspInit+0x9c>)
 800e704:	f7f6 f85c 	bl	80047c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e708:	2300      	movs	r3, #0
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e710:	4a0b      	ldr	r2, [pc, #44]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e716:	6313      	str	r3, [r2, #48]	; 0x30
 800e718:	4b09      	ldr	r3, [pc, #36]	; (800e740 <HAL_PCD_MspInit+0x98>)
 800e71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e724:	2200      	movs	r2, #0
 800e726:	2105      	movs	r1, #5
 800e728:	204d      	movs	r0, #77	; 0x4d
 800e72a:	f7f5 fb9b 	bl	8003e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e72e:	204d      	movs	r0, #77	; 0x4d
 800e730:	f7f5 fbb4 	bl	8003e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e734:	bf00      	nop
 800e736:	3728      	adds	r7, #40	; 0x28
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	40040000 	.word	0x40040000
 800e740:	40023800 	.word	0x40023800
 800e744:	40020400 	.word	0x40020400

0800e748 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e75c:	4619      	mov	r1, r3
 800e75e:	4610      	mov	r0, r2
 800e760:	f7fe fb5f 	bl	800ce22 <USBD_LL_SetupStage>
}
 800e764:	bf00      	nop
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e77e:	78fa      	ldrb	r2, [r7, #3]
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	4613      	mov	r3, r2
 800e784:	00db      	lsls	r3, r3, #3
 800e786:	4413      	add	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	440b      	add	r3, r1
 800e78c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	78fb      	ldrb	r3, [r7, #3]
 800e794:	4619      	mov	r1, r3
 800e796:	f7fe fb99 	bl	800cecc <USBD_LL_DataOutStage>
}
 800e79a:	bf00      	nop
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7b4:	78fa      	ldrb	r2, [r7, #3]
 800e7b6:	6879      	ldr	r1, [r7, #4]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	4413      	add	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	440b      	add	r3, r1
 800e7c2:	334c      	adds	r3, #76	; 0x4c
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	78fb      	ldrb	r3, [r7, #3]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	f7fe fc32 	bl	800d032 <USBD_LL_DataInStage>
}
 800e7ce:	bf00      	nop
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b082      	sub	sp, #8
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fd66 	bl	800d2b6 <USBD_LL_SOF>
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d102      	bne.n	800e80c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e806:	2300      	movs	r3, #0
 800e808:	73fb      	strb	r3, [r7, #15]
 800e80a:	e008      	b.n	800e81e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	2b02      	cmp	r3, #2
 800e812:	d102      	bne.n	800e81a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e814:	2301      	movs	r3, #1
 800e816:	73fb      	strb	r3, [r7, #15]
 800e818:	e001      	b.n	800e81e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e81a:	f7f3 f8af 	bl	800197c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e824:	7bfa      	ldrb	r2, [r7, #15]
 800e826:	4611      	mov	r1, r2
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fe fd06 	bl	800d23a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe fcae 	bl	800d196 <USBD_LL_Reset>
}
 800e83a:	bf00      	nop
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe fd01 	bl	800d25a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	6812      	ldr	r2, [r2, #0]
 800e866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e86a:	f043 0301 	orr.w	r3, r3, #1
 800e86e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a1b      	ldr	r3, [r3, #32]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e878:	4b04      	ldr	r3, [pc, #16]	; (800e88c <HAL_PCD_SuspendCallback+0x48>)
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	4a03      	ldr	r2, [pc, #12]	; (800e88c <HAL_PCD_SuspendCallback+0x48>)
 800e87e:	f043 0306 	orr.w	r3, r3, #6
 800e882:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e884:	bf00      	nop
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	e000ed00 	.word	0xe000ed00

0800e890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe fcf1 	bl	800d286 <USBD_LL_Resume>
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8be:	78fa      	ldrb	r2, [r7, #3]
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe fd49 	bl	800d35a <USBD_LL_IsoOUTIncomplete>
}
 800e8c8:	bf00      	nop
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8e2:	78fa      	ldrb	r2, [r7, #3]
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fd05 	bl	800d2f6 <USBD_LL_IsoINIncomplete>
}
 800e8ec:	bf00      	nop
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fd5b 	bl	800d3be <USBD_LL_DevConnected>
}
 800e908:	bf00      	nop
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fd58 	bl	800d3d4 <USBD_LL_DevDisconnected>
}
 800e924:	bf00      	nop
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d140      	bne.n	800e9be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e93c:	4a22      	ldr	r2, [pc, #136]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e948:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e94c:	4b1e      	ldr	r3, [pc, #120]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e94e:	4a1f      	ldr	r2, [pc, #124]	; (800e9cc <USBD_LL_Init+0xa0>)
 800e950:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e952:	4b1d      	ldr	r3, [pc, #116]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e954:	2206      	movs	r2, #6
 800e956:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e958:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e95a:	2202      	movs	r2, #2
 800e95c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e95e:	4b1a      	ldr	r3, [pc, #104]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e960:	2200      	movs	r2, #0
 800e962:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e964:	4b18      	ldr	r3, [pc, #96]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e966:	2202      	movs	r2, #2
 800e968:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e96a:	4b17      	ldr	r3, [pc, #92]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e970:	4b15      	ldr	r3, [pc, #84]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e972:	2200      	movs	r2, #0
 800e974:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e976:	4b14      	ldr	r3, [pc, #80]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e978:	2200      	movs	r2, #0
 800e97a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e97c:	4b12      	ldr	r3, [pc, #72]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e97e:	2200      	movs	r2, #0
 800e980:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e982:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e984:	2200      	movs	r2, #0
 800e986:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e988:	4b0f      	ldr	r3, [pc, #60]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e98e:	480e      	ldr	r0, [pc, #56]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e990:	f7f6 fcc1 	bl	8005316 <HAL_PCD_Init>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e99a:	f7f2 ffef 	bl	800197c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e99e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9a2:	4809      	ldr	r0, [pc, #36]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e9a4:	f7f7 ff17 	bl	80067d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e9a8:	2280      	movs	r2, #128	; 0x80
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	4806      	ldr	r0, [pc, #24]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e9ae:	f7f7 fecb 	bl	8006748 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e9b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e9b6:	2101      	movs	r1, #1
 800e9b8:	4803      	ldr	r0, [pc, #12]	; (800e9c8 <USBD_LL_Init+0x9c>)
 800e9ba:	f7f7 fec5 	bl	8006748 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	20005b6c 	.word	0x20005b6c
 800e9cc:	40040000 	.word	0x40040000

0800e9d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f6 fdb2 	bl	8005550 <HAL_PCD_Start>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 f942 	bl	800ec7c <USBD_Get_USB_Status>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	4608      	mov	r0, r1
 800ea10:	4611      	mov	r1, r2
 800ea12:	461a      	mov	r2, r3
 800ea14:	4603      	mov	r3, r0
 800ea16:	70fb      	strb	r3, [r7, #3]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	70bb      	strb	r3, [r7, #2]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea2e:	78bb      	ldrb	r3, [r7, #2]
 800ea30:	883a      	ldrh	r2, [r7, #0]
 800ea32:	78f9      	ldrb	r1, [r7, #3]
 800ea34:	f7f7 fa83 	bl	8005f3e <HAL_PCD_EP_Open>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f91c 	bl	800ec7c <USBD_Get_USB_Status>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea62:	2300      	movs	r3, #0
 800ea64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea6c:	78fa      	ldrb	r2, [r7, #3]
 800ea6e:	4611      	mov	r1, r2
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f7 facc 	bl	800600e <HAL_PCD_EP_Close>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 f8fd 	bl	800ec7c <USBD_Get_USB_Status>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f7 fba4 	bl	80061fc <HAL_PCD_EP_SetStall>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 f8de 	bl	800ec7c <USBD_Get_USB_Status>
 800eac0:	4603      	mov	r3, r0
 800eac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b084      	sub	sp, #16
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
 800ead6:	460b      	mov	r3, r1
 800ead8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eae8:	78fa      	ldrb	r2, [r7, #3]
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f7 fbe9 	bl	80062c4 <HAL_PCD_EP_ClrStall>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaf6:	7bfb      	ldrb	r3, [r7, #15]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 f8bf 	bl	800ec7c <USBD_Get_USB_Status>
 800eafe:	4603      	mov	r3, r0
 800eb00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	da0b      	bge.n	800eb40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb2e:	68f9      	ldr	r1, [r7, #12]
 800eb30:	4613      	mov	r3, r2
 800eb32:	00db      	lsls	r3, r3, #3
 800eb34:	4413      	add	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	440b      	add	r3, r1
 800eb3a:	333e      	adds	r3, #62	; 0x3e
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	e00b      	b.n	800eb58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb46:	68f9      	ldr	r1, [r7, #12]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	4413      	add	r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	440b      	add	r3, r1
 800eb52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eb56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb7e:	78fa      	ldrb	r2, [r7, #3]
 800eb80:	4611      	mov	r1, r2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7f7 f9b6 	bl	8005ef4 <HAL_PCD_SetAddress>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb8c:	7bfb      	ldrb	r3, [r7, #15]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f000 f874 	bl	800ec7c <USBD_Get_USB_Status>
 800eb94:	4603      	mov	r3, r0
 800eb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b086      	sub	sp, #24
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	60f8      	str	r0, [r7, #12]
 800ebaa:	607a      	str	r2, [r7, #4]
 800ebac:	603b      	str	r3, [r7, #0]
 800ebae:	460b      	mov	r3, r1
 800ebb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebc0:	7af9      	ldrb	r1, [r7, #11]
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	f7f7 facf 	bl	8006168 <HAL_PCD_EP_Transmit>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 f853 	bl	800ec7c <USBD_Get_USB_Status>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebda:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	607a      	str	r2, [r7, #4]
 800ebee:	603b      	str	r3, [r7, #0]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec02:	7af9      	ldrb	r1, [r7, #11]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	f7f7 fa4b 	bl	80060a2 <HAL_PCD_EP_Receive>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 f832 	bl	800ec7c <USBD_Get_USB_Status>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b082      	sub	sp, #8
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	460b      	mov	r3, r1
 800ec30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec38:	78fa      	ldrb	r2, [r7, #3]
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f7 fa7b 	bl	8006138 <HAL_PCD_EP_GetRxCount>
 800ec42:	4603      	mov	r3, r0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec54:	4b03      	ldr	r3, [pc, #12]	; (800ec64 <USBD_static_malloc+0x18>)
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	370c      	adds	r7, #12
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	20006078 	.word	0x20006078

0800ec68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]

}
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	4603      	mov	r3, r0
 800ec84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec8a:	79fb      	ldrb	r3, [r7, #7]
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d817      	bhi.n	800ecc0 <USBD_Get_USB_Status+0x44>
 800ec90:	a201      	add	r2, pc, #4	; (adr r2, 800ec98 <USBD_Get_USB_Status+0x1c>)
 800ec92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec96:	bf00      	nop
 800ec98:	0800eca9 	.word	0x0800eca9
 800ec9c:	0800ecaf 	.word	0x0800ecaf
 800eca0:	0800ecb5 	.word	0x0800ecb5
 800eca4:	0800ecbb 	.word	0x0800ecbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecac:	e00b      	b.n	800ecc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb2:	e008      	b.n	800ecc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb8:	e005      	b.n	800ecc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecbe:	e002      	b.n	800ecc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc4:	bf00      	nop
  }
  return usb_status;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <__errno>:
 800ecd4:	4b01      	ldr	r3, [pc, #4]	; (800ecdc <__errno+0x8>)
 800ecd6:	6818      	ldr	r0, [r3, #0]
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	20000184 	.word	0x20000184

0800ece0 <__libc_init_array>:
 800ece0:	b570      	push	{r4, r5, r6, lr}
 800ece2:	4d0d      	ldr	r5, [pc, #52]	; (800ed18 <__libc_init_array+0x38>)
 800ece4:	4c0d      	ldr	r4, [pc, #52]	; (800ed1c <__libc_init_array+0x3c>)
 800ece6:	1b64      	subs	r4, r4, r5
 800ece8:	10a4      	asrs	r4, r4, #2
 800ecea:	2600      	movs	r6, #0
 800ecec:	42a6      	cmp	r6, r4
 800ecee:	d109      	bne.n	800ed04 <__libc_init_array+0x24>
 800ecf0:	4d0b      	ldr	r5, [pc, #44]	; (800ed20 <__libc_init_array+0x40>)
 800ecf2:	4c0c      	ldr	r4, [pc, #48]	; (800ed24 <__libc_init_array+0x44>)
 800ecf4:	f002 ff02 	bl	8011afc <_init>
 800ecf8:	1b64      	subs	r4, r4, r5
 800ecfa:	10a4      	asrs	r4, r4, #2
 800ecfc:	2600      	movs	r6, #0
 800ecfe:	42a6      	cmp	r6, r4
 800ed00:	d105      	bne.n	800ed0e <__libc_init_array+0x2e>
 800ed02:	bd70      	pop	{r4, r5, r6, pc}
 800ed04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed08:	4798      	blx	r3
 800ed0a:	3601      	adds	r6, #1
 800ed0c:	e7ee      	b.n	800ecec <__libc_init_array+0xc>
 800ed0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed12:	4798      	blx	r3
 800ed14:	3601      	adds	r6, #1
 800ed16:	e7f2      	b.n	800ecfe <__libc_init_array+0x1e>
 800ed18:	080149fc 	.word	0x080149fc
 800ed1c:	080149fc 	.word	0x080149fc
 800ed20:	080149fc 	.word	0x080149fc
 800ed24:	08014a00 	.word	0x08014a00

0800ed28 <memcpy>:
 800ed28:	440a      	add	r2, r1
 800ed2a:	4291      	cmp	r1, r2
 800ed2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed30:	d100      	bne.n	800ed34 <memcpy+0xc>
 800ed32:	4770      	bx	lr
 800ed34:	b510      	push	{r4, lr}
 800ed36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed3e:	4291      	cmp	r1, r2
 800ed40:	d1f9      	bne.n	800ed36 <memcpy+0xe>
 800ed42:	bd10      	pop	{r4, pc}

0800ed44 <memset>:
 800ed44:	4402      	add	r2, r0
 800ed46:	4603      	mov	r3, r0
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d100      	bne.n	800ed4e <memset+0xa>
 800ed4c:	4770      	bx	lr
 800ed4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed52:	e7f9      	b.n	800ed48 <memset+0x4>

0800ed54 <__cvt>:
 800ed54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed58:	ec55 4b10 	vmov	r4, r5, d0
 800ed5c:	2d00      	cmp	r5, #0
 800ed5e:	460e      	mov	r6, r1
 800ed60:	4619      	mov	r1, r3
 800ed62:	462b      	mov	r3, r5
 800ed64:	bfbb      	ittet	lt
 800ed66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed6a:	461d      	movlt	r5, r3
 800ed6c:	2300      	movge	r3, #0
 800ed6e:	232d      	movlt	r3, #45	; 0x2d
 800ed70:	700b      	strb	r3, [r1, #0]
 800ed72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed78:	4691      	mov	r9, r2
 800ed7a:	f023 0820 	bic.w	r8, r3, #32
 800ed7e:	bfbc      	itt	lt
 800ed80:	4622      	movlt	r2, r4
 800ed82:	4614      	movlt	r4, r2
 800ed84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed88:	d005      	beq.n	800ed96 <__cvt+0x42>
 800ed8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed8e:	d100      	bne.n	800ed92 <__cvt+0x3e>
 800ed90:	3601      	adds	r6, #1
 800ed92:	2102      	movs	r1, #2
 800ed94:	e000      	b.n	800ed98 <__cvt+0x44>
 800ed96:	2103      	movs	r1, #3
 800ed98:	ab03      	add	r3, sp, #12
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	ab02      	add	r3, sp, #8
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	ec45 4b10 	vmov	d0, r4, r5
 800eda4:	4653      	mov	r3, sl
 800eda6:	4632      	mov	r2, r6
 800eda8:	f000 fcea 	bl	800f780 <_dtoa_r>
 800edac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edb0:	4607      	mov	r7, r0
 800edb2:	d102      	bne.n	800edba <__cvt+0x66>
 800edb4:	f019 0f01 	tst.w	r9, #1
 800edb8:	d022      	beq.n	800ee00 <__cvt+0xac>
 800edba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edbe:	eb07 0906 	add.w	r9, r7, r6
 800edc2:	d110      	bne.n	800ede6 <__cvt+0x92>
 800edc4:	783b      	ldrb	r3, [r7, #0]
 800edc6:	2b30      	cmp	r3, #48	; 0x30
 800edc8:	d10a      	bne.n	800ede0 <__cvt+0x8c>
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	4620      	mov	r0, r4
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7f1 fe89 	bl	8000ae8 <__aeabi_dcmpeq>
 800edd6:	b918      	cbnz	r0, 800ede0 <__cvt+0x8c>
 800edd8:	f1c6 0601 	rsb	r6, r6, #1
 800eddc:	f8ca 6000 	str.w	r6, [sl]
 800ede0:	f8da 3000 	ldr.w	r3, [sl]
 800ede4:	4499      	add	r9, r3
 800ede6:	2200      	movs	r2, #0
 800ede8:	2300      	movs	r3, #0
 800edea:	4620      	mov	r0, r4
 800edec:	4629      	mov	r1, r5
 800edee:	f7f1 fe7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800edf2:	b108      	cbz	r0, 800edf8 <__cvt+0xa4>
 800edf4:	f8cd 900c 	str.w	r9, [sp, #12]
 800edf8:	2230      	movs	r2, #48	; 0x30
 800edfa:	9b03      	ldr	r3, [sp, #12]
 800edfc:	454b      	cmp	r3, r9
 800edfe:	d307      	bcc.n	800ee10 <__cvt+0xbc>
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee04:	1bdb      	subs	r3, r3, r7
 800ee06:	4638      	mov	r0, r7
 800ee08:	6013      	str	r3, [r2, #0]
 800ee0a:	b004      	add	sp, #16
 800ee0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee10:	1c59      	adds	r1, r3, #1
 800ee12:	9103      	str	r1, [sp, #12]
 800ee14:	701a      	strb	r2, [r3, #0]
 800ee16:	e7f0      	b.n	800edfa <__cvt+0xa6>

0800ee18 <__exponent>:
 800ee18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2900      	cmp	r1, #0
 800ee1e:	bfb8      	it	lt
 800ee20:	4249      	neglt	r1, r1
 800ee22:	f803 2b02 	strb.w	r2, [r3], #2
 800ee26:	bfb4      	ite	lt
 800ee28:	222d      	movlt	r2, #45	; 0x2d
 800ee2a:	222b      	movge	r2, #43	; 0x2b
 800ee2c:	2909      	cmp	r1, #9
 800ee2e:	7042      	strb	r2, [r0, #1]
 800ee30:	dd2a      	ble.n	800ee88 <__exponent+0x70>
 800ee32:	f10d 0407 	add.w	r4, sp, #7
 800ee36:	46a4      	mov	ip, r4
 800ee38:	270a      	movs	r7, #10
 800ee3a:	46a6      	mov	lr, r4
 800ee3c:	460a      	mov	r2, r1
 800ee3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee42:	fb07 1516 	mls	r5, r7, r6, r1
 800ee46:	3530      	adds	r5, #48	; 0x30
 800ee48:	2a63      	cmp	r2, #99	; 0x63
 800ee4a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee52:	4631      	mov	r1, r6
 800ee54:	dcf1      	bgt.n	800ee3a <__exponent+0x22>
 800ee56:	3130      	adds	r1, #48	; 0x30
 800ee58:	f1ae 0502 	sub.w	r5, lr, #2
 800ee5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee60:	1c44      	adds	r4, r0, #1
 800ee62:	4629      	mov	r1, r5
 800ee64:	4561      	cmp	r1, ip
 800ee66:	d30a      	bcc.n	800ee7e <__exponent+0x66>
 800ee68:	f10d 0209 	add.w	r2, sp, #9
 800ee6c:	eba2 020e 	sub.w	r2, r2, lr
 800ee70:	4565      	cmp	r5, ip
 800ee72:	bf88      	it	hi
 800ee74:	2200      	movhi	r2, #0
 800ee76:	4413      	add	r3, r2
 800ee78:	1a18      	subs	r0, r3, r0
 800ee7a:	b003      	add	sp, #12
 800ee7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee82:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ee86:	e7ed      	b.n	800ee64 <__exponent+0x4c>
 800ee88:	2330      	movs	r3, #48	; 0x30
 800ee8a:	3130      	adds	r1, #48	; 0x30
 800ee8c:	7083      	strb	r3, [r0, #2]
 800ee8e:	70c1      	strb	r1, [r0, #3]
 800ee90:	1d03      	adds	r3, r0, #4
 800ee92:	e7f1      	b.n	800ee78 <__exponent+0x60>

0800ee94 <_printf_float>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	ed2d 8b02 	vpush	{d8}
 800ee9c:	b08d      	sub	sp, #52	; 0x34
 800ee9e:	460c      	mov	r4, r1
 800eea0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eea4:	4616      	mov	r6, r2
 800eea6:	461f      	mov	r7, r3
 800eea8:	4605      	mov	r5, r0
 800eeaa:	f001 fa57 	bl	801035c <_localeconv_r>
 800eeae:	f8d0 a000 	ldr.w	sl, [r0]
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	f7f1 f99c 	bl	80001f0 <strlen>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	930a      	str	r3, [sp, #40]	; 0x28
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	9305      	str	r3, [sp, #20]
 800eec0:	f8d8 3000 	ldr.w	r3, [r8]
 800eec4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eec8:	3307      	adds	r3, #7
 800eeca:	f023 0307 	bic.w	r3, r3, #7
 800eece:	f103 0208 	add.w	r2, r3, #8
 800eed2:	f8c8 2000 	str.w	r2, [r8]
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eede:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eee2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eee6:	9307      	str	r3, [sp, #28]
 800eee8:	f8cd 8018 	str.w	r8, [sp, #24]
 800eeec:	ee08 0a10 	vmov	s16, r0
 800eef0:	4b9f      	ldr	r3, [pc, #636]	; (800f170 <_printf_float+0x2dc>)
 800eef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eef6:	f04f 32ff 	mov.w	r2, #4294967295
 800eefa:	f7f1 fe27 	bl	8000b4c <__aeabi_dcmpun>
 800eefe:	bb88      	cbnz	r0, 800ef64 <_printf_float+0xd0>
 800ef00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef04:	4b9a      	ldr	r3, [pc, #616]	; (800f170 <_printf_float+0x2dc>)
 800ef06:	f04f 32ff 	mov.w	r2, #4294967295
 800ef0a:	f7f1 fe01 	bl	8000b10 <__aeabi_dcmple>
 800ef0e:	bb48      	cbnz	r0, 800ef64 <_printf_float+0xd0>
 800ef10:	2200      	movs	r2, #0
 800ef12:	2300      	movs	r3, #0
 800ef14:	4640      	mov	r0, r8
 800ef16:	4649      	mov	r1, r9
 800ef18:	f7f1 fdf0 	bl	8000afc <__aeabi_dcmplt>
 800ef1c:	b110      	cbz	r0, 800ef24 <_printf_float+0x90>
 800ef1e:	232d      	movs	r3, #45	; 0x2d
 800ef20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef24:	4b93      	ldr	r3, [pc, #588]	; (800f174 <_printf_float+0x2e0>)
 800ef26:	4894      	ldr	r0, [pc, #592]	; (800f178 <_printf_float+0x2e4>)
 800ef28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef2c:	bf94      	ite	ls
 800ef2e:	4698      	movls	r8, r3
 800ef30:	4680      	movhi	r8, r0
 800ef32:	2303      	movs	r3, #3
 800ef34:	6123      	str	r3, [r4, #16]
 800ef36:	9b05      	ldr	r3, [sp, #20]
 800ef38:	f023 0204 	bic.w	r2, r3, #4
 800ef3c:	6022      	str	r2, [r4, #0]
 800ef3e:	f04f 0900 	mov.w	r9, #0
 800ef42:	9700      	str	r7, [sp, #0]
 800ef44:	4633      	mov	r3, r6
 800ef46:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef48:	4621      	mov	r1, r4
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	f000 f9d8 	bl	800f300 <_printf_common>
 800ef50:	3001      	adds	r0, #1
 800ef52:	f040 8090 	bne.w	800f076 <_printf_float+0x1e2>
 800ef56:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5a:	b00d      	add	sp, #52	; 0x34
 800ef5c:	ecbd 8b02 	vpop	{d8}
 800ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef64:	4642      	mov	r2, r8
 800ef66:	464b      	mov	r3, r9
 800ef68:	4640      	mov	r0, r8
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f7f1 fdee 	bl	8000b4c <__aeabi_dcmpun>
 800ef70:	b140      	cbz	r0, 800ef84 <_printf_float+0xf0>
 800ef72:	464b      	mov	r3, r9
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bfbc      	itt	lt
 800ef78:	232d      	movlt	r3, #45	; 0x2d
 800ef7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ef7e:	487f      	ldr	r0, [pc, #508]	; (800f17c <_printf_float+0x2e8>)
 800ef80:	4b7f      	ldr	r3, [pc, #508]	; (800f180 <_printf_float+0x2ec>)
 800ef82:	e7d1      	b.n	800ef28 <_printf_float+0x94>
 800ef84:	6863      	ldr	r3, [r4, #4]
 800ef86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ef8a:	9206      	str	r2, [sp, #24]
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	d13f      	bne.n	800f010 <_printf_float+0x17c>
 800ef90:	2306      	movs	r3, #6
 800ef92:	6063      	str	r3, [r4, #4]
 800ef94:	9b05      	ldr	r3, [sp, #20]
 800ef96:	6861      	ldr	r1, [r4, #4]
 800ef98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9303      	str	r3, [sp, #12]
 800efa0:	ab0a      	add	r3, sp, #40	; 0x28
 800efa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efa6:	ab09      	add	r3, sp, #36	; 0x24
 800efa8:	ec49 8b10 	vmov	d0, r8, r9
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	6022      	str	r2, [r4, #0]
 800efb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efb4:	4628      	mov	r0, r5
 800efb6:	f7ff fecd 	bl	800ed54 <__cvt>
 800efba:	9b06      	ldr	r3, [sp, #24]
 800efbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efbe:	2b47      	cmp	r3, #71	; 0x47
 800efc0:	4680      	mov	r8, r0
 800efc2:	d108      	bne.n	800efd6 <_printf_float+0x142>
 800efc4:	1cc8      	adds	r0, r1, #3
 800efc6:	db02      	blt.n	800efce <_printf_float+0x13a>
 800efc8:	6863      	ldr	r3, [r4, #4]
 800efca:	4299      	cmp	r1, r3
 800efcc:	dd41      	ble.n	800f052 <_printf_float+0x1be>
 800efce:	f1ab 0b02 	sub.w	fp, fp, #2
 800efd2:	fa5f fb8b 	uxtb.w	fp, fp
 800efd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800efda:	d820      	bhi.n	800f01e <_printf_float+0x18a>
 800efdc:	3901      	subs	r1, #1
 800efde:	465a      	mov	r2, fp
 800efe0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800efe4:	9109      	str	r1, [sp, #36]	; 0x24
 800efe6:	f7ff ff17 	bl	800ee18 <__exponent>
 800efea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efec:	1813      	adds	r3, r2, r0
 800efee:	2a01      	cmp	r2, #1
 800eff0:	4681      	mov	r9, r0
 800eff2:	6123      	str	r3, [r4, #16]
 800eff4:	dc02      	bgt.n	800effc <_printf_float+0x168>
 800eff6:	6822      	ldr	r2, [r4, #0]
 800eff8:	07d2      	lsls	r2, r2, #31
 800effa:	d501      	bpl.n	800f000 <_printf_float+0x16c>
 800effc:	3301      	adds	r3, #1
 800effe:	6123      	str	r3, [r4, #16]
 800f000:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f004:	2b00      	cmp	r3, #0
 800f006:	d09c      	beq.n	800ef42 <_printf_float+0xae>
 800f008:	232d      	movs	r3, #45	; 0x2d
 800f00a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f00e:	e798      	b.n	800ef42 <_printf_float+0xae>
 800f010:	9a06      	ldr	r2, [sp, #24]
 800f012:	2a47      	cmp	r2, #71	; 0x47
 800f014:	d1be      	bne.n	800ef94 <_printf_float+0x100>
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1bc      	bne.n	800ef94 <_printf_float+0x100>
 800f01a:	2301      	movs	r3, #1
 800f01c:	e7b9      	b.n	800ef92 <_printf_float+0xfe>
 800f01e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f022:	d118      	bne.n	800f056 <_printf_float+0x1c2>
 800f024:	2900      	cmp	r1, #0
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	dd0b      	ble.n	800f042 <_printf_float+0x1ae>
 800f02a:	6121      	str	r1, [r4, #16]
 800f02c:	b913      	cbnz	r3, 800f034 <_printf_float+0x1a0>
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	07d0      	lsls	r0, r2, #31
 800f032:	d502      	bpl.n	800f03a <_printf_float+0x1a6>
 800f034:	3301      	adds	r3, #1
 800f036:	440b      	add	r3, r1
 800f038:	6123      	str	r3, [r4, #16]
 800f03a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f03c:	f04f 0900 	mov.w	r9, #0
 800f040:	e7de      	b.n	800f000 <_printf_float+0x16c>
 800f042:	b913      	cbnz	r3, 800f04a <_printf_float+0x1b6>
 800f044:	6822      	ldr	r2, [r4, #0]
 800f046:	07d2      	lsls	r2, r2, #31
 800f048:	d501      	bpl.n	800f04e <_printf_float+0x1ba>
 800f04a:	3302      	adds	r3, #2
 800f04c:	e7f4      	b.n	800f038 <_printf_float+0x1a4>
 800f04e:	2301      	movs	r3, #1
 800f050:	e7f2      	b.n	800f038 <_printf_float+0x1a4>
 800f052:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f058:	4299      	cmp	r1, r3
 800f05a:	db05      	blt.n	800f068 <_printf_float+0x1d4>
 800f05c:	6823      	ldr	r3, [r4, #0]
 800f05e:	6121      	str	r1, [r4, #16]
 800f060:	07d8      	lsls	r0, r3, #31
 800f062:	d5ea      	bpl.n	800f03a <_printf_float+0x1a6>
 800f064:	1c4b      	adds	r3, r1, #1
 800f066:	e7e7      	b.n	800f038 <_printf_float+0x1a4>
 800f068:	2900      	cmp	r1, #0
 800f06a:	bfd4      	ite	le
 800f06c:	f1c1 0202 	rsble	r2, r1, #2
 800f070:	2201      	movgt	r2, #1
 800f072:	4413      	add	r3, r2
 800f074:	e7e0      	b.n	800f038 <_printf_float+0x1a4>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	055a      	lsls	r2, r3, #21
 800f07a:	d407      	bmi.n	800f08c <_printf_float+0x1f8>
 800f07c:	6923      	ldr	r3, [r4, #16]
 800f07e:	4642      	mov	r2, r8
 800f080:	4631      	mov	r1, r6
 800f082:	4628      	mov	r0, r5
 800f084:	47b8      	blx	r7
 800f086:	3001      	adds	r0, #1
 800f088:	d12c      	bne.n	800f0e4 <_printf_float+0x250>
 800f08a:	e764      	b.n	800ef56 <_printf_float+0xc2>
 800f08c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f090:	f240 80e0 	bls.w	800f254 <_printf_float+0x3c0>
 800f094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f098:	2200      	movs	r2, #0
 800f09a:	2300      	movs	r3, #0
 800f09c:	f7f1 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d034      	beq.n	800f10e <_printf_float+0x27a>
 800f0a4:	4a37      	ldr	r2, [pc, #220]	; (800f184 <_printf_float+0x2f0>)
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	47b8      	blx	r7
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	f43f af51 	beq.w	800ef56 <_printf_float+0xc2>
 800f0b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	db02      	blt.n	800f0c2 <_printf_float+0x22e>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	07d8      	lsls	r0, r3, #31
 800f0c0:	d510      	bpl.n	800f0e4 <_printf_float+0x250>
 800f0c2:	ee18 3a10 	vmov	r3, s16
 800f0c6:	4652      	mov	r2, sl
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	47b8      	blx	r7
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	f43f af41 	beq.w	800ef56 <_printf_float+0xc2>
 800f0d4:	f04f 0800 	mov.w	r8, #0
 800f0d8:	f104 091a 	add.w	r9, r4, #26
 800f0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	4543      	cmp	r3, r8
 800f0e2:	dc09      	bgt.n	800f0f8 <_printf_float+0x264>
 800f0e4:	6823      	ldr	r3, [r4, #0]
 800f0e6:	079b      	lsls	r3, r3, #30
 800f0e8:	f100 8105 	bmi.w	800f2f6 <_printf_float+0x462>
 800f0ec:	68e0      	ldr	r0, [r4, #12]
 800f0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f0:	4298      	cmp	r0, r3
 800f0f2:	bfb8      	it	lt
 800f0f4:	4618      	movlt	r0, r3
 800f0f6:	e730      	b.n	800ef5a <_printf_float+0xc6>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	464a      	mov	r2, r9
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	f43f af27 	beq.w	800ef56 <_printf_float+0xc2>
 800f108:	f108 0801 	add.w	r8, r8, #1
 800f10c:	e7e6      	b.n	800f0dc <_printf_float+0x248>
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	2b00      	cmp	r3, #0
 800f112:	dc39      	bgt.n	800f188 <_printf_float+0x2f4>
 800f114:	4a1b      	ldr	r2, [pc, #108]	; (800f184 <_printf_float+0x2f0>)
 800f116:	2301      	movs	r3, #1
 800f118:	4631      	mov	r1, r6
 800f11a:	4628      	mov	r0, r5
 800f11c:	47b8      	blx	r7
 800f11e:	3001      	adds	r0, #1
 800f120:	f43f af19 	beq.w	800ef56 <_printf_float+0xc2>
 800f124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f128:	4313      	orrs	r3, r2
 800f12a:	d102      	bne.n	800f132 <_printf_float+0x29e>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	07d9      	lsls	r1, r3, #31
 800f130:	d5d8      	bpl.n	800f0e4 <_printf_float+0x250>
 800f132:	ee18 3a10 	vmov	r3, s16
 800f136:	4652      	mov	r2, sl
 800f138:	4631      	mov	r1, r6
 800f13a:	4628      	mov	r0, r5
 800f13c:	47b8      	blx	r7
 800f13e:	3001      	adds	r0, #1
 800f140:	f43f af09 	beq.w	800ef56 <_printf_float+0xc2>
 800f144:	f04f 0900 	mov.w	r9, #0
 800f148:	f104 0a1a 	add.w	sl, r4, #26
 800f14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f14e:	425b      	negs	r3, r3
 800f150:	454b      	cmp	r3, r9
 800f152:	dc01      	bgt.n	800f158 <_printf_float+0x2c4>
 800f154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f156:	e792      	b.n	800f07e <_printf_float+0x1ea>
 800f158:	2301      	movs	r3, #1
 800f15a:	4652      	mov	r2, sl
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	f43f aef7 	beq.w	800ef56 <_printf_float+0xc2>
 800f168:	f109 0901 	add.w	r9, r9, #1
 800f16c:	e7ee      	b.n	800f14c <_printf_float+0x2b8>
 800f16e:	bf00      	nop
 800f170:	7fefffff 	.word	0x7fefffff
 800f174:	0801461c 	.word	0x0801461c
 800f178:	08014620 	.word	0x08014620
 800f17c:	08014628 	.word	0x08014628
 800f180:	08014624 	.word	0x08014624
 800f184:	0801462c 	.word	0x0801462c
 800f188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f18a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f18c:	429a      	cmp	r2, r3
 800f18e:	bfa8      	it	ge
 800f190:	461a      	movge	r2, r3
 800f192:	2a00      	cmp	r2, #0
 800f194:	4691      	mov	r9, r2
 800f196:	dc37      	bgt.n	800f208 <_printf_float+0x374>
 800f198:	f04f 0b00 	mov.w	fp, #0
 800f19c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1a0:	f104 021a 	add.w	r2, r4, #26
 800f1a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1a6:	9305      	str	r3, [sp, #20]
 800f1a8:	eba3 0309 	sub.w	r3, r3, r9
 800f1ac:	455b      	cmp	r3, fp
 800f1ae:	dc33      	bgt.n	800f218 <_printf_float+0x384>
 800f1b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	db3b      	blt.n	800f230 <_printf_float+0x39c>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	07da      	lsls	r2, r3, #31
 800f1bc:	d438      	bmi.n	800f230 <_printf_float+0x39c>
 800f1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1c0:	9a05      	ldr	r2, [sp, #20]
 800f1c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1c4:	1a9a      	subs	r2, r3, r2
 800f1c6:	eba3 0901 	sub.w	r9, r3, r1
 800f1ca:	4591      	cmp	r9, r2
 800f1cc:	bfa8      	it	ge
 800f1ce:	4691      	movge	r9, r2
 800f1d0:	f1b9 0f00 	cmp.w	r9, #0
 800f1d4:	dc35      	bgt.n	800f242 <_printf_float+0x3ae>
 800f1d6:	f04f 0800 	mov.w	r8, #0
 800f1da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1de:	f104 0a1a 	add.w	sl, r4, #26
 800f1e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1e6:	1a9b      	subs	r3, r3, r2
 800f1e8:	eba3 0309 	sub.w	r3, r3, r9
 800f1ec:	4543      	cmp	r3, r8
 800f1ee:	f77f af79 	ble.w	800f0e4 <_printf_float+0x250>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	4652      	mov	r2, sl
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	47b8      	blx	r7
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	f43f aeaa 	beq.w	800ef56 <_printf_float+0xc2>
 800f202:	f108 0801 	add.w	r8, r8, #1
 800f206:	e7ec      	b.n	800f1e2 <_printf_float+0x34e>
 800f208:	4613      	mov	r3, r2
 800f20a:	4631      	mov	r1, r6
 800f20c:	4642      	mov	r2, r8
 800f20e:	4628      	mov	r0, r5
 800f210:	47b8      	blx	r7
 800f212:	3001      	adds	r0, #1
 800f214:	d1c0      	bne.n	800f198 <_printf_float+0x304>
 800f216:	e69e      	b.n	800ef56 <_printf_float+0xc2>
 800f218:	2301      	movs	r3, #1
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	9205      	str	r2, [sp, #20]
 800f220:	47b8      	blx	r7
 800f222:	3001      	adds	r0, #1
 800f224:	f43f ae97 	beq.w	800ef56 <_printf_float+0xc2>
 800f228:	9a05      	ldr	r2, [sp, #20]
 800f22a:	f10b 0b01 	add.w	fp, fp, #1
 800f22e:	e7b9      	b.n	800f1a4 <_printf_float+0x310>
 800f230:	ee18 3a10 	vmov	r3, s16
 800f234:	4652      	mov	r2, sl
 800f236:	4631      	mov	r1, r6
 800f238:	4628      	mov	r0, r5
 800f23a:	47b8      	blx	r7
 800f23c:	3001      	adds	r0, #1
 800f23e:	d1be      	bne.n	800f1be <_printf_float+0x32a>
 800f240:	e689      	b.n	800ef56 <_printf_float+0xc2>
 800f242:	9a05      	ldr	r2, [sp, #20]
 800f244:	464b      	mov	r3, r9
 800f246:	4442      	add	r2, r8
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	47b8      	blx	r7
 800f24e:	3001      	adds	r0, #1
 800f250:	d1c1      	bne.n	800f1d6 <_printf_float+0x342>
 800f252:	e680      	b.n	800ef56 <_printf_float+0xc2>
 800f254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f256:	2a01      	cmp	r2, #1
 800f258:	dc01      	bgt.n	800f25e <_printf_float+0x3ca>
 800f25a:	07db      	lsls	r3, r3, #31
 800f25c:	d538      	bpl.n	800f2d0 <_printf_float+0x43c>
 800f25e:	2301      	movs	r3, #1
 800f260:	4642      	mov	r2, r8
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	47b8      	blx	r7
 800f268:	3001      	adds	r0, #1
 800f26a:	f43f ae74 	beq.w	800ef56 <_printf_float+0xc2>
 800f26e:	ee18 3a10 	vmov	r3, s16
 800f272:	4652      	mov	r2, sl
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	47b8      	blx	r7
 800f27a:	3001      	adds	r0, #1
 800f27c:	f43f ae6b 	beq.w	800ef56 <_printf_float+0xc2>
 800f280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f284:	2200      	movs	r2, #0
 800f286:	2300      	movs	r3, #0
 800f288:	f7f1 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f28c:	b9d8      	cbnz	r0, 800f2c6 <_printf_float+0x432>
 800f28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f290:	f108 0201 	add.w	r2, r8, #1
 800f294:	3b01      	subs	r3, #1
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	47b8      	blx	r7
 800f29c:	3001      	adds	r0, #1
 800f29e:	d10e      	bne.n	800f2be <_printf_float+0x42a>
 800f2a0:	e659      	b.n	800ef56 <_printf_float+0xc2>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	4652      	mov	r2, sl
 800f2a6:	4631      	mov	r1, r6
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b8      	blx	r7
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	f43f ae52 	beq.w	800ef56 <_printf_float+0xc2>
 800f2b2:	f108 0801 	add.w	r8, r8, #1
 800f2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	4543      	cmp	r3, r8
 800f2bc:	dcf1      	bgt.n	800f2a2 <_printf_float+0x40e>
 800f2be:	464b      	mov	r3, r9
 800f2c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2c4:	e6dc      	b.n	800f080 <_printf_float+0x1ec>
 800f2c6:	f04f 0800 	mov.w	r8, #0
 800f2ca:	f104 0a1a 	add.w	sl, r4, #26
 800f2ce:	e7f2      	b.n	800f2b6 <_printf_float+0x422>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	e7df      	b.n	800f296 <_printf_float+0x402>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	464a      	mov	r2, r9
 800f2da:	4631      	mov	r1, r6
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b8      	blx	r7
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	f43f ae38 	beq.w	800ef56 <_printf_float+0xc2>
 800f2e6:	f108 0801 	add.w	r8, r8, #1
 800f2ea:	68e3      	ldr	r3, [r4, #12]
 800f2ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2ee:	1a5b      	subs	r3, r3, r1
 800f2f0:	4543      	cmp	r3, r8
 800f2f2:	dcf0      	bgt.n	800f2d6 <_printf_float+0x442>
 800f2f4:	e6fa      	b.n	800f0ec <_printf_float+0x258>
 800f2f6:	f04f 0800 	mov.w	r8, #0
 800f2fa:	f104 0919 	add.w	r9, r4, #25
 800f2fe:	e7f4      	b.n	800f2ea <_printf_float+0x456>

0800f300 <_printf_common>:
 800f300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f304:	4616      	mov	r6, r2
 800f306:	4699      	mov	r9, r3
 800f308:	688a      	ldr	r2, [r1, #8]
 800f30a:	690b      	ldr	r3, [r1, #16]
 800f30c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f310:	4293      	cmp	r3, r2
 800f312:	bfb8      	it	lt
 800f314:	4613      	movlt	r3, r2
 800f316:	6033      	str	r3, [r6, #0]
 800f318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f31c:	4607      	mov	r7, r0
 800f31e:	460c      	mov	r4, r1
 800f320:	b10a      	cbz	r2, 800f326 <_printf_common+0x26>
 800f322:	3301      	adds	r3, #1
 800f324:	6033      	str	r3, [r6, #0]
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	0699      	lsls	r1, r3, #26
 800f32a:	bf42      	ittt	mi
 800f32c:	6833      	ldrmi	r3, [r6, #0]
 800f32e:	3302      	addmi	r3, #2
 800f330:	6033      	strmi	r3, [r6, #0]
 800f332:	6825      	ldr	r5, [r4, #0]
 800f334:	f015 0506 	ands.w	r5, r5, #6
 800f338:	d106      	bne.n	800f348 <_printf_common+0x48>
 800f33a:	f104 0a19 	add.w	sl, r4, #25
 800f33e:	68e3      	ldr	r3, [r4, #12]
 800f340:	6832      	ldr	r2, [r6, #0]
 800f342:	1a9b      	subs	r3, r3, r2
 800f344:	42ab      	cmp	r3, r5
 800f346:	dc26      	bgt.n	800f396 <_printf_common+0x96>
 800f348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f34c:	1e13      	subs	r3, r2, #0
 800f34e:	6822      	ldr	r2, [r4, #0]
 800f350:	bf18      	it	ne
 800f352:	2301      	movne	r3, #1
 800f354:	0692      	lsls	r2, r2, #26
 800f356:	d42b      	bmi.n	800f3b0 <_printf_common+0xb0>
 800f358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f35c:	4649      	mov	r1, r9
 800f35e:	4638      	mov	r0, r7
 800f360:	47c0      	blx	r8
 800f362:	3001      	adds	r0, #1
 800f364:	d01e      	beq.n	800f3a4 <_printf_common+0xa4>
 800f366:	6823      	ldr	r3, [r4, #0]
 800f368:	68e5      	ldr	r5, [r4, #12]
 800f36a:	6832      	ldr	r2, [r6, #0]
 800f36c:	f003 0306 	and.w	r3, r3, #6
 800f370:	2b04      	cmp	r3, #4
 800f372:	bf08      	it	eq
 800f374:	1aad      	subeq	r5, r5, r2
 800f376:	68a3      	ldr	r3, [r4, #8]
 800f378:	6922      	ldr	r2, [r4, #16]
 800f37a:	bf0c      	ite	eq
 800f37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f380:	2500      	movne	r5, #0
 800f382:	4293      	cmp	r3, r2
 800f384:	bfc4      	itt	gt
 800f386:	1a9b      	subgt	r3, r3, r2
 800f388:	18ed      	addgt	r5, r5, r3
 800f38a:	2600      	movs	r6, #0
 800f38c:	341a      	adds	r4, #26
 800f38e:	42b5      	cmp	r5, r6
 800f390:	d11a      	bne.n	800f3c8 <_printf_common+0xc8>
 800f392:	2000      	movs	r0, #0
 800f394:	e008      	b.n	800f3a8 <_printf_common+0xa8>
 800f396:	2301      	movs	r3, #1
 800f398:	4652      	mov	r2, sl
 800f39a:	4649      	mov	r1, r9
 800f39c:	4638      	mov	r0, r7
 800f39e:	47c0      	blx	r8
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	d103      	bne.n	800f3ac <_printf_common+0xac>
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	e7c6      	b.n	800f33e <_printf_common+0x3e>
 800f3b0:	18e1      	adds	r1, r4, r3
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	2030      	movs	r0, #48	; 0x30
 800f3b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3ba:	4422      	add	r2, r4
 800f3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3c4:	3302      	adds	r3, #2
 800f3c6:	e7c7      	b.n	800f358 <_printf_common+0x58>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	4649      	mov	r1, r9
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	47c0      	blx	r8
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	d0e6      	beq.n	800f3a4 <_printf_common+0xa4>
 800f3d6:	3601      	adds	r6, #1
 800f3d8:	e7d9      	b.n	800f38e <_printf_common+0x8e>
	...

0800f3dc <_printf_i>:
 800f3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e0:	7e0f      	ldrb	r7, [r1, #24]
 800f3e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3e4:	2f78      	cmp	r7, #120	; 0x78
 800f3e6:	4691      	mov	r9, r2
 800f3e8:	4680      	mov	r8, r0
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	469a      	mov	sl, r3
 800f3ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3f2:	d807      	bhi.n	800f404 <_printf_i+0x28>
 800f3f4:	2f62      	cmp	r7, #98	; 0x62
 800f3f6:	d80a      	bhi.n	800f40e <_printf_i+0x32>
 800f3f8:	2f00      	cmp	r7, #0
 800f3fa:	f000 80d8 	beq.w	800f5ae <_printf_i+0x1d2>
 800f3fe:	2f58      	cmp	r7, #88	; 0x58
 800f400:	f000 80a3 	beq.w	800f54a <_printf_i+0x16e>
 800f404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f40c:	e03a      	b.n	800f484 <_printf_i+0xa8>
 800f40e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f412:	2b15      	cmp	r3, #21
 800f414:	d8f6      	bhi.n	800f404 <_printf_i+0x28>
 800f416:	a101      	add	r1, pc, #4	; (adr r1, 800f41c <_printf_i+0x40>)
 800f418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f41c:	0800f475 	.word	0x0800f475
 800f420:	0800f489 	.word	0x0800f489
 800f424:	0800f405 	.word	0x0800f405
 800f428:	0800f405 	.word	0x0800f405
 800f42c:	0800f405 	.word	0x0800f405
 800f430:	0800f405 	.word	0x0800f405
 800f434:	0800f489 	.word	0x0800f489
 800f438:	0800f405 	.word	0x0800f405
 800f43c:	0800f405 	.word	0x0800f405
 800f440:	0800f405 	.word	0x0800f405
 800f444:	0800f405 	.word	0x0800f405
 800f448:	0800f595 	.word	0x0800f595
 800f44c:	0800f4b9 	.word	0x0800f4b9
 800f450:	0800f577 	.word	0x0800f577
 800f454:	0800f405 	.word	0x0800f405
 800f458:	0800f405 	.word	0x0800f405
 800f45c:	0800f5b7 	.word	0x0800f5b7
 800f460:	0800f405 	.word	0x0800f405
 800f464:	0800f4b9 	.word	0x0800f4b9
 800f468:	0800f405 	.word	0x0800f405
 800f46c:	0800f405 	.word	0x0800f405
 800f470:	0800f57f 	.word	0x0800f57f
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	1d1a      	adds	r2, r3, #4
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	602a      	str	r2, [r5, #0]
 800f47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f484:	2301      	movs	r3, #1
 800f486:	e0a3      	b.n	800f5d0 <_printf_i+0x1f4>
 800f488:	6820      	ldr	r0, [r4, #0]
 800f48a:	6829      	ldr	r1, [r5, #0]
 800f48c:	0606      	lsls	r6, r0, #24
 800f48e:	f101 0304 	add.w	r3, r1, #4
 800f492:	d50a      	bpl.n	800f4aa <_printf_i+0xce>
 800f494:	680e      	ldr	r6, [r1, #0]
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	2e00      	cmp	r6, #0
 800f49a:	da03      	bge.n	800f4a4 <_printf_i+0xc8>
 800f49c:	232d      	movs	r3, #45	; 0x2d
 800f49e:	4276      	negs	r6, r6
 800f4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4a4:	485e      	ldr	r0, [pc, #376]	; (800f620 <_printf_i+0x244>)
 800f4a6:	230a      	movs	r3, #10
 800f4a8:	e019      	b.n	800f4de <_printf_i+0x102>
 800f4aa:	680e      	ldr	r6, [r1, #0]
 800f4ac:	602b      	str	r3, [r5, #0]
 800f4ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4b2:	bf18      	it	ne
 800f4b4:	b236      	sxthne	r6, r6
 800f4b6:	e7ef      	b.n	800f498 <_printf_i+0xbc>
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	6820      	ldr	r0, [r4, #0]
 800f4bc:	1d19      	adds	r1, r3, #4
 800f4be:	6029      	str	r1, [r5, #0]
 800f4c0:	0601      	lsls	r1, r0, #24
 800f4c2:	d501      	bpl.n	800f4c8 <_printf_i+0xec>
 800f4c4:	681e      	ldr	r6, [r3, #0]
 800f4c6:	e002      	b.n	800f4ce <_printf_i+0xf2>
 800f4c8:	0646      	lsls	r6, r0, #25
 800f4ca:	d5fb      	bpl.n	800f4c4 <_printf_i+0xe8>
 800f4cc:	881e      	ldrh	r6, [r3, #0]
 800f4ce:	4854      	ldr	r0, [pc, #336]	; (800f620 <_printf_i+0x244>)
 800f4d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f4d2:	bf0c      	ite	eq
 800f4d4:	2308      	moveq	r3, #8
 800f4d6:	230a      	movne	r3, #10
 800f4d8:	2100      	movs	r1, #0
 800f4da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4de:	6865      	ldr	r5, [r4, #4]
 800f4e0:	60a5      	str	r5, [r4, #8]
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	bfa2      	ittt	ge
 800f4e6:	6821      	ldrge	r1, [r4, #0]
 800f4e8:	f021 0104 	bicge.w	r1, r1, #4
 800f4ec:	6021      	strge	r1, [r4, #0]
 800f4ee:	b90e      	cbnz	r6, 800f4f4 <_printf_i+0x118>
 800f4f0:	2d00      	cmp	r5, #0
 800f4f2:	d04d      	beq.n	800f590 <_printf_i+0x1b4>
 800f4f4:	4615      	mov	r5, r2
 800f4f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4fa:	fb03 6711 	mls	r7, r3, r1, r6
 800f4fe:	5dc7      	ldrb	r7, [r0, r7]
 800f500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f504:	4637      	mov	r7, r6
 800f506:	42bb      	cmp	r3, r7
 800f508:	460e      	mov	r6, r1
 800f50a:	d9f4      	bls.n	800f4f6 <_printf_i+0x11a>
 800f50c:	2b08      	cmp	r3, #8
 800f50e:	d10b      	bne.n	800f528 <_printf_i+0x14c>
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	07de      	lsls	r6, r3, #31
 800f514:	d508      	bpl.n	800f528 <_printf_i+0x14c>
 800f516:	6923      	ldr	r3, [r4, #16]
 800f518:	6861      	ldr	r1, [r4, #4]
 800f51a:	4299      	cmp	r1, r3
 800f51c:	bfde      	ittt	le
 800f51e:	2330      	movle	r3, #48	; 0x30
 800f520:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f524:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f528:	1b52      	subs	r2, r2, r5
 800f52a:	6122      	str	r2, [r4, #16]
 800f52c:	f8cd a000 	str.w	sl, [sp]
 800f530:	464b      	mov	r3, r9
 800f532:	aa03      	add	r2, sp, #12
 800f534:	4621      	mov	r1, r4
 800f536:	4640      	mov	r0, r8
 800f538:	f7ff fee2 	bl	800f300 <_printf_common>
 800f53c:	3001      	adds	r0, #1
 800f53e:	d14c      	bne.n	800f5da <_printf_i+0x1fe>
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	b004      	add	sp, #16
 800f546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54a:	4835      	ldr	r0, [pc, #212]	; (800f620 <_printf_i+0x244>)
 800f54c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f550:	6829      	ldr	r1, [r5, #0]
 800f552:	6823      	ldr	r3, [r4, #0]
 800f554:	f851 6b04 	ldr.w	r6, [r1], #4
 800f558:	6029      	str	r1, [r5, #0]
 800f55a:	061d      	lsls	r5, r3, #24
 800f55c:	d514      	bpl.n	800f588 <_printf_i+0x1ac>
 800f55e:	07df      	lsls	r7, r3, #31
 800f560:	bf44      	itt	mi
 800f562:	f043 0320 	orrmi.w	r3, r3, #32
 800f566:	6023      	strmi	r3, [r4, #0]
 800f568:	b91e      	cbnz	r6, 800f572 <_printf_i+0x196>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	f023 0320 	bic.w	r3, r3, #32
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	2310      	movs	r3, #16
 800f574:	e7b0      	b.n	800f4d8 <_printf_i+0xfc>
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	f043 0320 	orr.w	r3, r3, #32
 800f57c:	6023      	str	r3, [r4, #0]
 800f57e:	2378      	movs	r3, #120	; 0x78
 800f580:	4828      	ldr	r0, [pc, #160]	; (800f624 <_printf_i+0x248>)
 800f582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f586:	e7e3      	b.n	800f550 <_printf_i+0x174>
 800f588:	0659      	lsls	r1, r3, #25
 800f58a:	bf48      	it	mi
 800f58c:	b2b6      	uxthmi	r6, r6
 800f58e:	e7e6      	b.n	800f55e <_printf_i+0x182>
 800f590:	4615      	mov	r5, r2
 800f592:	e7bb      	b.n	800f50c <_printf_i+0x130>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	6826      	ldr	r6, [r4, #0]
 800f598:	6961      	ldr	r1, [r4, #20]
 800f59a:	1d18      	adds	r0, r3, #4
 800f59c:	6028      	str	r0, [r5, #0]
 800f59e:	0635      	lsls	r5, r6, #24
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	d501      	bpl.n	800f5a8 <_printf_i+0x1cc>
 800f5a4:	6019      	str	r1, [r3, #0]
 800f5a6:	e002      	b.n	800f5ae <_printf_i+0x1d2>
 800f5a8:	0670      	lsls	r0, r6, #25
 800f5aa:	d5fb      	bpl.n	800f5a4 <_printf_i+0x1c8>
 800f5ac:	8019      	strh	r1, [r3, #0]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	6123      	str	r3, [r4, #16]
 800f5b2:	4615      	mov	r5, r2
 800f5b4:	e7ba      	b.n	800f52c <_printf_i+0x150>
 800f5b6:	682b      	ldr	r3, [r5, #0]
 800f5b8:	1d1a      	adds	r2, r3, #4
 800f5ba:	602a      	str	r2, [r5, #0]
 800f5bc:	681d      	ldr	r5, [r3, #0]
 800f5be:	6862      	ldr	r2, [r4, #4]
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f7f0 fe1c 	bl	8000200 <memchr>
 800f5c8:	b108      	cbz	r0, 800f5ce <_printf_i+0x1f2>
 800f5ca:	1b40      	subs	r0, r0, r5
 800f5cc:	6060      	str	r0, [r4, #4]
 800f5ce:	6863      	ldr	r3, [r4, #4]
 800f5d0:	6123      	str	r3, [r4, #16]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5d8:	e7a8      	b.n	800f52c <_printf_i+0x150>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4649      	mov	r1, r9
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	47d0      	blx	sl
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d0ab      	beq.n	800f540 <_printf_i+0x164>
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	079b      	lsls	r3, r3, #30
 800f5ec:	d413      	bmi.n	800f616 <_printf_i+0x23a>
 800f5ee:	68e0      	ldr	r0, [r4, #12]
 800f5f0:	9b03      	ldr	r3, [sp, #12]
 800f5f2:	4298      	cmp	r0, r3
 800f5f4:	bfb8      	it	lt
 800f5f6:	4618      	movlt	r0, r3
 800f5f8:	e7a4      	b.n	800f544 <_printf_i+0x168>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	4649      	mov	r1, r9
 800f600:	4640      	mov	r0, r8
 800f602:	47d0      	blx	sl
 800f604:	3001      	adds	r0, #1
 800f606:	d09b      	beq.n	800f540 <_printf_i+0x164>
 800f608:	3501      	adds	r5, #1
 800f60a:	68e3      	ldr	r3, [r4, #12]
 800f60c:	9903      	ldr	r1, [sp, #12]
 800f60e:	1a5b      	subs	r3, r3, r1
 800f610:	42ab      	cmp	r3, r5
 800f612:	dcf2      	bgt.n	800f5fa <_printf_i+0x21e>
 800f614:	e7eb      	b.n	800f5ee <_printf_i+0x212>
 800f616:	2500      	movs	r5, #0
 800f618:	f104 0619 	add.w	r6, r4, #25
 800f61c:	e7f5      	b.n	800f60a <_printf_i+0x22e>
 800f61e:	bf00      	nop
 800f620:	0801462e 	.word	0x0801462e
 800f624:	0801463f 	.word	0x0801463f

0800f628 <siprintf>:
 800f628:	b40e      	push	{r1, r2, r3}
 800f62a:	b500      	push	{lr}
 800f62c:	b09c      	sub	sp, #112	; 0x70
 800f62e:	ab1d      	add	r3, sp, #116	; 0x74
 800f630:	9002      	str	r0, [sp, #8]
 800f632:	9006      	str	r0, [sp, #24]
 800f634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f638:	4809      	ldr	r0, [pc, #36]	; (800f660 <siprintf+0x38>)
 800f63a:	9107      	str	r1, [sp, #28]
 800f63c:	9104      	str	r1, [sp, #16]
 800f63e:	4909      	ldr	r1, [pc, #36]	; (800f664 <siprintf+0x3c>)
 800f640:	f853 2b04 	ldr.w	r2, [r3], #4
 800f644:	9105      	str	r1, [sp, #20]
 800f646:	6800      	ldr	r0, [r0, #0]
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	a902      	add	r1, sp, #8
 800f64c:	f001 fb68 	bl	8010d20 <_svfiprintf_r>
 800f650:	9b02      	ldr	r3, [sp, #8]
 800f652:	2200      	movs	r2, #0
 800f654:	701a      	strb	r2, [r3, #0]
 800f656:	b01c      	add	sp, #112	; 0x70
 800f658:	f85d eb04 	ldr.w	lr, [sp], #4
 800f65c:	b003      	add	sp, #12
 800f65e:	4770      	bx	lr
 800f660:	20000184 	.word	0x20000184
 800f664:	ffff0208 	.word	0xffff0208

0800f668 <quorem>:
 800f668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	6903      	ldr	r3, [r0, #16]
 800f66e:	690c      	ldr	r4, [r1, #16]
 800f670:	42a3      	cmp	r3, r4
 800f672:	4607      	mov	r7, r0
 800f674:	f2c0 8081 	blt.w	800f77a <quorem+0x112>
 800f678:	3c01      	subs	r4, #1
 800f67a:	f101 0814 	add.w	r8, r1, #20
 800f67e:	f100 0514 	add.w	r5, r0, #20
 800f682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f68c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f690:	3301      	adds	r3, #1
 800f692:	429a      	cmp	r2, r3
 800f694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f69c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6a0:	d331      	bcc.n	800f706 <quorem+0x9e>
 800f6a2:	f04f 0e00 	mov.w	lr, #0
 800f6a6:	4640      	mov	r0, r8
 800f6a8:	46ac      	mov	ip, r5
 800f6aa:	46f2      	mov	sl, lr
 800f6ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800f6b0:	b293      	uxth	r3, r2
 800f6b2:	fb06 e303 	mla	r3, r6, r3, lr
 800f6b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800f6c0:	f8dc a000 	ldr.w	sl, [ip]
 800f6c4:	0c12      	lsrs	r2, r2, #16
 800f6c6:	fa13 f38a 	uxtah	r3, r3, sl
 800f6ca:	fb06 e202 	mla	r2, r6, r2, lr
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	9b00      	ldr	r3, [sp, #0]
 800f6d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f6d6:	b292      	uxth	r2, r2
 800f6d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6e4:	4581      	cmp	r9, r0
 800f6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6ea:	f84c 3b04 	str.w	r3, [ip], #4
 800f6ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f6f2:	d2db      	bcs.n	800f6ac <quorem+0x44>
 800f6f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f6f8:	b92b      	cbnz	r3, 800f706 <quorem+0x9e>
 800f6fa:	9b01      	ldr	r3, [sp, #4]
 800f6fc:	3b04      	subs	r3, #4
 800f6fe:	429d      	cmp	r5, r3
 800f700:	461a      	mov	r2, r3
 800f702:	d32e      	bcc.n	800f762 <quorem+0xfa>
 800f704:	613c      	str	r4, [r7, #16]
 800f706:	4638      	mov	r0, r7
 800f708:	f001 f8b6 	bl	8010878 <__mcmp>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	db24      	blt.n	800f75a <quorem+0xf2>
 800f710:	3601      	adds	r6, #1
 800f712:	4628      	mov	r0, r5
 800f714:	f04f 0c00 	mov.w	ip, #0
 800f718:	f858 2b04 	ldr.w	r2, [r8], #4
 800f71c:	f8d0 e000 	ldr.w	lr, [r0]
 800f720:	b293      	uxth	r3, r2
 800f722:	ebac 0303 	sub.w	r3, ip, r3
 800f726:	0c12      	lsrs	r2, r2, #16
 800f728:	fa13 f38e 	uxtah	r3, r3, lr
 800f72c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f734:	b29b      	uxth	r3, r3
 800f736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f73a:	45c1      	cmp	r9, r8
 800f73c:	f840 3b04 	str.w	r3, [r0], #4
 800f740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f744:	d2e8      	bcs.n	800f718 <quorem+0xb0>
 800f746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f74a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f74e:	b922      	cbnz	r2, 800f75a <quorem+0xf2>
 800f750:	3b04      	subs	r3, #4
 800f752:	429d      	cmp	r5, r3
 800f754:	461a      	mov	r2, r3
 800f756:	d30a      	bcc.n	800f76e <quorem+0x106>
 800f758:	613c      	str	r4, [r7, #16]
 800f75a:	4630      	mov	r0, r6
 800f75c:	b003      	add	sp, #12
 800f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f762:	6812      	ldr	r2, [r2, #0]
 800f764:	3b04      	subs	r3, #4
 800f766:	2a00      	cmp	r2, #0
 800f768:	d1cc      	bne.n	800f704 <quorem+0x9c>
 800f76a:	3c01      	subs	r4, #1
 800f76c:	e7c7      	b.n	800f6fe <quorem+0x96>
 800f76e:	6812      	ldr	r2, [r2, #0]
 800f770:	3b04      	subs	r3, #4
 800f772:	2a00      	cmp	r2, #0
 800f774:	d1f0      	bne.n	800f758 <quorem+0xf0>
 800f776:	3c01      	subs	r4, #1
 800f778:	e7eb      	b.n	800f752 <quorem+0xea>
 800f77a:	2000      	movs	r0, #0
 800f77c:	e7ee      	b.n	800f75c <quorem+0xf4>
	...

0800f780 <_dtoa_r>:
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	ed2d 8b04 	vpush	{d8-d9}
 800f788:	ec57 6b10 	vmov	r6, r7, d0
 800f78c:	b093      	sub	sp, #76	; 0x4c
 800f78e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f794:	9106      	str	r1, [sp, #24]
 800f796:	ee10 aa10 	vmov	sl, s0
 800f79a:	4604      	mov	r4, r0
 800f79c:	9209      	str	r2, [sp, #36]	; 0x24
 800f79e:	930c      	str	r3, [sp, #48]	; 0x30
 800f7a0:	46bb      	mov	fp, r7
 800f7a2:	b975      	cbnz	r5, 800f7c2 <_dtoa_r+0x42>
 800f7a4:	2010      	movs	r0, #16
 800f7a6:	f000 fddd 	bl	8010364 <malloc>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6260      	str	r0, [r4, #36]	; 0x24
 800f7ae:	b920      	cbnz	r0, 800f7ba <_dtoa_r+0x3a>
 800f7b0:	4ba7      	ldr	r3, [pc, #668]	; (800fa50 <_dtoa_r+0x2d0>)
 800f7b2:	21ea      	movs	r1, #234	; 0xea
 800f7b4:	48a7      	ldr	r0, [pc, #668]	; (800fa54 <_dtoa_r+0x2d4>)
 800f7b6:	f001 fbc3 	bl	8010f40 <__assert_func>
 800f7ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f7be:	6005      	str	r5, [r0, #0]
 800f7c0:	60c5      	str	r5, [r0, #12]
 800f7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c4:	6819      	ldr	r1, [r3, #0]
 800f7c6:	b151      	cbz	r1, 800f7de <_dtoa_r+0x5e>
 800f7c8:	685a      	ldr	r2, [r3, #4]
 800f7ca:	604a      	str	r2, [r1, #4]
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	4093      	lsls	r3, r2
 800f7d0:	608b      	str	r3, [r1, #8]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 fe0e 	bl	80103f4 <_Bfree>
 800f7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	1e3b      	subs	r3, r7, #0
 800f7e0:	bfaa      	itet	ge
 800f7e2:	2300      	movge	r3, #0
 800f7e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f7e8:	f8c8 3000 	strge.w	r3, [r8]
 800f7ec:	4b9a      	ldr	r3, [pc, #616]	; (800fa58 <_dtoa_r+0x2d8>)
 800f7ee:	bfbc      	itt	lt
 800f7f0:	2201      	movlt	r2, #1
 800f7f2:	f8c8 2000 	strlt.w	r2, [r8]
 800f7f6:	ea33 030b 	bics.w	r3, r3, fp
 800f7fa:	d11b      	bne.n	800f834 <_dtoa_r+0xb4>
 800f7fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800f802:	6013      	str	r3, [r2, #0]
 800f804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f808:	4333      	orrs	r3, r6
 800f80a:	f000 8592 	beq.w	8010332 <_dtoa_r+0xbb2>
 800f80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f810:	b963      	cbnz	r3, 800f82c <_dtoa_r+0xac>
 800f812:	4b92      	ldr	r3, [pc, #584]	; (800fa5c <_dtoa_r+0x2dc>)
 800f814:	e022      	b.n	800f85c <_dtoa_r+0xdc>
 800f816:	4b92      	ldr	r3, [pc, #584]	; (800fa60 <_dtoa_r+0x2e0>)
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	3308      	adds	r3, #8
 800f81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	9801      	ldr	r0, [sp, #4]
 800f822:	b013      	add	sp, #76	; 0x4c
 800f824:	ecbd 8b04 	vpop	{d8-d9}
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	4b8b      	ldr	r3, [pc, #556]	; (800fa5c <_dtoa_r+0x2dc>)
 800f82e:	9301      	str	r3, [sp, #4]
 800f830:	3303      	adds	r3, #3
 800f832:	e7f3      	b.n	800f81c <_dtoa_r+0x9c>
 800f834:	2200      	movs	r2, #0
 800f836:	2300      	movs	r3, #0
 800f838:	4650      	mov	r0, sl
 800f83a:	4659      	mov	r1, fp
 800f83c:	f7f1 f954 	bl	8000ae8 <__aeabi_dcmpeq>
 800f840:	ec4b ab19 	vmov	d9, sl, fp
 800f844:	4680      	mov	r8, r0
 800f846:	b158      	cbz	r0, 800f860 <_dtoa_r+0xe0>
 800f848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f84a:	2301      	movs	r3, #1
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 856b 	beq.w	801032c <_dtoa_r+0xbac>
 800f856:	4883      	ldr	r0, [pc, #524]	; (800fa64 <_dtoa_r+0x2e4>)
 800f858:	6018      	str	r0, [r3, #0]
 800f85a:	1e43      	subs	r3, r0, #1
 800f85c:	9301      	str	r3, [sp, #4]
 800f85e:	e7df      	b.n	800f820 <_dtoa_r+0xa0>
 800f860:	ec4b ab10 	vmov	d0, sl, fp
 800f864:	aa10      	add	r2, sp, #64	; 0x40
 800f866:	a911      	add	r1, sp, #68	; 0x44
 800f868:	4620      	mov	r0, r4
 800f86a:	f001 f8ab 	bl	80109c4 <__d2b>
 800f86e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f872:	ee08 0a10 	vmov	s16, r0
 800f876:	2d00      	cmp	r5, #0
 800f878:	f000 8084 	beq.w	800f984 <_dtoa_r+0x204>
 800f87c:	ee19 3a90 	vmov	r3, s19
 800f880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f884:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f888:	4656      	mov	r6, sl
 800f88a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f88e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f892:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f896:	4b74      	ldr	r3, [pc, #464]	; (800fa68 <_dtoa_r+0x2e8>)
 800f898:	2200      	movs	r2, #0
 800f89a:	4630      	mov	r0, r6
 800f89c:	4639      	mov	r1, r7
 800f89e:	f7f0 fd03 	bl	80002a8 <__aeabi_dsub>
 800f8a2:	a365      	add	r3, pc, #404	; (adr r3, 800fa38 <_dtoa_r+0x2b8>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	f7f0 feb6 	bl	8000618 <__aeabi_dmul>
 800f8ac:	a364      	add	r3, pc, #400	; (adr r3, 800fa40 <_dtoa_r+0x2c0>)
 800f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b2:	f7f0 fcfb 	bl	80002ac <__adddf3>
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	460f      	mov	r7, r1
 800f8bc:	f7f0 fe42 	bl	8000544 <__aeabi_i2d>
 800f8c0:	a361      	add	r3, pc, #388	; (adr r3, 800fa48 <_dtoa_r+0x2c8>)
 800f8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c6:	f7f0 fea7 	bl	8000618 <__aeabi_dmul>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f7f0 fceb 	bl	80002ac <__adddf3>
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	f7f1 f94d 	bl	8000b78 <__aeabi_d2iz>
 800f8de:	2200      	movs	r2, #0
 800f8e0:	9000      	str	r0, [sp, #0]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	4639      	mov	r1, r7
 800f8e8:	f7f1 f908 	bl	8000afc <__aeabi_dcmplt>
 800f8ec:	b150      	cbz	r0, 800f904 <_dtoa_r+0x184>
 800f8ee:	9800      	ldr	r0, [sp, #0]
 800f8f0:	f7f0 fe28 	bl	8000544 <__aeabi_i2d>
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	463b      	mov	r3, r7
 800f8f8:	f7f1 f8f6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8fc:	b910      	cbnz	r0, 800f904 <_dtoa_r+0x184>
 800f8fe:	9b00      	ldr	r3, [sp, #0]
 800f900:	3b01      	subs	r3, #1
 800f902:	9300      	str	r3, [sp, #0]
 800f904:	9b00      	ldr	r3, [sp, #0]
 800f906:	2b16      	cmp	r3, #22
 800f908:	d85a      	bhi.n	800f9c0 <_dtoa_r+0x240>
 800f90a:	9a00      	ldr	r2, [sp, #0]
 800f90c:	4b57      	ldr	r3, [pc, #348]	; (800fa6c <_dtoa_r+0x2ec>)
 800f90e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	ec51 0b19 	vmov	r0, r1, d9
 800f91a:	f7f1 f8ef 	bl	8000afc <__aeabi_dcmplt>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d050      	beq.n	800f9c4 <_dtoa_r+0x244>
 800f922:	9b00      	ldr	r3, [sp, #0]
 800f924:	3b01      	subs	r3, #1
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	2300      	movs	r3, #0
 800f92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f92e:	1b5d      	subs	r5, r3, r5
 800f930:	1e6b      	subs	r3, r5, #1
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	bf45      	ittet	mi
 800f936:	f1c5 0301 	rsbmi	r3, r5, #1
 800f93a:	9304      	strmi	r3, [sp, #16]
 800f93c:	2300      	movpl	r3, #0
 800f93e:	2300      	movmi	r3, #0
 800f940:	bf4c      	ite	mi
 800f942:	9305      	strmi	r3, [sp, #20]
 800f944:	9304      	strpl	r3, [sp, #16]
 800f946:	9b00      	ldr	r3, [sp, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	db3d      	blt.n	800f9c8 <_dtoa_r+0x248>
 800f94c:	9b05      	ldr	r3, [sp, #20]
 800f94e:	9a00      	ldr	r2, [sp, #0]
 800f950:	920a      	str	r2, [sp, #40]	; 0x28
 800f952:	4413      	add	r3, r2
 800f954:	9305      	str	r3, [sp, #20]
 800f956:	2300      	movs	r3, #0
 800f958:	9307      	str	r3, [sp, #28]
 800f95a:	9b06      	ldr	r3, [sp, #24]
 800f95c:	2b09      	cmp	r3, #9
 800f95e:	f200 8089 	bhi.w	800fa74 <_dtoa_r+0x2f4>
 800f962:	2b05      	cmp	r3, #5
 800f964:	bfc4      	itt	gt
 800f966:	3b04      	subgt	r3, #4
 800f968:	9306      	strgt	r3, [sp, #24]
 800f96a:	9b06      	ldr	r3, [sp, #24]
 800f96c:	f1a3 0302 	sub.w	r3, r3, #2
 800f970:	bfcc      	ite	gt
 800f972:	2500      	movgt	r5, #0
 800f974:	2501      	movle	r5, #1
 800f976:	2b03      	cmp	r3, #3
 800f978:	f200 8087 	bhi.w	800fa8a <_dtoa_r+0x30a>
 800f97c:	e8df f003 	tbb	[pc, r3]
 800f980:	59383a2d 	.word	0x59383a2d
 800f984:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f988:	441d      	add	r5, r3
 800f98a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f98e:	2b20      	cmp	r3, #32
 800f990:	bfc1      	itttt	gt
 800f992:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f996:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f99a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f99e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f9a2:	bfda      	itte	le
 800f9a4:	f1c3 0320 	rsble	r3, r3, #32
 800f9a8:	fa06 f003 	lslle.w	r0, r6, r3
 800f9ac:	4318      	orrgt	r0, r3
 800f9ae:	f7f0 fdb9 	bl	8000524 <__aeabi_ui2d>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f9ba:	3d01      	subs	r5, #1
 800f9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800f9be:	e76a      	b.n	800f896 <_dtoa_r+0x116>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e7b2      	b.n	800f92a <_dtoa_r+0x1aa>
 800f9c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9c6:	e7b1      	b.n	800f92c <_dtoa_r+0x1ac>
 800f9c8:	9b04      	ldr	r3, [sp, #16]
 800f9ca:	9a00      	ldr	r2, [sp, #0]
 800f9cc:	1a9b      	subs	r3, r3, r2
 800f9ce:	9304      	str	r3, [sp, #16]
 800f9d0:	4253      	negs	r3, r2
 800f9d2:	9307      	str	r3, [sp, #28]
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9d8:	e7bf      	b.n	800f95a <_dtoa_r+0x1da>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	9308      	str	r3, [sp, #32]
 800f9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	dc55      	bgt.n	800fa90 <_dtoa_r+0x310>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ee:	e00c      	b.n	800fa0a <_dtoa_r+0x28a>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e7f3      	b.n	800f9dc <_dtoa_r+0x25c>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9f8:	9308      	str	r3, [sp, #32]
 800f9fa:	9b00      	ldr	r3, [sp, #0]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	9302      	str	r3, [sp, #8]
 800fa00:	3301      	adds	r3, #1
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	9303      	str	r3, [sp, #12]
 800fa06:	bfb8      	it	lt
 800fa08:	2301      	movlt	r3, #1
 800fa0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	6042      	str	r2, [r0, #4]
 800fa10:	2204      	movs	r2, #4
 800fa12:	f102 0614 	add.w	r6, r2, #20
 800fa16:	429e      	cmp	r6, r3
 800fa18:	6841      	ldr	r1, [r0, #4]
 800fa1a:	d93d      	bls.n	800fa98 <_dtoa_r+0x318>
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 fca9 	bl	8010374 <_Balloc>
 800fa22:	9001      	str	r0, [sp, #4]
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d13b      	bne.n	800faa0 <_dtoa_r+0x320>
 800fa28:	4b11      	ldr	r3, [pc, #68]	; (800fa70 <_dtoa_r+0x2f0>)
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa30:	e6c0      	b.n	800f7b4 <_dtoa_r+0x34>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e7df      	b.n	800f9f6 <_dtoa_r+0x276>
 800fa36:	bf00      	nop
 800fa38:	636f4361 	.word	0x636f4361
 800fa3c:	3fd287a7 	.word	0x3fd287a7
 800fa40:	8b60c8b3 	.word	0x8b60c8b3
 800fa44:	3fc68a28 	.word	0x3fc68a28
 800fa48:	509f79fb 	.word	0x509f79fb
 800fa4c:	3fd34413 	.word	0x3fd34413
 800fa50:	0801465d 	.word	0x0801465d
 800fa54:	08014674 	.word	0x08014674
 800fa58:	7ff00000 	.word	0x7ff00000
 800fa5c:	08014659 	.word	0x08014659
 800fa60:	08014650 	.word	0x08014650
 800fa64:	0801462d 	.word	0x0801462d
 800fa68:	3ff80000 	.word	0x3ff80000
 800fa6c:	08014768 	.word	0x08014768
 800fa70:	080146cf 	.word	0x080146cf
 800fa74:	2501      	movs	r5, #1
 800fa76:	2300      	movs	r3, #0
 800fa78:	9306      	str	r3, [sp, #24]
 800fa7a:	9508      	str	r5, [sp, #32]
 800fa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa84:	2200      	movs	r2, #0
 800fa86:	2312      	movs	r3, #18
 800fa88:	e7b0      	b.n	800f9ec <_dtoa_r+0x26c>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	9308      	str	r3, [sp, #32]
 800fa8e:	e7f5      	b.n	800fa7c <_dtoa_r+0x2fc>
 800fa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa96:	e7b8      	b.n	800fa0a <_dtoa_r+0x28a>
 800fa98:	3101      	adds	r1, #1
 800fa9a:	6041      	str	r1, [r0, #4]
 800fa9c:	0052      	lsls	r2, r2, #1
 800fa9e:	e7b8      	b.n	800fa12 <_dtoa_r+0x292>
 800faa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faa2:	9a01      	ldr	r2, [sp, #4]
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	2b0e      	cmp	r3, #14
 800faaa:	f200 809d 	bhi.w	800fbe8 <_dtoa_r+0x468>
 800faae:	2d00      	cmp	r5, #0
 800fab0:	f000 809a 	beq.w	800fbe8 <_dtoa_r+0x468>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	dd32      	ble.n	800fb20 <_dtoa_r+0x3a0>
 800faba:	4ab7      	ldr	r2, [pc, #732]	; (800fd98 <_dtoa_r+0x618>)
 800fabc:	f003 030f 	and.w	r3, r3, #15
 800fac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fac8:	9b00      	ldr	r3, [sp, #0]
 800faca:	05d8      	lsls	r0, r3, #23
 800facc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fad0:	d516      	bpl.n	800fb00 <_dtoa_r+0x380>
 800fad2:	4bb2      	ldr	r3, [pc, #712]	; (800fd9c <_dtoa_r+0x61c>)
 800fad4:	ec51 0b19 	vmov	r0, r1, d9
 800fad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fadc:	f7f0 fec6 	bl	800086c <__aeabi_ddiv>
 800fae0:	f007 070f 	and.w	r7, r7, #15
 800fae4:	4682      	mov	sl, r0
 800fae6:	468b      	mov	fp, r1
 800fae8:	2503      	movs	r5, #3
 800faea:	4eac      	ldr	r6, [pc, #688]	; (800fd9c <_dtoa_r+0x61c>)
 800faec:	b957      	cbnz	r7, 800fb04 <_dtoa_r+0x384>
 800faee:	4642      	mov	r2, r8
 800faf0:	464b      	mov	r3, r9
 800faf2:	4650      	mov	r0, sl
 800faf4:	4659      	mov	r1, fp
 800faf6:	f7f0 feb9 	bl	800086c <__aeabi_ddiv>
 800fafa:	4682      	mov	sl, r0
 800fafc:	468b      	mov	fp, r1
 800fafe:	e028      	b.n	800fb52 <_dtoa_r+0x3d2>
 800fb00:	2502      	movs	r5, #2
 800fb02:	e7f2      	b.n	800faea <_dtoa_r+0x36a>
 800fb04:	07f9      	lsls	r1, r7, #31
 800fb06:	d508      	bpl.n	800fb1a <_dtoa_r+0x39a>
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4649      	mov	r1, r9
 800fb0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb10:	f7f0 fd82 	bl	8000618 <__aeabi_dmul>
 800fb14:	3501      	adds	r5, #1
 800fb16:	4680      	mov	r8, r0
 800fb18:	4689      	mov	r9, r1
 800fb1a:	107f      	asrs	r7, r7, #1
 800fb1c:	3608      	adds	r6, #8
 800fb1e:	e7e5      	b.n	800faec <_dtoa_r+0x36c>
 800fb20:	f000 809b 	beq.w	800fc5a <_dtoa_r+0x4da>
 800fb24:	9b00      	ldr	r3, [sp, #0]
 800fb26:	4f9d      	ldr	r7, [pc, #628]	; (800fd9c <_dtoa_r+0x61c>)
 800fb28:	425e      	negs	r6, r3
 800fb2a:	4b9b      	ldr	r3, [pc, #620]	; (800fd98 <_dtoa_r+0x618>)
 800fb2c:	f006 020f 	and.w	r2, r6, #15
 800fb30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb38:	ec51 0b19 	vmov	r0, r1, d9
 800fb3c:	f7f0 fd6c 	bl	8000618 <__aeabi_dmul>
 800fb40:	1136      	asrs	r6, r6, #4
 800fb42:	4682      	mov	sl, r0
 800fb44:	468b      	mov	fp, r1
 800fb46:	2300      	movs	r3, #0
 800fb48:	2502      	movs	r5, #2
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	d17a      	bne.n	800fc44 <_dtoa_r+0x4c4>
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1d3      	bne.n	800fafa <_dtoa_r+0x37a>
 800fb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8082 	beq.w	800fc5e <_dtoa_r+0x4de>
 800fb5a:	4b91      	ldr	r3, [pc, #580]	; (800fda0 <_dtoa_r+0x620>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	4650      	mov	r0, sl
 800fb60:	4659      	mov	r1, fp
 800fb62:	f7f0 ffcb 	bl	8000afc <__aeabi_dcmplt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d079      	beq.n	800fc5e <_dtoa_r+0x4de>
 800fb6a:	9b03      	ldr	r3, [sp, #12]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d076      	beq.n	800fc5e <_dtoa_r+0x4de>
 800fb70:	9b02      	ldr	r3, [sp, #8]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	dd36      	ble.n	800fbe4 <_dtoa_r+0x464>
 800fb76:	9b00      	ldr	r3, [sp, #0]
 800fb78:	4650      	mov	r0, sl
 800fb7a:	4659      	mov	r1, fp
 800fb7c:	1e5f      	subs	r7, r3, #1
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4b88      	ldr	r3, [pc, #544]	; (800fda4 <_dtoa_r+0x624>)
 800fb82:	f7f0 fd49 	bl	8000618 <__aeabi_dmul>
 800fb86:	9e02      	ldr	r6, [sp, #8]
 800fb88:	4682      	mov	sl, r0
 800fb8a:	468b      	mov	fp, r1
 800fb8c:	3501      	adds	r5, #1
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f7f0 fcd8 	bl	8000544 <__aeabi_i2d>
 800fb94:	4652      	mov	r2, sl
 800fb96:	465b      	mov	r3, fp
 800fb98:	f7f0 fd3e 	bl	8000618 <__aeabi_dmul>
 800fb9c:	4b82      	ldr	r3, [pc, #520]	; (800fda8 <_dtoa_r+0x628>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f7f0 fb84 	bl	80002ac <__adddf3>
 800fba4:	46d0      	mov	r8, sl
 800fba6:	46d9      	mov	r9, fp
 800fba8:	4682      	mov	sl, r0
 800fbaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	d158      	bne.n	800fc64 <_dtoa_r+0x4e4>
 800fbb2:	4b7e      	ldr	r3, [pc, #504]	; (800fdac <_dtoa_r+0x62c>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4640      	mov	r0, r8
 800fbb8:	4649      	mov	r1, r9
 800fbba:	f7f0 fb75 	bl	80002a8 <__aeabi_dsub>
 800fbbe:	4652      	mov	r2, sl
 800fbc0:	465b      	mov	r3, fp
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4689      	mov	r9, r1
 800fbc6:	f7f0 ffb7 	bl	8000b38 <__aeabi_dcmpgt>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	f040 8295 	bne.w	80100fa <_dtoa_r+0x97a>
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fbd6:	4640      	mov	r0, r8
 800fbd8:	4649      	mov	r1, r9
 800fbda:	f7f0 ff8f 	bl	8000afc <__aeabi_dcmplt>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	f040 8289 	bne.w	80100f6 <_dtoa_r+0x976>
 800fbe4:	ec5b ab19 	vmov	sl, fp, d9
 800fbe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f2c0 8148 	blt.w	800fe80 <_dtoa_r+0x700>
 800fbf0:	9a00      	ldr	r2, [sp, #0]
 800fbf2:	2a0e      	cmp	r2, #14
 800fbf4:	f300 8144 	bgt.w	800fe80 <_dtoa_r+0x700>
 800fbf8:	4b67      	ldr	r3, [pc, #412]	; (800fd98 <_dtoa_r+0x618>)
 800fbfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f280 80d5 	bge.w	800fdb4 <_dtoa_r+0x634>
 800fc0a:	9b03      	ldr	r3, [sp, #12]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f300 80d1 	bgt.w	800fdb4 <_dtoa_r+0x634>
 800fc12:	f040 826f 	bne.w	80100f4 <_dtoa_r+0x974>
 800fc16:	4b65      	ldr	r3, [pc, #404]	; (800fdac <_dtoa_r+0x62c>)
 800fc18:	2200      	movs	r2, #0
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	f7f0 fcfb 	bl	8000618 <__aeabi_dmul>
 800fc22:	4652      	mov	r2, sl
 800fc24:	465b      	mov	r3, fp
 800fc26:	f7f0 ff7d 	bl	8000b24 <__aeabi_dcmpge>
 800fc2a:	9e03      	ldr	r6, [sp, #12]
 800fc2c:	4637      	mov	r7, r6
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f040 8245 	bne.w	80100be <_dtoa_r+0x93e>
 800fc34:	9d01      	ldr	r5, [sp, #4]
 800fc36:	2331      	movs	r3, #49	; 0x31
 800fc38:	f805 3b01 	strb.w	r3, [r5], #1
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	9300      	str	r3, [sp, #0]
 800fc42:	e240      	b.n	80100c6 <_dtoa_r+0x946>
 800fc44:	07f2      	lsls	r2, r6, #31
 800fc46:	d505      	bpl.n	800fc54 <_dtoa_r+0x4d4>
 800fc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc4c:	f7f0 fce4 	bl	8000618 <__aeabi_dmul>
 800fc50:	3501      	adds	r5, #1
 800fc52:	2301      	movs	r3, #1
 800fc54:	1076      	asrs	r6, r6, #1
 800fc56:	3708      	adds	r7, #8
 800fc58:	e777      	b.n	800fb4a <_dtoa_r+0x3ca>
 800fc5a:	2502      	movs	r5, #2
 800fc5c:	e779      	b.n	800fb52 <_dtoa_r+0x3d2>
 800fc5e:	9f00      	ldr	r7, [sp, #0]
 800fc60:	9e03      	ldr	r6, [sp, #12]
 800fc62:	e794      	b.n	800fb8e <_dtoa_r+0x40e>
 800fc64:	9901      	ldr	r1, [sp, #4]
 800fc66:	4b4c      	ldr	r3, [pc, #304]	; (800fd98 <_dtoa_r+0x618>)
 800fc68:	4431      	add	r1, r6
 800fc6a:	910d      	str	r1, [sp, #52]	; 0x34
 800fc6c:	9908      	ldr	r1, [sp, #32]
 800fc6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc76:	2900      	cmp	r1, #0
 800fc78:	d043      	beq.n	800fd02 <_dtoa_r+0x582>
 800fc7a:	494d      	ldr	r1, [pc, #308]	; (800fdb0 <_dtoa_r+0x630>)
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	f7f0 fdf5 	bl	800086c <__aeabi_ddiv>
 800fc82:	4652      	mov	r2, sl
 800fc84:	465b      	mov	r3, fp
 800fc86:	f7f0 fb0f 	bl	80002a8 <__aeabi_dsub>
 800fc8a:	9d01      	ldr	r5, [sp, #4]
 800fc8c:	4682      	mov	sl, r0
 800fc8e:	468b      	mov	fp, r1
 800fc90:	4649      	mov	r1, r9
 800fc92:	4640      	mov	r0, r8
 800fc94:	f7f0 ff70 	bl	8000b78 <__aeabi_d2iz>
 800fc98:	4606      	mov	r6, r0
 800fc9a:	f7f0 fc53 	bl	8000544 <__aeabi_i2d>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 faff 	bl	80002a8 <__aeabi_dsub>
 800fcaa:	3630      	adds	r6, #48	; 0x30
 800fcac:	f805 6b01 	strb.w	r6, [r5], #1
 800fcb0:	4652      	mov	r2, sl
 800fcb2:	465b      	mov	r3, fp
 800fcb4:	4680      	mov	r8, r0
 800fcb6:	4689      	mov	r9, r1
 800fcb8:	f7f0 ff20 	bl	8000afc <__aeabi_dcmplt>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d163      	bne.n	800fd88 <_dtoa_r+0x608>
 800fcc0:	4642      	mov	r2, r8
 800fcc2:	464b      	mov	r3, r9
 800fcc4:	4936      	ldr	r1, [pc, #216]	; (800fda0 <_dtoa_r+0x620>)
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f7f0 faee 	bl	80002a8 <__aeabi_dsub>
 800fccc:	4652      	mov	r2, sl
 800fcce:	465b      	mov	r3, fp
 800fcd0:	f7f0 ff14 	bl	8000afc <__aeabi_dcmplt>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	f040 80b5 	bne.w	800fe44 <_dtoa_r+0x6c4>
 800fcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcdc:	429d      	cmp	r5, r3
 800fcde:	d081      	beq.n	800fbe4 <_dtoa_r+0x464>
 800fce0:	4b30      	ldr	r3, [pc, #192]	; (800fda4 <_dtoa_r+0x624>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	4650      	mov	r0, sl
 800fce6:	4659      	mov	r1, fp
 800fce8:	f7f0 fc96 	bl	8000618 <__aeabi_dmul>
 800fcec:	4b2d      	ldr	r3, [pc, #180]	; (800fda4 <_dtoa_r+0x624>)
 800fcee:	4682      	mov	sl, r0
 800fcf0:	468b      	mov	fp, r1
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f7f0 fc8e 	bl	8000618 <__aeabi_dmul>
 800fcfc:	4680      	mov	r8, r0
 800fcfe:	4689      	mov	r9, r1
 800fd00:	e7c6      	b.n	800fc90 <_dtoa_r+0x510>
 800fd02:	4650      	mov	r0, sl
 800fd04:	4659      	mov	r1, fp
 800fd06:	f7f0 fc87 	bl	8000618 <__aeabi_dmul>
 800fd0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd0c:	9d01      	ldr	r5, [sp, #4]
 800fd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd10:	4682      	mov	sl, r0
 800fd12:	468b      	mov	fp, r1
 800fd14:	4649      	mov	r1, r9
 800fd16:	4640      	mov	r0, r8
 800fd18:	f7f0 ff2e 	bl	8000b78 <__aeabi_d2iz>
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	f7f0 fc11 	bl	8000544 <__aeabi_i2d>
 800fd22:	3630      	adds	r6, #48	; 0x30
 800fd24:	4602      	mov	r2, r0
 800fd26:	460b      	mov	r3, r1
 800fd28:	4640      	mov	r0, r8
 800fd2a:	4649      	mov	r1, r9
 800fd2c:	f7f0 fabc 	bl	80002a8 <__aeabi_dsub>
 800fd30:	f805 6b01 	strb.w	r6, [r5], #1
 800fd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd36:	429d      	cmp	r5, r3
 800fd38:	4680      	mov	r8, r0
 800fd3a:	4689      	mov	r9, r1
 800fd3c:	f04f 0200 	mov.w	r2, #0
 800fd40:	d124      	bne.n	800fd8c <_dtoa_r+0x60c>
 800fd42:	4b1b      	ldr	r3, [pc, #108]	; (800fdb0 <_dtoa_r+0x630>)
 800fd44:	4650      	mov	r0, sl
 800fd46:	4659      	mov	r1, fp
 800fd48:	f7f0 fab0 	bl	80002ac <__adddf3>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4640      	mov	r0, r8
 800fd52:	4649      	mov	r1, r9
 800fd54:	f7f0 fef0 	bl	8000b38 <__aeabi_dcmpgt>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d173      	bne.n	800fe44 <_dtoa_r+0x6c4>
 800fd5c:	4652      	mov	r2, sl
 800fd5e:	465b      	mov	r3, fp
 800fd60:	4913      	ldr	r1, [pc, #76]	; (800fdb0 <_dtoa_r+0x630>)
 800fd62:	2000      	movs	r0, #0
 800fd64:	f7f0 faa0 	bl	80002a8 <__aeabi_dsub>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	4649      	mov	r1, r9
 800fd70:	f7f0 fec4 	bl	8000afc <__aeabi_dcmplt>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f43f af35 	beq.w	800fbe4 <_dtoa_r+0x464>
 800fd7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd7c:	1e6b      	subs	r3, r5, #1
 800fd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd84:	2b30      	cmp	r3, #48	; 0x30
 800fd86:	d0f8      	beq.n	800fd7a <_dtoa_r+0x5fa>
 800fd88:	9700      	str	r7, [sp, #0]
 800fd8a:	e049      	b.n	800fe20 <_dtoa_r+0x6a0>
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <_dtoa_r+0x624>)
 800fd8e:	f7f0 fc43 	bl	8000618 <__aeabi_dmul>
 800fd92:	4680      	mov	r8, r0
 800fd94:	4689      	mov	r9, r1
 800fd96:	e7bd      	b.n	800fd14 <_dtoa_r+0x594>
 800fd98:	08014768 	.word	0x08014768
 800fd9c:	08014740 	.word	0x08014740
 800fda0:	3ff00000 	.word	0x3ff00000
 800fda4:	40240000 	.word	0x40240000
 800fda8:	401c0000 	.word	0x401c0000
 800fdac:	40140000 	.word	0x40140000
 800fdb0:	3fe00000 	.word	0x3fe00000
 800fdb4:	9d01      	ldr	r5, [sp, #4]
 800fdb6:	4656      	mov	r6, sl
 800fdb8:	465f      	mov	r7, fp
 800fdba:	4642      	mov	r2, r8
 800fdbc:	464b      	mov	r3, r9
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f7f0 fd53 	bl	800086c <__aeabi_ddiv>
 800fdc6:	f7f0 fed7 	bl	8000b78 <__aeabi_d2iz>
 800fdca:	4682      	mov	sl, r0
 800fdcc:	f7f0 fbba 	bl	8000544 <__aeabi_i2d>
 800fdd0:	4642      	mov	r2, r8
 800fdd2:	464b      	mov	r3, r9
 800fdd4:	f7f0 fc20 	bl	8000618 <__aeabi_dmul>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	460b      	mov	r3, r1
 800fddc:	4630      	mov	r0, r6
 800fdde:	4639      	mov	r1, r7
 800fde0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fde4:	f7f0 fa60 	bl	80002a8 <__aeabi_dsub>
 800fde8:	f805 6b01 	strb.w	r6, [r5], #1
 800fdec:	9e01      	ldr	r6, [sp, #4]
 800fdee:	9f03      	ldr	r7, [sp, #12]
 800fdf0:	1bae      	subs	r6, r5, r6
 800fdf2:	42b7      	cmp	r7, r6
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	d135      	bne.n	800fe66 <_dtoa_r+0x6e6>
 800fdfa:	f7f0 fa57 	bl	80002ac <__adddf3>
 800fdfe:	4642      	mov	r2, r8
 800fe00:	464b      	mov	r3, r9
 800fe02:	4606      	mov	r6, r0
 800fe04:	460f      	mov	r7, r1
 800fe06:	f7f0 fe97 	bl	8000b38 <__aeabi_dcmpgt>
 800fe0a:	b9d0      	cbnz	r0, 800fe42 <_dtoa_r+0x6c2>
 800fe0c:	4642      	mov	r2, r8
 800fe0e:	464b      	mov	r3, r9
 800fe10:	4630      	mov	r0, r6
 800fe12:	4639      	mov	r1, r7
 800fe14:	f7f0 fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe18:	b110      	cbz	r0, 800fe20 <_dtoa_r+0x6a0>
 800fe1a:	f01a 0f01 	tst.w	sl, #1
 800fe1e:	d110      	bne.n	800fe42 <_dtoa_r+0x6c2>
 800fe20:	4620      	mov	r0, r4
 800fe22:	ee18 1a10 	vmov	r1, s16
 800fe26:	f000 fae5 	bl	80103f4 <_Bfree>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	9800      	ldr	r0, [sp, #0]
 800fe2e:	702b      	strb	r3, [r5, #0]
 800fe30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe32:	3001      	adds	r0, #1
 800fe34:	6018      	str	r0, [r3, #0]
 800fe36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f43f acf1 	beq.w	800f820 <_dtoa_r+0xa0>
 800fe3e:	601d      	str	r5, [r3, #0]
 800fe40:	e4ee      	b.n	800f820 <_dtoa_r+0xa0>
 800fe42:	9f00      	ldr	r7, [sp, #0]
 800fe44:	462b      	mov	r3, r5
 800fe46:	461d      	mov	r5, r3
 800fe48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe4c:	2a39      	cmp	r2, #57	; 0x39
 800fe4e:	d106      	bne.n	800fe5e <_dtoa_r+0x6de>
 800fe50:	9a01      	ldr	r2, [sp, #4]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d1f7      	bne.n	800fe46 <_dtoa_r+0x6c6>
 800fe56:	9901      	ldr	r1, [sp, #4]
 800fe58:	2230      	movs	r2, #48	; 0x30
 800fe5a:	3701      	adds	r7, #1
 800fe5c:	700a      	strb	r2, [r1, #0]
 800fe5e:	781a      	ldrb	r2, [r3, #0]
 800fe60:	3201      	adds	r2, #1
 800fe62:	701a      	strb	r2, [r3, #0]
 800fe64:	e790      	b.n	800fd88 <_dtoa_r+0x608>
 800fe66:	4ba6      	ldr	r3, [pc, #664]	; (8010100 <_dtoa_r+0x980>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f7f0 fbd5 	bl	8000618 <__aeabi_dmul>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2300      	movs	r3, #0
 800fe72:	4606      	mov	r6, r0
 800fe74:	460f      	mov	r7, r1
 800fe76:	f7f0 fe37 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d09d      	beq.n	800fdba <_dtoa_r+0x63a>
 800fe7e:	e7cf      	b.n	800fe20 <_dtoa_r+0x6a0>
 800fe80:	9a08      	ldr	r2, [sp, #32]
 800fe82:	2a00      	cmp	r2, #0
 800fe84:	f000 80d7 	beq.w	8010036 <_dtoa_r+0x8b6>
 800fe88:	9a06      	ldr	r2, [sp, #24]
 800fe8a:	2a01      	cmp	r2, #1
 800fe8c:	f300 80ba 	bgt.w	8010004 <_dtoa_r+0x884>
 800fe90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe92:	2a00      	cmp	r2, #0
 800fe94:	f000 80b2 	beq.w	800fffc <_dtoa_r+0x87c>
 800fe98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe9c:	9e07      	ldr	r6, [sp, #28]
 800fe9e:	9d04      	ldr	r5, [sp, #16]
 800fea0:	9a04      	ldr	r2, [sp, #16]
 800fea2:	441a      	add	r2, r3
 800fea4:	9204      	str	r2, [sp, #16]
 800fea6:	9a05      	ldr	r2, [sp, #20]
 800fea8:	2101      	movs	r1, #1
 800feaa:	441a      	add	r2, r3
 800feac:	4620      	mov	r0, r4
 800feae:	9205      	str	r2, [sp, #20]
 800feb0:	f000 fb58 	bl	8010564 <__i2b>
 800feb4:	4607      	mov	r7, r0
 800feb6:	2d00      	cmp	r5, #0
 800feb8:	dd0c      	ble.n	800fed4 <_dtoa_r+0x754>
 800feba:	9b05      	ldr	r3, [sp, #20]
 800febc:	2b00      	cmp	r3, #0
 800febe:	dd09      	ble.n	800fed4 <_dtoa_r+0x754>
 800fec0:	42ab      	cmp	r3, r5
 800fec2:	9a04      	ldr	r2, [sp, #16]
 800fec4:	bfa8      	it	ge
 800fec6:	462b      	movge	r3, r5
 800fec8:	1ad2      	subs	r2, r2, r3
 800feca:	9204      	str	r2, [sp, #16]
 800fecc:	9a05      	ldr	r2, [sp, #20]
 800fece:	1aed      	subs	r5, r5, r3
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	9305      	str	r3, [sp, #20]
 800fed4:	9b07      	ldr	r3, [sp, #28]
 800fed6:	b31b      	cbz	r3, 800ff20 <_dtoa_r+0x7a0>
 800fed8:	9b08      	ldr	r3, [sp, #32]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 80af 	beq.w	801003e <_dtoa_r+0x8be>
 800fee0:	2e00      	cmp	r6, #0
 800fee2:	dd13      	ble.n	800ff0c <_dtoa_r+0x78c>
 800fee4:	4639      	mov	r1, r7
 800fee6:	4632      	mov	r2, r6
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 fbfb 	bl	80106e4 <__pow5mult>
 800feee:	ee18 2a10 	vmov	r2, s16
 800fef2:	4601      	mov	r1, r0
 800fef4:	4607      	mov	r7, r0
 800fef6:	4620      	mov	r0, r4
 800fef8:	f000 fb4a 	bl	8010590 <__multiply>
 800fefc:	ee18 1a10 	vmov	r1, s16
 800ff00:	4680      	mov	r8, r0
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 fa76 	bl	80103f4 <_Bfree>
 800ff08:	ee08 8a10 	vmov	s16, r8
 800ff0c:	9b07      	ldr	r3, [sp, #28]
 800ff0e:	1b9a      	subs	r2, r3, r6
 800ff10:	d006      	beq.n	800ff20 <_dtoa_r+0x7a0>
 800ff12:	ee18 1a10 	vmov	r1, s16
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 fbe4 	bl	80106e4 <__pow5mult>
 800ff1c:	ee08 0a10 	vmov	s16, r0
 800ff20:	2101      	movs	r1, #1
 800ff22:	4620      	mov	r0, r4
 800ff24:	f000 fb1e 	bl	8010564 <__i2b>
 800ff28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	4606      	mov	r6, r0
 800ff2e:	f340 8088 	ble.w	8010042 <_dtoa_r+0x8c2>
 800ff32:	461a      	mov	r2, r3
 800ff34:	4601      	mov	r1, r0
 800ff36:	4620      	mov	r0, r4
 800ff38:	f000 fbd4 	bl	80106e4 <__pow5mult>
 800ff3c:	9b06      	ldr	r3, [sp, #24]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	4606      	mov	r6, r0
 800ff42:	f340 8081 	ble.w	8010048 <_dtoa_r+0x8c8>
 800ff46:	f04f 0800 	mov.w	r8, #0
 800ff4a:	6933      	ldr	r3, [r6, #16]
 800ff4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ff50:	6918      	ldr	r0, [r3, #16]
 800ff52:	f000 fab7 	bl	80104c4 <__hi0bits>
 800ff56:	f1c0 0020 	rsb	r0, r0, #32
 800ff5a:	9b05      	ldr	r3, [sp, #20]
 800ff5c:	4418      	add	r0, r3
 800ff5e:	f010 001f 	ands.w	r0, r0, #31
 800ff62:	f000 8092 	beq.w	801008a <_dtoa_r+0x90a>
 800ff66:	f1c0 0320 	rsb	r3, r0, #32
 800ff6a:	2b04      	cmp	r3, #4
 800ff6c:	f340 808a 	ble.w	8010084 <_dtoa_r+0x904>
 800ff70:	f1c0 001c 	rsb	r0, r0, #28
 800ff74:	9b04      	ldr	r3, [sp, #16]
 800ff76:	4403      	add	r3, r0
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	9b05      	ldr	r3, [sp, #20]
 800ff7c:	4403      	add	r3, r0
 800ff7e:	4405      	add	r5, r0
 800ff80:	9305      	str	r3, [sp, #20]
 800ff82:	9b04      	ldr	r3, [sp, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dd07      	ble.n	800ff98 <_dtoa_r+0x818>
 800ff88:	ee18 1a10 	vmov	r1, s16
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 fc02 	bl	8010798 <__lshift>
 800ff94:	ee08 0a10 	vmov	s16, r0
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dd05      	ble.n	800ffaa <_dtoa_r+0x82a>
 800ff9e:	4631      	mov	r1, r6
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f000 fbf8 	bl	8010798 <__lshift>
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d06e      	beq.n	801008e <_dtoa_r+0x90e>
 800ffb0:	ee18 0a10 	vmov	r0, s16
 800ffb4:	4631      	mov	r1, r6
 800ffb6:	f000 fc5f 	bl	8010878 <__mcmp>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	da67      	bge.n	801008e <_dtoa_r+0x90e>
 800ffbe:	9b00      	ldr	r3, [sp, #0]
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	ee18 1a10 	vmov	r1, s16
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	220a      	movs	r2, #10
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 fa33 	bl	8010438 <__multadd>
 800ffd2:	9b08      	ldr	r3, [sp, #32]
 800ffd4:	ee08 0a10 	vmov	s16, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f000 81b1 	beq.w	8010340 <_dtoa_r+0xbc0>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	220a      	movs	r2, #10
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f000 fa27 	bl	8010438 <__multadd>
 800ffea:	9b02      	ldr	r3, [sp, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	4607      	mov	r7, r0
 800fff0:	f300 808e 	bgt.w	8010110 <_dtoa_r+0x990>
 800fff4:	9b06      	ldr	r3, [sp, #24]
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	dc51      	bgt.n	801009e <_dtoa_r+0x91e>
 800fffa:	e089      	b.n	8010110 <_dtoa_r+0x990>
 800fffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010002:	e74b      	b.n	800fe9c <_dtoa_r+0x71c>
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	1e5e      	subs	r6, r3, #1
 8010008:	9b07      	ldr	r3, [sp, #28]
 801000a:	42b3      	cmp	r3, r6
 801000c:	bfbf      	itttt	lt
 801000e:	9b07      	ldrlt	r3, [sp, #28]
 8010010:	9607      	strlt	r6, [sp, #28]
 8010012:	1af2      	sublt	r2, r6, r3
 8010014:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010016:	bfb6      	itet	lt
 8010018:	189b      	addlt	r3, r3, r2
 801001a:	1b9e      	subge	r6, r3, r6
 801001c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	bfb8      	it	lt
 8010022:	2600      	movlt	r6, #0
 8010024:	2b00      	cmp	r3, #0
 8010026:	bfb7      	itett	lt
 8010028:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801002c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010030:	1a9d      	sublt	r5, r3, r2
 8010032:	2300      	movlt	r3, #0
 8010034:	e734      	b.n	800fea0 <_dtoa_r+0x720>
 8010036:	9e07      	ldr	r6, [sp, #28]
 8010038:	9d04      	ldr	r5, [sp, #16]
 801003a:	9f08      	ldr	r7, [sp, #32]
 801003c:	e73b      	b.n	800feb6 <_dtoa_r+0x736>
 801003e:	9a07      	ldr	r2, [sp, #28]
 8010040:	e767      	b.n	800ff12 <_dtoa_r+0x792>
 8010042:	9b06      	ldr	r3, [sp, #24]
 8010044:	2b01      	cmp	r3, #1
 8010046:	dc18      	bgt.n	801007a <_dtoa_r+0x8fa>
 8010048:	f1ba 0f00 	cmp.w	sl, #0
 801004c:	d115      	bne.n	801007a <_dtoa_r+0x8fa>
 801004e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010052:	b993      	cbnz	r3, 801007a <_dtoa_r+0x8fa>
 8010054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010058:	0d1b      	lsrs	r3, r3, #20
 801005a:	051b      	lsls	r3, r3, #20
 801005c:	b183      	cbz	r3, 8010080 <_dtoa_r+0x900>
 801005e:	9b04      	ldr	r3, [sp, #16]
 8010060:	3301      	adds	r3, #1
 8010062:	9304      	str	r3, [sp, #16]
 8010064:	9b05      	ldr	r3, [sp, #20]
 8010066:	3301      	adds	r3, #1
 8010068:	9305      	str	r3, [sp, #20]
 801006a:	f04f 0801 	mov.w	r8, #1
 801006e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010070:	2b00      	cmp	r3, #0
 8010072:	f47f af6a 	bne.w	800ff4a <_dtoa_r+0x7ca>
 8010076:	2001      	movs	r0, #1
 8010078:	e76f      	b.n	800ff5a <_dtoa_r+0x7da>
 801007a:	f04f 0800 	mov.w	r8, #0
 801007e:	e7f6      	b.n	801006e <_dtoa_r+0x8ee>
 8010080:	4698      	mov	r8, r3
 8010082:	e7f4      	b.n	801006e <_dtoa_r+0x8ee>
 8010084:	f43f af7d 	beq.w	800ff82 <_dtoa_r+0x802>
 8010088:	4618      	mov	r0, r3
 801008a:	301c      	adds	r0, #28
 801008c:	e772      	b.n	800ff74 <_dtoa_r+0x7f4>
 801008e:	9b03      	ldr	r3, [sp, #12]
 8010090:	2b00      	cmp	r3, #0
 8010092:	dc37      	bgt.n	8010104 <_dtoa_r+0x984>
 8010094:	9b06      	ldr	r3, [sp, #24]
 8010096:	2b02      	cmp	r3, #2
 8010098:	dd34      	ble.n	8010104 <_dtoa_r+0x984>
 801009a:	9b03      	ldr	r3, [sp, #12]
 801009c:	9302      	str	r3, [sp, #8]
 801009e:	9b02      	ldr	r3, [sp, #8]
 80100a0:	b96b      	cbnz	r3, 80100be <_dtoa_r+0x93e>
 80100a2:	4631      	mov	r1, r6
 80100a4:	2205      	movs	r2, #5
 80100a6:	4620      	mov	r0, r4
 80100a8:	f000 f9c6 	bl	8010438 <__multadd>
 80100ac:	4601      	mov	r1, r0
 80100ae:	4606      	mov	r6, r0
 80100b0:	ee18 0a10 	vmov	r0, s16
 80100b4:	f000 fbe0 	bl	8010878 <__mcmp>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	f73f adbb 	bgt.w	800fc34 <_dtoa_r+0x4b4>
 80100be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c0:	9d01      	ldr	r5, [sp, #4]
 80100c2:	43db      	mvns	r3, r3
 80100c4:	9300      	str	r3, [sp, #0]
 80100c6:	f04f 0800 	mov.w	r8, #0
 80100ca:	4631      	mov	r1, r6
 80100cc:	4620      	mov	r0, r4
 80100ce:	f000 f991 	bl	80103f4 <_Bfree>
 80100d2:	2f00      	cmp	r7, #0
 80100d4:	f43f aea4 	beq.w	800fe20 <_dtoa_r+0x6a0>
 80100d8:	f1b8 0f00 	cmp.w	r8, #0
 80100dc:	d005      	beq.n	80100ea <_dtoa_r+0x96a>
 80100de:	45b8      	cmp	r8, r7
 80100e0:	d003      	beq.n	80100ea <_dtoa_r+0x96a>
 80100e2:	4641      	mov	r1, r8
 80100e4:	4620      	mov	r0, r4
 80100e6:	f000 f985 	bl	80103f4 <_Bfree>
 80100ea:	4639      	mov	r1, r7
 80100ec:	4620      	mov	r0, r4
 80100ee:	f000 f981 	bl	80103f4 <_Bfree>
 80100f2:	e695      	b.n	800fe20 <_dtoa_r+0x6a0>
 80100f4:	2600      	movs	r6, #0
 80100f6:	4637      	mov	r7, r6
 80100f8:	e7e1      	b.n	80100be <_dtoa_r+0x93e>
 80100fa:	9700      	str	r7, [sp, #0]
 80100fc:	4637      	mov	r7, r6
 80100fe:	e599      	b.n	800fc34 <_dtoa_r+0x4b4>
 8010100:	40240000 	.word	0x40240000
 8010104:	9b08      	ldr	r3, [sp, #32]
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80ca 	beq.w	80102a0 <_dtoa_r+0xb20>
 801010c:	9b03      	ldr	r3, [sp, #12]
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	2d00      	cmp	r5, #0
 8010112:	dd05      	ble.n	8010120 <_dtoa_r+0x9a0>
 8010114:	4639      	mov	r1, r7
 8010116:	462a      	mov	r2, r5
 8010118:	4620      	mov	r0, r4
 801011a:	f000 fb3d 	bl	8010798 <__lshift>
 801011e:	4607      	mov	r7, r0
 8010120:	f1b8 0f00 	cmp.w	r8, #0
 8010124:	d05b      	beq.n	80101de <_dtoa_r+0xa5e>
 8010126:	6879      	ldr	r1, [r7, #4]
 8010128:	4620      	mov	r0, r4
 801012a:	f000 f923 	bl	8010374 <_Balloc>
 801012e:	4605      	mov	r5, r0
 8010130:	b928      	cbnz	r0, 801013e <_dtoa_r+0x9be>
 8010132:	4b87      	ldr	r3, [pc, #540]	; (8010350 <_dtoa_r+0xbd0>)
 8010134:	4602      	mov	r2, r0
 8010136:	f240 21ea 	movw	r1, #746	; 0x2ea
 801013a:	f7ff bb3b 	b.w	800f7b4 <_dtoa_r+0x34>
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	3202      	adds	r2, #2
 8010142:	0092      	lsls	r2, r2, #2
 8010144:	f107 010c 	add.w	r1, r7, #12
 8010148:	300c      	adds	r0, #12
 801014a:	f7fe fded 	bl	800ed28 <memcpy>
 801014e:	2201      	movs	r2, #1
 8010150:	4629      	mov	r1, r5
 8010152:	4620      	mov	r0, r4
 8010154:	f000 fb20 	bl	8010798 <__lshift>
 8010158:	9b01      	ldr	r3, [sp, #4]
 801015a:	f103 0901 	add.w	r9, r3, #1
 801015e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010162:	4413      	add	r3, r2
 8010164:	9305      	str	r3, [sp, #20]
 8010166:	f00a 0301 	and.w	r3, sl, #1
 801016a:	46b8      	mov	r8, r7
 801016c:	9304      	str	r3, [sp, #16]
 801016e:	4607      	mov	r7, r0
 8010170:	4631      	mov	r1, r6
 8010172:	ee18 0a10 	vmov	r0, s16
 8010176:	f7ff fa77 	bl	800f668 <quorem>
 801017a:	4641      	mov	r1, r8
 801017c:	9002      	str	r0, [sp, #8]
 801017e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010182:	ee18 0a10 	vmov	r0, s16
 8010186:	f000 fb77 	bl	8010878 <__mcmp>
 801018a:	463a      	mov	r2, r7
 801018c:	9003      	str	r0, [sp, #12]
 801018e:	4631      	mov	r1, r6
 8010190:	4620      	mov	r0, r4
 8010192:	f000 fb8d 	bl	80108b0 <__mdiff>
 8010196:	68c2      	ldr	r2, [r0, #12]
 8010198:	f109 3bff 	add.w	fp, r9, #4294967295
 801019c:	4605      	mov	r5, r0
 801019e:	bb02      	cbnz	r2, 80101e2 <_dtoa_r+0xa62>
 80101a0:	4601      	mov	r1, r0
 80101a2:	ee18 0a10 	vmov	r0, s16
 80101a6:	f000 fb67 	bl	8010878 <__mcmp>
 80101aa:	4602      	mov	r2, r0
 80101ac:	4629      	mov	r1, r5
 80101ae:	4620      	mov	r0, r4
 80101b0:	9207      	str	r2, [sp, #28]
 80101b2:	f000 f91f 	bl	80103f4 <_Bfree>
 80101b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80101ba:	ea43 0102 	orr.w	r1, r3, r2
 80101be:	9b04      	ldr	r3, [sp, #16]
 80101c0:	430b      	orrs	r3, r1
 80101c2:	464d      	mov	r5, r9
 80101c4:	d10f      	bne.n	80101e6 <_dtoa_r+0xa66>
 80101c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80101ca:	d02a      	beq.n	8010222 <_dtoa_r+0xaa2>
 80101cc:	9b03      	ldr	r3, [sp, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	dd02      	ble.n	80101d8 <_dtoa_r+0xa58>
 80101d2:	9b02      	ldr	r3, [sp, #8]
 80101d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80101d8:	f88b a000 	strb.w	sl, [fp]
 80101dc:	e775      	b.n	80100ca <_dtoa_r+0x94a>
 80101de:	4638      	mov	r0, r7
 80101e0:	e7ba      	b.n	8010158 <_dtoa_r+0x9d8>
 80101e2:	2201      	movs	r2, #1
 80101e4:	e7e2      	b.n	80101ac <_dtoa_r+0xa2c>
 80101e6:	9b03      	ldr	r3, [sp, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	db04      	blt.n	80101f6 <_dtoa_r+0xa76>
 80101ec:	9906      	ldr	r1, [sp, #24]
 80101ee:	430b      	orrs	r3, r1
 80101f0:	9904      	ldr	r1, [sp, #16]
 80101f2:	430b      	orrs	r3, r1
 80101f4:	d122      	bne.n	801023c <_dtoa_r+0xabc>
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	ddee      	ble.n	80101d8 <_dtoa_r+0xa58>
 80101fa:	ee18 1a10 	vmov	r1, s16
 80101fe:	2201      	movs	r2, #1
 8010200:	4620      	mov	r0, r4
 8010202:	f000 fac9 	bl	8010798 <__lshift>
 8010206:	4631      	mov	r1, r6
 8010208:	ee08 0a10 	vmov	s16, r0
 801020c:	f000 fb34 	bl	8010878 <__mcmp>
 8010210:	2800      	cmp	r0, #0
 8010212:	dc03      	bgt.n	801021c <_dtoa_r+0xa9c>
 8010214:	d1e0      	bne.n	80101d8 <_dtoa_r+0xa58>
 8010216:	f01a 0f01 	tst.w	sl, #1
 801021a:	d0dd      	beq.n	80101d8 <_dtoa_r+0xa58>
 801021c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010220:	d1d7      	bne.n	80101d2 <_dtoa_r+0xa52>
 8010222:	2339      	movs	r3, #57	; 0x39
 8010224:	f88b 3000 	strb.w	r3, [fp]
 8010228:	462b      	mov	r3, r5
 801022a:	461d      	mov	r5, r3
 801022c:	3b01      	subs	r3, #1
 801022e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010232:	2a39      	cmp	r2, #57	; 0x39
 8010234:	d071      	beq.n	801031a <_dtoa_r+0xb9a>
 8010236:	3201      	adds	r2, #1
 8010238:	701a      	strb	r2, [r3, #0]
 801023a:	e746      	b.n	80100ca <_dtoa_r+0x94a>
 801023c:	2a00      	cmp	r2, #0
 801023e:	dd07      	ble.n	8010250 <_dtoa_r+0xad0>
 8010240:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010244:	d0ed      	beq.n	8010222 <_dtoa_r+0xaa2>
 8010246:	f10a 0301 	add.w	r3, sl, #1
 801024a:	f88b 3000 	strb.w	r3, [fp]
 801024e:	e73c      	b.n	80100ca <_dtoa_r+0x94a>
 8010250:	9b05      	ldr	r3, [sp, #20]
 8010252:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010256:	4599      	cmp	r9, r3
 8010258:	d047      	beq.n	80102ea <_dtoa_r+0xb6a>
 801025a:	ee18 1a10 	vmov	r1, s16
 801025e:	2300      	movs	r3, #0
 8010260:	220a      	movs	r2, #10
 8010262:	4620      	mov	r0, r4
 8010264:	f000 f8e8 	bl	8010438 <__multadd>
 8010268:	45b8      	cmp	r8, r7
 801026a:	ee08 0a10 	vmov	s16, r0
 801026e:	f04f 0300 	mov.w	r3, #0
 8010272:	f04f 020a 	mov.w	r2, #10
 8010276:	4641      	mov	r1, r8
 8010278:	4620      	mov	r0, r4
 801027a:	d106      	bne.n	801028a <_dtoa_r+0xb0a>
 801027c:	f000 f8dc 	bl	8010438 <__multadd>
 8010280:	4680      	mov	r8, r0
 8010282:	4607      	mov	r7, r0
 8010284:	f109 0901 	add.w	r9, r9, #1
 8010288:	e772      	b.n	8010170 <_dtoa_r+0x9f0>
 801028a:	f000 f8d5 	bl	8010438 <__multadd>
 801028e:	4639      	mov	r1, r7
 8010290:	4680      	mov	r8, r0
 8010292:	2300      	movs	r3, #0
 8010294:	220a      	movs	r2, #10
 8010296:	4620      	mov	r0, r4
 8010298:	f000 f8ce 	bl	8010438 <__multadd>
 801029c:	4607      	mov	r7, r0
 801029e:	e7f1      	b.n	8010284 <_dtoa_r+0xb04>
 80102a0:	9b03      	ldr	r3, [sp, #12]
 80102a2:	9302      	str	r3, [sp, #8]
 80102a4:	9d01      	ldr	r5, [sp, #4]
 80102a6:	ee18 0a10 	vmov	r0, s16
 80102aa:	4631      	mov	r1, r6
 80102ac:	f7ff f9dc 	bl	800f668 <quorem>
 80102b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80102b4:	9b01      	ldr	r3, [sp, #4]
 80102b6:	f805 ab01 	strb.w	sl, [r5], #1
 80102ba:	1aea      	subs	r2, r5, r3
 80102bc:	9b02      	ldr	r3, [sp, #8]
 80102be:	4293      	cmp	r3, r2
 80102c0:	dd09      	ble.n	80102d6 <_dtoa_r+0xb56>
 80102c2:	ee18 1a10 	vmov	r1, s16
 80102c6:	2300      	movs	r3, #0
 80102c8:	220a      	movs	r2, #10
 80102ca:	4620      	mov	r0, r4
 80102cc:	f000 f8b4 	bl	8010438 <__multadd>
 80102d0:	ee08 0a10 	vmov	s16, r0
 80102d4:	e7e7      	b.n	80102a6 <_dtoa_r+0xb26>
 80102d6:	9b02      	ldr	r3, [sp, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bfc8      	it	gt
 80102dc:	461d      	movgt	r5, r3
 80102de:	9b01      	ldr	r3, [sp, #4]
 80102e0:	bfd8      	it	le
 80102e2:	2501      	movle	r5, #1
 80102e4:	441d      	add	r5, r3
 80102e6:	f04f 0800 	mov.w	r8, #0
 80102ea:	ee18 1a10 	vmov	r1, s16
 80102ee:	2201      	movs	r2, #1
 80102f0:	4620      	mov	r0, r4
 80102f2:	f000 fa51 	bl	8010798 <__lshift>
 80102f6:	4631      	mov	r1, r6
 80102f8:	ee08 0a10 	vmov	s16, r0
 80102fc:	f000 fabc 	bl	8010878 <__mcmp>
 8010300:	2800      	cmp	r0, #0
 8010302:	dc91      	bgt.n	8010228 <_dtoa_r+0xaa8>
 8010304:	d102      	bne.n	801030c <_dtoa_r+0xb8c>
 8010306:	f01a 0f01 	tst.w	sl, #1
 801030a:	d18d      	bne.n	8010228 <_dtoa_r+0xaa8>
 801030c:	462b      	mov	r3, r5
 801030e:	461d      	mov	r5, r3
 8010310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010314:	2a30      	cmp	r2, #48	; 0x30
 8010316:	d0fa      	beq.n	801030e <_dtoa_r+0xb8e>
 8010318:	e6d7      	b.n	80100ca <_dtoa_r+0x94a>
 801031a:	9a01      	ldr	r2, [sp, #4]
 801031c:	429a      	cmp	r2, r3
 801031e:	d184      	bne.n	801022a <_dtoa_r+0xaaa>
 8010320:	9b00      	ldr	r3, [sp, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	9300      	str	r3, [sp, #0]
 8010326:	2331      	movs	r3, #49	; 0x31
 8010328:	7013      	strb	r3, [r2, #0]
 801032a:	e6ce      	b.n	80100ca <_dtoa_r+0x94a>
 801032c:	4b09      	ldr	r3, [pc, #36]	; (8010354 <_dtoa_r+0xbd4>)
 801032e:	f7ff ba95 	b.w	800f85c <_dtoa_r+0xdc>
 8010332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010334:	2b00      	cmp	r3, #0
 8010336:	f47f aa6e 	bne.w	800f816 <_dtoa_r+0x96>
 801033a:	4b07      	ldr	r3, [pc, #28]	; (8010358 <_dtoa_r+0xbd8>)
 801033c:	f7ff ba8e 	b.w	800f85c <_dtoa_r+0xdc>
 8010340:	9b02      	ldr	r3, [sp, #8]
 8010342:	2b00      	cmp	r3, #0
 8010344:	dcae      	bgt.n	80102a4 <_dtoa_r+0xb24>
 8010346:	9b06      	ldr	r3, [sp, #24]
 8010348:	2b02      	cmp	r3, #2
 801034a:	f73f aea8 	bgt.w	801009e <_dtoa_r+0x91e>
 801034e:	e7a9      	b.n	80102a4 <_dtoa_r+0xb24>
 8010350:	080146cf 	.word	0x080146cf
 8010354:	0801462c 	.word	0x0801462c
 8010358:	08014650 	.word	0x08014650

0801035c <_localeconv_r>:
 801035c:	4800      	ldr	r0, [pc, #0]	; (8010360 <_localeconv_r+0x4>)
 801035e:	4770      	bx	lr
 8010360:	200002d8 	.word	0x200002d8

08010364 <malloc>:
 8010364:	4b02      	ldr	r3, [pc, #8]	; (8010370 <malloc+0xc>)
 8010366:	4601      	mov	r1, r0
 8010368:	6818      	ldr	r0, [r3, #0]
 801036a:	f000 bc09 	b.w	8010b80 <_malloc_r>
 801036e:	bf00      	nop
 8010370:	20000184 	.word	0x20000184

08010374 <_Balloc>:
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010378:	4604      	mov	r4, r0
 801037a:	460d      	mov	r5, r1
 801037c:	b976      	cbnz	r6, 801039c <_Balloc+0x28>
 801037e:	2010      	movs	r0, #16
 8010380:	f7ff fff0 	bl	8010364 <malloc>
 8010384:	4602      	mov	r2, r0
 8010386:	6260      	str	r0, [r4, #36]	; 0x24
 8010388:	b920      	cbnz	r0, 8010394 <_Balloc+0x20>
 801038a:	4b18      	ldr	r3, [pc, #96]	; (80103ec <_Balloc+0x78>)
 801038c:	4818      	ldr	r0, [pc, #96]	; (80103f0 <_Balloc+0x7c>)
 801038e:	2166      	movs	r1, #102	; 0x66
 8010390:	f000 fdd6 	bl	8010f40 <__assert_func>
 8010394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010398:	6006      	str	r6, [r0, #0]
 801039a:	60c6      	str	r6, [r0, #12]
 801039c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801039e:	68f3      	ldr	r3, [r6, #12]
 80103a0:	b183      	cbz	r3, 80103c4 <_Balloc+0x50>
 80103a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103aa:	b9b8      	cbnz	r0, 80103dc <_Balloc+0x68>
 80103ac:	2101      	movs	r1, #1
 80103ae:	fa01 f605 	lsl.w	r6, r1, r5
 80103b2:	1d72      	adds	r2, r6, #5
 80103b4:	0092      	lsls	r2, r2, #2
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 fb60 	bl	8010a7c <_calloc_r>
 80103bc:	b160      	cbz	r0, 80103d8 <_Balloc+0x64>
 80103be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103c2:	e00e      	b.n	80103e2 <_Balloc+0x6e>
 80103c4:	2221      	movs	r2, #33	; 0x21
 80103c6:	2104      	movs	r1, #4
 80103c8:	4620      	mov	r0, r4
 80103ca:	f000 fb57 	bl	8010a7c <_calloc_r>
 80103ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103d0:	60f0      	str	r0, [r6, #12]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d1e4      	bne.n	80103a2 <_Balloc+0x2e>
 80103d8:	2000      	movs	r0, #0
 80103da:	bd70      	pop	{r4, r5, r6, pc}
 80103dc:	6802      	ldr	r2, [r0, #0]
 80103de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80103e2:	2300      	movs	r3, #0
 80103e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103e8:	e7f7      	b.n	80103da <_Balloc+0x66>
 80103ea:	bf00      	nop
 80103ec:	0801465d 	.word	0x0801465d
 80103f0:	080146e0 	.word	0x080146e0

080103f4 <_Bfree>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103f8:	4605      	mov	r5, r0
 80103fa:	460c      	mov	r4, r1
 80103fc:	b976      	cbnz	r6, 801041c <_Bfree+0x28>
 80103fe:	2010      	movs	r0, #16
 8010400:	f7ff ffb0 	bl	8010364 <malloc>
 8010404:	4602      	mov	r2, r0
 8010406:	6268      	str	r0, [r5, #36]	; 0x24
 8010408:	b920      	cbnz	r0, 8010414 <_Bfree+0x20>
 801040a:	4b09      	ldr	r3, [pc, #36]	; (8010430 <_Bfree+0x3c>)
 801040c:	4809      	ldr	r0, [pc, #36]	; (8010434 <_Bfree+0x40>)
 801040e:	218a      	movs	r1, #138	; 0x8a
 8010410:	f000 fd96 	bl	8010f40 <__assert_func>
 8010414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010418:	6006      	str	r6, [r0, #0]
 801041a:	60c6      	str	r6, [r0, #12]
 801041c:	b13c      	cbz	r4, 801042e <_Bfree+0x3a>
 801041e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010420:	6862      	ldr	r2, [r4, #4]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010428:	6021      	str	r1, [r4, #0]
 801042a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	0801465d 	.word	0x0801465d
 8010434:	080146e0 	.word	0x080146e0

08010438 <__multadd>:
 8010438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043c:	690d      	ldr	r5, [r1, #16]
 801043e:	4607      	mov	r7, r0
 8010440:	460c      	mov	r4, r1
 8010442:	461e      	mov	r6, r3
 8010444:	f101 0c14 	add.w	ip, r1, #20
 8010448:	2000      	movs	r0, #0
 801044a:	f8dc 3000 	ldr.w	r3, [ip]
 801044e:	b299      	uxth	r1, r3
 8010450:	fb02 6101 	mla	r1, r2, r1, r6
 8010454:	0c1e      	lsrs	r6, r3, #16
 8010456:	0c0b      	lsrs	r3, r1, #16
 8010458:	fb02 3306 	mla	r3, r2, r6, r3
 801045c:	b289      	uxth	r1, r1
 801045e:	3001      	adds	r0, #1
 8010460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010464:	4285      	cmp	r5, r0
 8010466:	f84c 1b04 	str.w	r1, [ip], #4
 801046a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801046e:	dcec      	bgt.n	801044a <__multadd+0x12>
 8010470:	b30e      	cbz	r6, 80104b6 <__multadd+0x7e>
 8010472:	68a3      	ldr	r3, [r4, #8]
 8010474:	42ab      	cmp	r3, r5
 8010476:	dc19      	bgt.n	80104ac <__multadd+0x74>
 8010478:	6861      	ldr	r1, [r4, #4]
 801047a:	4638      	mov	r0, r7
 801047c:	3101      	adds	r1, #1
 801047e:	f7ff ff79 	bl	8010374 <_Balloc>
 8010482:	4680      	mov	r8, r0
 8010484:	b928      	cbnz	r0, 8010492 <__multadd+0x5a>
 8010486:	4602      	mov	r2, r0
 8010488:	4b0c      	ldr	r3, [pc, #48]	; (80104bc <__multadd+0x84>)
 801048a:	480d      	ldr	r0, [pc, #52]	; (80104c0 <__multadd+0x88>)
 801048c:	21b5      	movs	r1, #181	; 0xb5
 801048e:	f000 fd57 	bl	8010f40 <__assert_func>
 8010492:	6922      	ldr	r2, [r4, #16]
 8010494:	3202      	adds	r2, #2
 8010496:	f104 010c 	add.w	r1, r4, #12
 801049a:	0092      	lsls	r2, r2, #2
 801049c:	300c      	adds	r0, #12
 801049e:	f7fe fc43 	bl	800ed28 <memcpy>
 80104a2:	4621      	mov	r1, r4
 80104a4:	4638      	mov	r0, r7
 80104a6:	f7ff ffa5 	bl	80103f4 <_Bfree>
 80104aa:	4644      	mov	r4, r8
 80104ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104b0:	3501      	adds	r5, #1
 80104b2:	615e      	str	r6, [r3, #20]
 80104b4:	6125      	str	r5, [r4, #16]
 80104b6:	4620      	mov	r0, r4
 80104b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104bc:	080146cf 	.word	0x080146cf
 80104c0:	080146e0 	.word	0x080146e0

080104c4 <__hi0bits>:
 80104c4:	0c03      	lsrs	r3, r0, #16
 80104c6:	041b      	lsls	r3, r3, #16
 80104c8:	b9d3      	cbnz	r3, 8010500 <__hi0bits+0x3c>
 80104ca:	0400      	lsls	r0, r0, #16
 80104cc:	2310      	movs	r3, #16
 80104ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80104d2:	bf04      	itt	eq
 80104d4:	0200      	lsleq	r0, r0, #8
 80104d6:	3308      	addeq	r3, #8
 80104d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80104dc:	bf04      	itt	eq
 80104de:	0100      	lsleq	r0, r0, #4
 80104e0:	3304      	addeq	r3, #4
 80104e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80104e6:	bf04      	itt	eq
 80104e8:	0080      	lsleq	r0, r0, #2
 80104ea:	3302      	addeq	r3, #2
 80104ec:	2800      	cmp	r0, #0
 80104ee:	db05      	blt.n	80104fc <__hi0bits+0x38>
 80104f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80104f4:	f103 0301 	add.w	r3, r3, #1
 80104f8:	bf08      	it	eq
 80104fa:	2320      	moveq	r3, #32
 80104fc:	4618      	mov	r0, r3
 80104fe:	4770      	bx	lr
 8010500:	2300      	movs	r3, #0
 8010502:	e7e4      	b.n	80104ce <__hi0bits+0xa>

08010504 <__lo0bits>:
 8010504:	6803      	ldr	r3, [r0, #0]
 8010506:	f013 0207 	ands.w	r2, r3, #7
 801050a:	4601      	mov	r1, r0
 801050c:	d00b      	beq.n	8010526 <__lo0bits+0x22>
 801050e:	07da      	lsls	r2, r3, #31
 8010510:	d423      	bmi.n	801055a <__lo0bits+0x56>
 8010512:	0798      	lsls	r0, r3, #30
 8010514:	bf49      	itett	mi
 8010516:	085b      	lsrmi	r3, r3, #1
 8010518:	089b      	lsrpl	r3, r3, #2
 801051a:	2001      	movmi	r0, #1
 801051c:	600b      	strmi	r3, [r1, #0]
 801051e:	bf5c      	itt	pl
 8010520:	600b      	strpl	r3, [r1, #0]
 8010522:	2002      	movpl	r0, #2
 8010524:	4770      	bx	lr
 8010526:	b298      	uxth	r0, r3
 8010528:	b9a8      	cbnz	r0, 8010556 <__lo0bits+0x52>
 801052a:	0c1b      	lsrs	r3, r3, #16
 801052c:	2010      	movs	r0, #16
 801052e:	b2da      	uxtb	r2, r3
 8010530:	b90a      	cbnz	r2, 8010536 <__lo0bits+0x32>
 8010532:	3008      	adds	r0, #8
 8010534:	0a1b      	lsrs	r3, r3, #8
 8010536:	071a      	lsls	r2, r3, #28
 8010538:	bf04      	itt	eq
 801053a:	091b      	lsreq	r3, r3, #4
 801053c:	3004      	addeq	r0, #4
 801053e:	079a      	lsls	r2, r3, #30
 8010540:	bf04      	itt	eq
 8010542:	089b      	lsreq	r3, r3, #2
 8010544:	3002      	addeq	r0, #2
 8010546:	07da      	lsls	r2, r3, #31
 8010548:	d403      	bmi.n	8010552 <__lo0bits+0x4e>
 801054a:	085b      	lsrs	r3, r3, #1
 801054c:	f100 0001 	add.w	r0, r0, #1
 8010550:	d005      	beq.n	801055e <__lo0bits+0x5a>
 8010552:	600b      	str	r3, [r1, #0]
 8010554:	4770      	bx	lr
 8010556:	4610      	mov	r0, r2
 8010558:	e7e9      	b.n	801052e <__lo0bits+0x2a>
 801055a:	2000      	movs	r0, #0
 801055c:	4770      	bx	lr
 801055e:	2020      	movs	r0, #32
 8010560:	4770      	bx	lr
	...

08010564 <__i2b>:
 8010564:	b510      	push	{r4, lr}
 8010566:	460c      	mov	r4, r1
 8010568:	2101      	movs	r1, #1
 801056a:	f7ff ff03 	bl	8010374 <_Balloc>
 801056e:	4602      	mov	r2, r0
 8010570:	b928      	cbnz	r0, 801057e <__i2b+0x1a>
 8010572:	4b05      	ldr	r3, [pc, #20]	; (8010588 <__i2b+0x24>)
 8010574:	4805      	ldr	r0, [pc, #20]	; (801058c <__i2b+0x28>)
 8010576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801057a:	f000 fce1 	bl	8010f40 <__assert_func>
 801057e:	2301      	movs	r3, #1
 8010580:	6144      	str	r4, [r0, #20]
 8010582:	6103      	str	r3, [r0, #16]
 8010584:	bd10      	pop	{r4, pc}
 8010586:	bf00      	nop
 8010588:	080146cf 	.word	0x080146cf
 801058c:	080146e0 	.word	0x080146e0

08010590 <__multiply>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	4691      	mov	r9, r2
 8010596:	690a      	ldr	r2, [r1, #16]
 8010598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801059c:	429a      	cmp	r2, r3
 801059e:	bfb8      	it	lt
 80105a0:	460b      	movlt	r3, r1
 80105a2:	460c      	mov	r4, r1
 80105a4:	bfbc      	itt	lt
 80105a6:	464c      	movlt	r4, r9
 80105a8:	4699      	movlt	r9, r3
 80105aa:	6927      	ldr	r7, [r4, #16]
 80105ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80105b0:	68a3      	ldr	r3, [r4, #8]
 80105b2:	6861      	ldr	r1, [r4, #4]
 80105b4:	eb07 060a 	add.w	r6, r7, sl
 80105b8:	42b3      	cmp	r3, r6
 80105ba:	b085      	sub	sp, #20
 80105bc:	bfb8      	it	lt
 80105be:	3101      	addlt	r1, #1
 80105c0:	f7ff fed8 	bl	8010374 <_Balloc>
 80105c4:	b930      	cbnz	r0, 80105d4 <__multiply+0x44>
 80105c6:	4602      	mov	r2, r0
 80105c8:	4b44      	ldr	r3, [pc, #272]	; (80106dc <__multiply+0x14c>)
 80105ca:	4845      	ldr	r0, [pc, #276]	; (80106e0 <__multiply+0x150>)
 80105cc:	f240 115d 	movw	r1, #349	; 0x15d
 80105d0:	f000 fcb6 	bl	8010f40 <__assert_func>
 80105d4:	f100 0514 	add.w	r5, r0, #20
 80105d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80105dc:	462b      	mov	r3, r5
 80105de:	2200      	movs	r2, #0
 80105e0:	4543      	cmp	r3, r8
 80105e2:	d321      	bcc.n	8010628 <__multiply+0x98>
 80105e4:	f104 0314 	add.w	r3, r4, #20
 80105e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80105ec:	f109 0314 	add.w	r3, r9, #20
 80105f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80105f4:	9202      	str	r2, [sp, #8]
 80105f6:	1b3a      	subs	r2, r7, r4
 80105f8:	3a15      	subs	r2, #21
 80105fa:	f022 0203 	bic.w	r2, r2, #3
 80105fe:	3204      	adds	r2, #4
 8010600:	f104 0115 	add.w	r1, r4, #21
 8010604:	428f      	cmp	r7, r1
 8010606:	bf38      	it	cc
 8010608:	2204      	movcc	r2, #4
 801060a:	9201      	str	r2, [sp, #4]
 801060c:	9a02      	ldr	r2, [sp, #8]
 801060e:	9303      	str	r3, [sp, #12]
 8010610:	429a      	cmp	r2, r3
 8010612:	d80c      	bhi.n	801062e <__multiply+0x9e>
 8010614:	2e00      	cmp	r6, #0
 8010616:	dd03      	ble.n	8010620 <__multiply+0x90>
 8010618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801061c:	2b00      	cmp	r3, #0
 801061e:	d05a      	beq.n	80106d6 <__multiply+0x146>
 8010620:	6106      	str	r6, [r0, #16]
 8010622:	b005      	add	sp, #20
 8010624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010628:	f843 2b04 	str.w	r2, [r3], #4
 801062c:	e7d8      	b.n	80105e0 <__multiply+0x50>
 801062e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010632:	f1ba 0f00 	cmp.w	sl, #0
 8010636:	d024      	beq.n	8010682 <__multiply+0xf2>
 8010638:	f104 0e14 	add.w	lr, r4, #20
 801063c:	46a9      	mov	r9, r5
 801063e:	f04f 0c00 	mov.w	ip, #0
 8010642:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010646:	f8d9 1000 	ldr.w	r1, [r9]
 801064a:	fa1f fb82 	uxth.w	fp, r2
 801064e:	b289      	uxth	r1, r1
 8010650:	fb0a 110b 	mla	r1, sl, fp, r1
 8010654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010658:	f8d9 2000 	ldr.w	r2, [r9]
 801065c:	4461      	add	r1, ip
 801065e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010662:	fb0a c20b 	mla	r2, sl, fp, ip
 8010666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801066a:	b289      	uxth	r1, r1
 801066c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010670:	4577      	cmp	r7, lr
 8010672:	f849 1b04 	str.w	r1, [r9], #4
 8010676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801067a:	d8e2      	bhi.n	8010642 <__multiply+0xb2>
 801067c:	9a01      	ldr	r2, [sp, #4]
 801067e:	f845 c002 	str.w	ip, [r5, r2]
 8010682:	9a03      	ldr	r2, [sp, #12]
 8010684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010688:	3304      	adds	r3, #4
 801068a:	f1b9 0f00 	cmp.w	r9, #0
 801068e:	d020      	beq.n	80106d2 <__multiply+0x142>
 8010690:	6829      	ldr	r1, [r5, #0]
 8010692:	f104 0c14 	add.w	ip, r4, #20
 8010696:	46ae      	mov	lr, r5
 8010698:	f04f 0a00 	mov.w	sl, #0
 801069c:	f8bc b000 	ldrh.w	fp, [ip]
 80106a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80106a4:	fb09 220b 	mla	r2, r9, fp, r2
 80106a8:	4492      	add	sl, r2
 80106aa:	b289      	uxth	r1, r1
 80106ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80106b0:	f84e 1b04 	str.w	r1, [lr], #4
 80106b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80106b8:	f8be 1000 	ldrh.w	r1, [lr]
 80106bc:	0c12      	lsrs	r2, r2, #16
 80106be:	fb09 1102 	mla	r1, r9, r2, r1
 80106c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80106c6:	4567      	cmp	r7, ip
 80106c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80106cc:	d8e6      	bhi.n	801069c <__multiply+0x10c>
 80106ce:	9a01      	ldr	r2, [sp, #4]
 80106d0:	50a9      	str	r1, [r5, r2]
 80106d2:	3504      	adds	r5, #4
 80106d4:	e79a      	b.n	801060c <__multiply+0x7c>
 80106d6:	3e01      	subs	r6, #1
 80106d8:	e79c      	b.n	8010614 <__multiply+0x84>
 80106da:	bf00      	nop
 80106dc:	080146cf 	.word	0x080146cf
 80106e0:	080146e0 	.word	0x080146e0

080106e4 <__pow5mult>:
 80106e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e8:	4615      	mov	r5, r2
 80106ea:	f012 0203 	ands.w	r2, r2, #3
 80106ee:	4606      	mov	r6, r0
 80106f0:	460f      	mov	r7, r1
 80106f2:	d007      	beq.n	8010704 <__pow5mult+0x20>
 80106f4:	4c25      	ldr	r4, [pc, #148]	; (801078c <__pow5mult+0xa8>)
 80106f6:	3a01      	subs	r2, #1
 80106f8:	2300      	movs	r3, #0
 80106fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106fe:	f7ff fe9b 	bl	8010438 <__multadd>
 8010702:	4607      	mov	r7, r0
 8010704:	10ad      	asrs	r5, r5, #2
 8010706:	d03d      	beq.n	8010784 <__pow5mult+0xa0>
 8010708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801070a:	b97c      	cbnz	r4, 801072c <__pow5mult+0x48>
 801070c:	2010      	movs	r0, #16
 801070e:	f7ff fe29 	bl	8010364 <malloc>
 8010712:	4602      	mov	r2, r0
 8010714:	6270      	str	r0, [r6, #36]	; 0x24
 8010716:	b928      	cbnz	r0, 8010724 <__pow5mult+0x40>
 8010718:	4b1d      	ldr	r3, [pc, #116]	; (8010790 <__pow5mult+0xac>)
 801071a:	481e      	ldr	r0, [pc, #120]	; (8010794 <__pow5mult+0xb0>)
 801071c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010720:	f000 fc0e 	bl	8010f40 <__assert_func>
 8010724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010728:	6004      	str	r4, [r0, #0]
 801072a:	60c4      	str	r4, [r0, #12]
 801072c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010734:	b94c      	cbnz	r4, 801074a <__pow5mult+0x66>
 8010736:	f240 2171 	movw	r1, #625	; 0x271
 801073a:	4630      	mov	r0, r6
 801073c:	f7ff ff12 	bl	8010564 <__i2b>
 8010740:	2300      	movs	r3, #0
 8010742:	f8c8 0008 	str.w	r0, [r8, #8]
 8010746:	4604      	mov	r4, r0
 8010748:	6003      	str	r3, [r0, #0]
 801074a:	f04f 0900 	mov.w	r9, #0
 801074e:	07eb      	lsls	r3, r5, #31
 8010750:	d50a      	bpl.n	8010768 <__pow5mult+0x84>
 8010752:	4639      	mov	r1, r7
 8010754:	4622      	mov	r2, r4
 8010756:	4630      	mov	r0, r6
 8010758:	f7ff ff1a 	bl	8010590 <__multiply>
 801075c:	4639      	mov	r1, r7
 801075e:	4680      	mov	r8, r0
 8010760:	4630      	mov	r0, r6
 8010762:	f7ff fe47 	bl	80103f4 <_Bfree>
 8010766:	4647      	mov	r7, r8
 8010768:	106d      	asrs	r5, r5, #1
 801076a:	d00b      	beq.n	8010784 <__pow5mult+0xa0>
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	b938      	cbnz	r0, 8010780 <__pow5mult+0x9c>
 8010770:	4622      	mov	r2, r4
 8010772:	4621      	mov	r1, r4
 8010774:	4630      	mov	r0, r6
 8010776:	f7ff ff0b 	bl	8010590 <__multiply>
 801077a:	6020      	str	r0, [r4, #0]
 801077c:	f8c0 9000 	str.w	r9, [r0]
 8010780:	4604      	mov	r4, r0
 8010782:	e7e4      	b.n	801074e <__pow5mult+0x6a>
 8010784:	4638      	mov	r0, r7
 8010786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801078a:	bf00      	nop
 801078c:	08014830 	.word	0x08014830
 8010790:	0801465d 	.word	0x0801465d
 8010794:	080146e0 	.word	0x080146e0

08010798 <__lshift>:
 8010798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	460c      	mov	r4, r1
 801079e:	6849      	ldr	r1, [r1, #4]
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107a6:	68a3      	ldr	r3, [r4, #8]
 80107a8:	4607      	mov	r7, r0
 80107aa:	4691      	mov	r9, r2
 80107ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107b0:	f108 0601 	add.w	r6, r8, #1
 80107b4:	42b3      	cmp	r3, r6
 80107b6:	db0b      	blt.n	80107d0 <__lshift+0x38>
 80107b8:	4638      	mov	r0, r7
 80107ba:	f7ff fddb 	bl	8010374 <_Balloc>
 80107be:	4605      	mov	r5, r0
 80107c0:	b948      	cbnz	r0, 80107d6 <__lshift+0x3e>
 80107c2:	4602      	mov	r2, r0
 80107c4:	4b2a      	ldr	r3, [pc, #168]	; (8010870 <__lshift+0xd8>)
 80107c6:	482b      	ldr	r0, [pc, #172]	; (8010874 <__lshift+0xdc>)
 80107c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80107cc:	f000 fbb8 	bl	8010f40 <__assert_func>
 80107d0:	3101      	adds	r1, #1
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	e7ee      	b.n	80107b4 <__lshift+0x1c>
 80107d6:	2300      	movs	r3, #0
 80107d8:	f100 0114 	add.w	r1, r0, #20
 80107dc:	f100 0210 	add.w	r2, r0, #16
 80107e0:	4618      	mov	r0, r3
 80107e2:	4553      	cmp	r3, sl
 80107e4:	db37      	blt.n	8010856 <__lshift+0xbe>
 80107e6:	6920      	ldr	r0, [r4, #16]
 80107e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107ec:	f104 0314 	add.w	r3, r4, #20
 80107f0:	f019 091f 	ands.w	r9, r9, #31
 80107f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80107fc:	d02f      	beq.n	801085e <__lshift+0xc6>
 80107fe:	f1c9 0e20 	rsb	lr, r9, #32
 8010802:	468a      	mov	sl, r1
 8010804:	f04f 0c00 	mov.w	ip, #0
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	fa02 f209 	lsl.w	r2, r2, r9
 801080e:	ea42 020c 	orr.w	r2, r2, ip
 8010812:	f84a 2b04 	str.w	r2, [sl], #4
 8010816:	f853 2b04 	ldr.w	r2, [r3], #4
 801081a:	4298      	cmp	r0, r3
 801081c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010820:	d8f2      	bhi.n	8010808 <__lshift+0x70>
 8010822:	1b03      	subs	r3, r0, r4
 8010824:	3b15      	subs	r3, #21
 8010826:	f023 0303 	bic.w	r3, r3, #3
 801082a:	3304      	adds	r3, #4
 801082c:	f104 0215 	add.w	r2, r4, #21
 8010830:	4290      	cmp	r0, r2
 8010832:	bf38      	it	cc
 8010834:	2304      	movcc	r3, #4
 8010836:	f841 c003 	str.w	ip, [r1, r3]
 801083a:	f1bc 0f00 	cmp.w	ip, #0
 801083e:	d001      	beq.n	8010844 <__lshift+0xac>
 8010840:	f108 0602 	add.w	r6, r8, #2
 8010844:	3e01      	subs	r6, #1
 8010846:	4638      	mov	r0, r7
 8010848:	612e      	str	r6, [r5, #16]
 801084a:	4621      	mov	r1, r4
 801084c:	f7ff fdd2 	bl	80103f4 <_Bfree>
 8010850:	4628      	mov	r0, r5
 8010852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010856:	f842 0f04 	str.w	r0, [r2, #4]!
 801085a:	3301      	adds	r3, #1
 801085c:	e7c1      	b.n	80107e2 <__lshift+0x4a>
 801085e:	3904      	subs	r1, #4
 8010860:	f853 2b04 	ldr.w	r2, [r3], #4
 8010864:	f841 2f04 	str.w	r2, [r1, #4]!
 8010868:	4298      	cmp	r0, r3
 801086a:	d8f9      	bhi.n	8010860 <__lshift+0xc8>
 801086c:	e7ea      	b.n	8010844 <__lshift+0xac>
 801086e:	bf00      	nop
 8010870:	080146cf 	.word	0x080146cf
 8010874:	080146e0 	.word	0x080146e0

08010878 <__mcmp>:
 8010878:	b530      	push	{r4, r5, lr}
 801087a:	6902      	ldr	r2, [r0, #16]
 801087c:	690c      	ldr	r4, [r1, #16]
 801087e:	1b12      	subs	r2, r2, r4
 8010880:	d10e      	bne.n	80108a0 <__mcmp+0x28>
 8010882:	f100 0314 	add.w	r3, r0, #20
 8010886:	3114      	adds	r1, #20
 8010888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801088c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010898:	42a5      	cmp	r5, r4
 801089a:	d003      	beq.n	80108a4 <__mcmp+0x2c>
 801089c:	d305      	bcc.n	80108aa <__mcmp+0x32>
 801089e:	2201      	movs	r2, #1
 80108a0:	4610      	mov	r0, r2
 80108a2:	bd30      	pop	{r4, r5, pc}
 80108a4:	4283      	cmp	r3, r0
 80108a6:	d3f3      	bcc.n	8010890 <__mcmp+0x18>
 80108a8:	e7fa      	b.n	80108a0 <__mcmp+0x28>
 80108aa:	f04f 32ff 	mov.w	r2, #4294967295
 80108ae:	e7f7      	b.n	80108a0 <__mcmp+0x28>

080108b0 <__mdiff>:
 80108b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	460c      	mov	r4, r1
 80108b6:	4606      	mov	r6, r0
 80108b8:	4611      	mov	r1, r2
 80108ba:	4620      	mov	r0, r4
 80108bc:	4690      	mov	r8, r2
 80108be:	f7ff ffdb 	bl	8010878 <__mcmp>
 80108c2:	1e05      	subs	r5, r0, #0
 80108c4:	d110      	bne.n	80108e8 <__mdiff+0x38>
 80108c6:	4629      	mov	r1, r5
 80108c8:	4630      	mov	r0, r6
 80108ca:	f7ff fd53 	bl	8010374 <_Balloc>
 80108ce:	b930      	cbnz	r0, 80108de <__mdiff+0x2e>
 80108d0:	4b3a      	ldr	r3, [pc, #232]	; (80109bc <__mdiff+0x10c>)
 80108d2:	4602      	mov	r2, r0
 80108d4:	f240 2132 	movw	r1, #562	; 0x232
 80108d8:	4839      	ldr	r0, [pc, #228]	; (80109c0 <__mdiff+0x110>)
 80108da:	f000 fb31 	bl	8010f40 <__assert_func>
 80108de:	2301      	movs	r3, #1
 80108e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80108e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	bfa4      	itt	ge
 80108ea:	4643      	movge	r3, r8
 80108ec:	46a0      	movge	r8, r4
 80108ee:	4630      	mov	r0, r6
 80108f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80108f4:	bfa6      	itte	ge
 80108f6:	461c      	movge	r4, r3
 80108f8:	2500      	movge	r5, #0
 80108fa:	2501      	movlt	r5, #1
 80108fc:	f7ff fd3a 	bl	8010374 <_Balloc>
 8010900:	b920      	cbnz	r0, 801090c <__mdiff+0x5c>
 8010902:	4b2e      	ldr	r3, [pc, #184]	; (80109bc <__mdiff+0x10c>)
 8010904:	4602      	mov	r2, r0
 8010906:	f44f 7110 	mov.w	r1, #576	; 0x240
 801090a:	e7e5      	b.n	80108d8 <__mdiff+0x28>
 801090c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010910:	6926      	ldr	r6, [r4, #16]
 8010912:	60c5      	str	r5, [r0, #12]
 8010914:	f104 0914 	add.w	r9, r4, #20
 8010918:	f108 0514 	add.w	r5, r8, #20
 801091c:	f100 0e14 	add.w	lr, r0, #20
 8010920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010928:	f108 0210 	add.w	r2, r8, #16
 801092c:	46f2      	mov	sl, lr
 801092e:	2100      	movs	r1, #0
 8010930:	f859 3b04 	ldr.w	r3, [r9], #4
 8010934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010938:	fa1f f883 	uxth.w	r8, r3
 801093c:	fa11 f18b 	uxtah	r1, r1, fp
 8010940:	0c1b      	lsrs	r3, r3, #16
 8010942:	eba1 0808 	sub.w	r8, r1, r8
 8010946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801094a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801094e:	fa1f f888 	uxth.w	r8, r8
 8010952:	1419      	asrs	r1, r3, #16
 8010954:	454e      	cmp	r6, r9
 8010956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801095a:	f84a 3b04 	str.w	r3, [sl], #4
 801095e:	d8e7      	bhi.n	8010930 <__mdiff+0x80>
 8010960:	1b33      	subs	r3, r6, r4
 8010962:	3b15      	subs	r3, #21
 8010964:	f023 0303 	bic.w	r3, r3, #3
 8010968:	3304      	adds	r3, #4
 801096a:	3415      	adds	r4, #21
 801096c:	42a6      	cmp	r6, r4
 801096e:	bf38      	it	cc
 8010970:	2304      	movcc	r3, #4
 8010972:	441d      	add	r5, r3
 8010974:	4473      	add	r3, lr
 8010976:	469e      	mov	lr, r3
 8010978:	462e      	mov	r6, r5
 801097a:	4566      	cmp	r6, ip
 801097c:	d30e      	bcc.n	801099c <__mdiff+0xec>
 801097e:	f10c 0203 	add.w	r2, ip, #3
 8010982:	1b52      	subs	r2, r2, r5
 8010984:	f022 0203 	bic.w	r2, r2, #3
 8010988:	3d03      	subs	r5, #3
 801098a:	45ac      	cmp	ip, r5
 801098c:	bf38      	it	cc
 801098e:	2200      	movcc	r2, #0
 8010990:	441a      	add	r2, r3
 8010992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010996:	b17b      	cbz	r3, 80109b8 <__mdiff+0x108>
 8010998:	6107      	str	r7, [r0, #16]
 801099a:	e7a3      	b.n	80108e4 <__mdiff+0x34>
 801099c:	f856 8b04 	ldr.w	r8, [r6], #4
 80109a0:	fa11 f288 	uxtah	r2, r1, r8
 80109a4:	1414      	asrs	r4, r2, #16
 80109a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80109aa:	b292      	uxth	r2, r2
 80109ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80109b0:	f84e 2b04 	str.w	r2, [lr], #4
 80109b4:	1421      	asrs	r1, r4, #16
 80109b6:	e7e0      	b.n	801097a <__mdiff+0xca>
 80109b8:	3f01      	subs	r7, #1
 80109ba:	e7ea      	b.n	8010992 <__mdiff+0xe2>
 80109bc:	080146cf 	.word	0x080146cf
 80109c0:	080146e0 	.word	0x080146e0

080109c4 <__d2b>:
 80109c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109c8:	4689      	mov	r9, r1
 80109ca:	2101      	movs	r1, #1
 80109cc:	ec57 6b10 	vmov	r6, r7, d0
 80109d0:	4690      	mov	r8, r2
 80109d2:	f7ff fccf 	bl	8010374 <_Balloc>
 80109d6:	4604      	mov	r4, r0
 80109d8:	b930      	cbnz	r0, 80109e8 <__d2b+0x24>
 80109da:	4602      	mov	r2, r0
 80109dc:	4b25      	ldr	r3, [pc, #148]	; (8010a74 <__d2b+0xb0>)
 80109de:	4826      	ldr	r0, [pc, #152]	; (8010a78 <__d2b+0xb4>)
 80109e0:	f240 310a 	movw	r1, #778	; 0x30a
 80109e4:	f000 faac 	bl	8010f40 <__assert_func>
 80109e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80109ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109f0:	bb35      	cbnz	r5, 8010a40 <__d2b+0x7c>
 80109f2:	2e00      	cmp	r6, #0
 80109f4:	9301      	str	r3, [sp, #4]
 80109f6:	d028      	beq.n	8010a4a <__d2b+0x86>
 80109f8:	4668      	mov	r0, sp
 80109fa:	9600      	str	r6, [sp, #0]
 80109fc:	f7ff fd82 	bl	8010504 <__lo0bits>
 8010a00:	9900      	ldr	r1, [sp, #0]
 8010a02:	b300      	cbz	r0, 8010a46 <__d2b+0x82>
 8010a04:	9a01      	ldr	r2, [sp, #4]
 8010a06:	f1c0 0320 	rsb	r3, r0, #32
 8010a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0e:	430b      	orrs	r3, r1
 8010a10:	40c2      	lsrs	r2, r0
 8010a12:	6163      	str	r3, [r4, #20]
 8010a14:	9201      	str	r2, [sp, #4]
 8010a16:	9b01      	ldr	r3, [sp, #4]
 8010a18:	61a3      	str	r3, [r4, #24]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	bf14      	ite	ne
 8010a1e:	2202      	movne	r2, #2
 8010a20:	2201      	moveq	r2, #1
 8010a22:	6122      	str	r2, [r4, #16]
 8010a24:	b1d5      	cbz	r5, 8010a5c <__d2b+0x98>
 8010a26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a2a:	4405      	add	r5, r0
 8010a2c:	f8c9 5000 	str.w	r5, [r9]
 8010a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a34:	f8c8 0000 	str.w	r0, [r8]
 8010a38:	4620      	mov	r0, r4
 8010a3a:	b003      	add	sp, #12
 8010a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a44:	e7d5      	b.n	80109f2 <__d2b+0x2e>
 8010a46:	6161      	str	r1, [r4, #20]
 8010a48:	e7e5      	b.n	8010a16 <__d2b+0x52>
 8010a4a:	a801      	add	r0, sp, #4
 8010a4c:	f7ff fd5a 	bl	8010504 <__lo0bits>
 8010a50:	9b01      	ldr	r3, [sp, #4]
 8010a52:	6163      	str	r3, [r4, #20]
 8010a54:	2201      	movs	r2, #1
 8010a56:	6122      	str	r2, [r4, #16]
 8010a58:	3020      	adds	r0, #32
 8010a5a:	e7e3      	b.n	8010a24 <__d2b+0x60>
 8010a5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a64:	f8c9 0000 	str.w	r0, [r9]
 8010a68:	6918      	ldr	r0, [r3, #16]
 8010a6a:	f7ff fd2b 	bl	80104c4 <__hi0bits>
 8010a6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a72:	e7df      	b.n	8010a34 <__d2b+0x70>
 8010a74:	080146cf 	.word	0x080146cf
 8010a78:	080146e0 	.word	0x080146e0

08010a7c <_calloc_r>:
 8010a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a7e:	fba1 2402 	umull	r2, r4, r1, r2
 8010a82:	b94c      	cbnz	r4, 8010a98 <_calloc_r+0x1c>
 8010a84:	4611      	mov	r1, r2
 8010a86:	9201      	str	r2, [sp, #4]
 8010a88:	f000 f87a 	bl	8010b80 <_malloc_r>
 8010a8c:	9a01      	ldr	r2, [sp, #4]
 8010a8e:	4605      	mov	r5, r0
 8010a90:	b930      	cbnz	r0, 8010aa0 <_calloc_r+0x24>
 8010a92:	4628      	mov	r0, r5
 8010a94:	b003      	add	sp, #12
 8010a96:	bd30      	pop	{r4, r5, pc}
 8010a98:	220c      	movs	r2, #12
 8010a9a:	6002      	str	r2, [r0, #0]
 8010a9c:	2500      	movs	r5, #0
 8010a9e:	e7f8      	b.n	8010a92 <_calloc_r+0x16>
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	f7fe f94f 	bl	800ed44 <memset>
 8010aa6:	e7f4      	b.n	8010a92 <_calloc_r+0x16>

08010aa8 <_free_r>:
 8010aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aaa:	2900      	cmp	r1, #0
 8010aac:	d044      	beq.n	8010b38 <_free_r+0x90>
 8010aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ab2:	9001      	str	r0, [sp, #4]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8010aba:	bfb8      	it	lt
 8010abc:	18e4      	addlt	r4, r4, r3
 8010abe:	f000 fa9b 	bl	8010ff8 <__malloc_lock>
 8010ac2:	4a1e      	ldr	r2, [pc, #120]	; (8010b3c <_free_r+0x94>)
 8010ac4:	9801      	ldr	r0, [sp, #4]
 8010ac6:	6813      	ldr	r3, [r2, #0]
 8010ac8:	b933      	cbnz	r3, 8010ad8 <_free_r+0x30>
 8010aca:	6063      	str	r3, [r4, #4]
 8010acc:	6014      	str	r4, [r2, #0]
 8010ace:	b003      	add	sp, #12
 8010ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ad4:	f000 ba96 	b.w	8011004 <__malloc_unlock>
 8010ad8:	42a3      	cmp	r3, r4
 8010ada:	d908      	bls.n	8010aee <_free_r+0x46>
 8010adc:	6825      	ldr	r5, [r4, #0]
 8010ade:	1961      	adds	r1, r4, r5
 8010ae0:	428b      	cmp	r3, r1
 8010ae2:	bf01      	itttt	eq
 8010ae4:	6819      	ldreq	r1, [r3, #0]
 8010ae6:	685b      	ldreq	r3, [r3, #4]
 8010ae8:	1949      	addeq	r1, r1, r5
 8010aea:	6021      	streq	r1, [r4, #0]
 8010aec:	e7ed      	b.n	8010aca <_free_r+0x22>
 8010aee:	461a      	mov	r2, r3
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	b10b      	cbz	r3, 8010af8 <_free_r+0x50>
 8010af4:	42a3      	cmp	r3, r4
 8010af6:	d9fa      	bls.n	8010aee <_free_r+0x46>
 8010af8:	6811      	ldr	r1, [r2, #0]
 8010afa:	1855      	adds	r5, r2, r1
 8010afc:	42a5      	cmp	r5, r4
 8010afe:	d10b      	bne.n	8010b18 <_free_r+0x70>
 8010b00:	6824      	ldr	r4, [r4, #0]
 8010b02:	4421      	add	r1, r4
 8010b04:	1854      	adds	r4, r2, r1
 8010b06:	42a3      	cmp	r3, r4
 8010b08:	6011      	str	r1, [r2, #0]
 8010b0a:	d1e0      	bne.n	8010ace <_free_r+0x26>
 8010b0c:	681c      	ldr	r4, [r3, #0]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	6053      	str	r3, [r2, #4]
 8010b12:	4421      	add	r1, r4
 8010b14:	6011      	str	r1, [r2, #0]
 8010b16:	e7da      	b.n	8010ace <_free_r+0x26>
 8010b18:	d902      	bls.n	8010b20 <_free_r+0x78>
 8010b1a:	230c      	movs	r3, #12
 8010b1c:	6003      	str	r3, [r0, #0]
 8010b1e:	e7d6      	b.n	8010ace <_free_r+0x26>
 8010b20:	6825      	ldr	r5, [r4, #0]
 8010b22:	1961      	adds	r1, r4, r5
 8010b24:	428b      	cmp	r3, r1
 8010b26:	bf04      	itt	eq
 8010b28:	6819      	ldreq	r1, [r3, #0]
 8010b2a:	685b      	ldreq	r3, [r3, #4]
 8010b2c:	6063      	str	r3, [r4, #4]
 8010b2e:	bf04      	itt	eq
 8010b30:	1949      	addeq	r1, r1, r5
 8010b32:	6021      	streq	r1, [r4, #0]
 8010b34:	6054      	str	r4, [r2, #4]
 8010b36:	e7ca      	b.n	8010ace <_free_r+0x26>
 8010b38:	b003      	add	sp, #12
 8010b3a:	bd30      	pop	{r4, r5, pc}
 8010b3c:	200060d8 	.word	0x200060d8

08010b40 <sbrk_aligned>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	4e0e      	ldr	r6, [pc, #56]	; (8010b7c <sbrk_aligned+0x3c>)
 8010b44:	460c      	mov	r4, r1
 8010b46:	6831      	ldr	r1, [r6, #0]
 8010b48:	4605      	mov	r5, r0
 8010b4a:	b911      	cbnz	r1, 8010b52 <sbrk_aligned+0x12>
 8010b4c:	f000 f9e8 	bl	8010f20 <_sbrk_r>
 8010b50:	6030      	str	r0, [r6, #0]
 8010b52:	4621      	mov	r1, r4
 8010b54:	4628      	mov	r0, r5
 8010b56:	f000 f9e3 	bl	8010f20 <_sbrk_r>
 8010b5a:	1c43      	adds	r3, r0, #1
 8010b5c:	d00a      	beq.n	8010b74 <sbrk_aligned+0x34>
 8010b5e:	1cc4      	adds	r4, r0, #3
 8010b60:	f024 0403 	bic.w	r4, r4, #3
 8010b64:	42a0      	cmp	r0, r4
 8010b66:	d007      	beq.n	8010b78 <sbrk_aligned+0x38>
 8010b68:	1a21      	subs	r1, r4, r0
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f000 f9d8 	bl	8010f20 <_sbrk_r>
 8010b70:	3001      	adds	r0, #1
 8010b72:	d101      	bne.n	8010b78 <sbrk_aligned+0x38>
 8010b74:	f04f 34ff 	mov.w	r4, #4294967295
 8010b78:	4620      	mov	r0, r4
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}
 8010b7c:	200060dc 	.word	0x200060dc

08010b80 <_malloc_r>:
 8010b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b84:	1ccd      	adds	r5, r1, #3
 8010b86:	f025 0503 	bic.w	r5, r5, #3
 8010b8a:	3508      	adds	r5, #8
 8010b8c:	2d0c      	cmp	r5, #12
 8010b8e:	bf38      	it	cc
 8010b90:	250c      	movcc	r5, #12
 8010b92:	2d00      	cmp	r5, #0
 8010b94:	4607      	mov	r7, r0
 8010b96:	db01      	blt.n	8010b9c <_malloc_r+0x1c>
 8010b98:	42a9      	cmp	r1, r5
 8010b9a:	d905      	bls.n	8010ba8 <_malloc_r+0x28>
 8010b9c:	230c      	movs	r3, #12
 8010b9e:	603b      	str	r3, [r7, #0]
 8010ba0:	2600      	movs	r6, #0
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba8:	4e2e      	ldr	r6, [pc, #184]	; (8010c64 <_malloc_r+0xe4>)
 8010baa:	f000 fa25 	bl	8010ff8 <__malloc_lock>
 8010bae:	6833      	ldr	r3, [r6, #0]
 8010bb0:	461c      	mov	r4, r3
 8010bb2:	bb34      	cbnz	r4, 8010c02 <_malloc_r+0x82>
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ff ffc2 	bl	8010b40 <sbrk_aligned>
 8010bbc:	1c43      	adds	r3, r0, #1
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	d14d      	bne.n	8010c5e <_malloc_r+0xde>
 8010bc2:	6834      	ldr	r4, [r6, #0]
 8010bc4:	4626      	mov	r6, r4
 8010bc6:	2e00      	cmp	r6, #0
 8010bc8:	d140      	bne.n	8010c4c <_malloc_r+0xcc>
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	4631      	mov	r1, r6
 8010bce:	4638      	mov	r0, r7
 8010bd0:	eb04 0803 	add.w	r8, r4, r3
 8010bd4:	f000 f9a4 	bl	8010f20 <_sbrk_r>
 8010bd8:	4580      	cmp	r8, r0
 8010bda:	d13a      	bne.n	8010c52 <_malloc_r+0xd2>
 8010bdc:	6821      	ldr	r1, [r4, #0]
 8010bde:	3503      	adds	r5, #3
 8010be0:	1a6d      	subs	r5, r5, r1
 8010be2:	f025 0503 	bic.w	r5, r5, #3
 8010be6:	3508      	adds	r5, #8
 8010be8:	2d0c      	cmp	r5, #12
 8010bea:	bf38      	it	cc
 8010bec:	250c      	movcc	r5, #12
 8010bee:	4629      	mov	r1, r5
 8010bf0:	4638      	mov	r0, r7
 8010bf2:	f7ff ffa5 	bl	8010b40 <sbrk_aligned>
 8010bf6:	3001      	adds	r0, #1
 8010bf8:	d02b      	beq.n	8010c52 <_malloc_r+0xd2>
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	442b      	add	r3, r5
 8010bfe:	6023      	str	r3, [r4, #0]
 8010c00:	e00e      	b.n	8010c20 <_malloc_r+0xa0>
 8010c02:	6822      	ldr	r2, [r4, #0]
 8010c04:	1b52      	subs	r2, r2, r5
 8010c06:	d41e      	bmi.n	8010c46 <_malloc_r+0xc6>
 8010c08:	2a0b      	cmp	r2, #11
 8010c0a:	d916      	bls.n	8010c3a <_malloc_r+0xba>
 8010c0c:	1961      	adds	r1, r4, r5
 8010c0e:	42a3      	cmp	r3, r4
 8010c10:	6025      	str	r5, [r4, #0]
 8010c12:	bf18      	it	ne
 8010c14:	6059      	strne	r1, [r3, #4]
 8010c16:	6863      	ldr	r3, [r4, #4]
 8010c18:	bf08      	it	eq
 8010c1a:	6031      	streq	r1, [r6, #0]
 8010c1c:	5162      	str	r2, [r4, r5]
 8010c1e:	604b      	str	r3, [r1, #4]
 8010c20:	4638      	mov	r0, r7
 8010c22:	f104 060b 	add.w	r6, r4, #11
 8010c26:	f000 f9ed 	bl	8011004 <__malloc_unlock>
 8010c2a:	f026 0607 	bic.w	r6, r6, #7
 8010c2e:	1d23      	adds	r3, r4, #4
 8010c30:	1af2      	subs	r2, r6, r3
 8010c32:	d0b6      	beq.n	8010ba2 <_malloc_r+0x22>
 8010c34:	1b9b      	subs	r3, r3, r6
 8010c36:	50a3      	str	r3, [r4, r2]
 8010c38:	e7b3      	b.n	8010ba2 <_malloc_r+0x22>
 8010c3a:	6862      	ldr	r2, [r4, #4]
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	bf0c      	ite	eq
 8010c40:	6032      	streq	r2, [r6, #0]
 8010c42:	605a      	strne	r2, [r3, #4]
 8010c44:	e7ec      	b.n	8010c20 <_malloc_r+0xa0>
 8010c46:	4623      	mov	r3, r4
 8010c48:	6864      	ldr	r4, [r4, #4]
 8010c4a:	e7b2      	b.n	8010bb2 <_malloc_r+0x32>
 8010c4c:	4634      	mov	r4, r6
 8010c4e:	6876      	ldr	r6, [r6, #4]
 8010c50:	e7b9      	b.n	8010bc6 <_malloc_r+0x46>
 8010c52:	230c      	movs	r3, #12
 8010c54:	603b      	str	r3, [r7, #0]
 8010c56:	4638      	mov	r0, r7
 8010c58:	f000 f9d4 	bl	8011004 <__malloc_unlock>
 8010c5c:	e7a1      	b.n	8010ba2 <_malloc_r+0x22>
 8010c5e:	6025      	str	r5, [r4, #0]
 8010c60:	e7de      	b.n	8010c20 <_malloc_r+0xa0>
 8010c62:	bf00      	nop
 8010c64:	200060d8 	.word	0x200060d8

08010c68 <__ssputs_r>:
 8010c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c6c:	688e      	ldr	r6, [r1, #8]
 8010c6e:	429e      	cmp	r6, r3
 8010c70:	4682      	mov	sl, r0
 8010c72:	460c      	mov	r4, r1
 8010c74:	4690      	mov	r8, r2
 8010c76:	461f      	mov	r7, r3
 8010c78:	d838      	bhi.n	8010cec <__ssputs_r+0x84>
 8010c7a:	898a      	ldrh	r2, [r1, #12]
 8010c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c80:	d032      	beq.n	8010ce8 <__ssputs_r+0x80>
 8010c82:	6825      	ldr	r5, [r4, #0]
 8010c84:	6909      	ldr	r1, [r1, #16]
 8010c86:	eba5 0901 	sub.w	r9, r5, r1
 8010c8a:	6965      	ldr	r5, [r4, #20]
 8010c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c94:	3301      	adds	r3, #1
 8010c96:	444b      	add	r3, r9
 8010c98:	106d      	asrs	r5, r5, #1
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	bf38      	it	cc
 8010c9e:	461d      	movcc	r5, r3
 8010ca0:	0553      	lsls	r3, r2, #21
 8010ca2:	d531      	bpl.n	8010d08 <__ssputs_r+0xa0>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7ff ff6b 	bl	8010b80 <_malloc_r>
 8010caa:	4606      	mov	r6, r0
 8010cac:	b950      	cbnz	r0, 8010cc4 <__ssputs_r+0x5c>
 8010cae:	230c      	movs	r3, #12
 8010cb0:	f8ca 3000 	str.w	r3, [sl]
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc4:	6921      	ldr	r1, [r4, #16]
 8010cc6:	464a      	mov	r2, r9
 8010cc8:	f7fe f82e 	bl	800ed28 <memcpy>
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cd6:	81a3      	strh	r3, [r4, #12]
 8010cd8:	6126      	str	r6, [r4, #16]
 8010cda:	6165      	str	r5, [r4, #20]
 8010cdc:	444e      	add	r6, r9
 8010cde:	eba5 0509 	sub.w	r5, r5, r9
 8010ce2:	6026      	str	r6, [r4, #0]
 8010ce4:	60a5      	str	r5, [r4, #8]
 8010ce6:	463e      	mov	r6, r7
 8010ce8:	42be      	cmp	r6, r7
 8010cea:	d900      	bls.n	8010cee <__ssputs_r+0x86>
 8010cec:	463e      	mov	r6, r7
 8010cee:	6820      	ldr	r0, [r4, #0]
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	4641      	mov	r1, r8
 8010cf4:	f000 f966 	bl	8010fc4 <memmove>
 8010cf8:	68a3      	ldr	r3, [r4, #8]
 8010cfa:	1b9b      	subs	r3, r3, r6
 8010cfc:	60a3      	str	r3, [r4, #8]
 8010cfe:	6823      	ldr	r3, [r4, #0]
 8010d00:	4433      	add	r3, r6
 8010d02:	6023      	str	r3, [r4, #0]
 8010d04:	2000      	movs	r0, #0
 8010d06:	e7db      	b.n	8010cc0 <__ssputs_r+0x58>
 8010d08:	462a      	mov	r2, r5
 8010d0a:	f000 f981 	bl	8011010 <_realloc_r>
 8010d0e:	4606      	mov	r6, r0
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d1e1      	bne.n	8010cd8 <__ssputs_r+0x70>
 8010d14:	6921      	ldr	r1, [r4, #16]
 8010d16:	4650      	mov	r0, sl
 8010d18:	f7ff fec6 	bl	8010aa8 <_free_r>
 8010d1c:	e7c7      	b.n	8010cae <__ssputs_r+0x46>
	...

08010d20 <_svfiprintf_r>:
 8010d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d24:	4698      	mov	r8, r3
 8010d26:	898b      	ldrh	r3, [r1, #12]
 8010d28:	061b      	lsls	r3, r3, #24
 8010d2a:	b09d      	sub	sp, #116	; 0x74
 8010d2c:	4607      	mov	r7, r0
 8010d2e:	460d      	mov	r5, r1
 8010d30:	4614      	mov	r4, r2
 8010d32:	d50e      	bpl.n	8010d52 <_svfiprintf_r+0x32>
 8010d34:	690b      	ldr	r3, [r1, #16]
 8010d36:	b963      	cbnz	r3, 8010d52 <_svfiprintf_r+0x32>
 8010d38:	2140      	movs	r1, #64	; 0x40
 8010d3a:	f7ff ff21 	bl	8010b80 <_malloc_r>
 8010d3e:	6028      	str	r0, [r5, #0]
 8010d40:	6128      	str	r0, [r5, #16]
 8010d42:	b920      	cbnz	r0, 8010d4e <_svfiprintf_r+0x2e>
 8010d44:	230c      	movs	r3, #12
 8010d46:	603b      	str	r3, [r7, #0]
 8010d48:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4c:	e0d1      	b.n	8010ef2 <_svfiprintf_r+0x1d2>
 8010d4e:	2340      	movs	r3, #64	; 0x40
 8010d50:	616b      	str	r3, [r5, #20]
 8010d52:	2300      	movs	r3, #0
 8010d54:	9309      	str	r3, [sp, #36]	; 0x24
 8010d56:	2320      	movs	r3, #32
 8010d58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d60:	2330      	movs	r3, #48	; 0x30
 8010d62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f0c <_svfiprintf_r+0x1ec>
 8010d66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d6a:	f04f 0901 	mov.w	r9, #1
 8010d6e:	4623      	mov	r3, r4
 8010d70:	469a      	mov	sl, r3
 8010d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d76:	b10a      	cbz	r2, 8010d7c <_svfiprintf_r+0x5c>
 8010d78:	2a25      	cmp	r2, #37	; 0x25
 8010d7a:	d1f9      	bne.n	8010d70 <_svfiprintf_r+0x50>
 8010d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010d80:	d00b      	beq.n	8010d9a <_svfiprintf_r+0x7a>
 8010d82:	465b      	mov	r3, fp
 8010d84:	4622      	mov	r2, r4
 8010d86:	4629      	mov	r1, r5
 8010d88:	4638      	mov	r0, r7
 8010d8a:	f7ff ff6d 	bl	8010c68 <__ssputs_r>
 8010d8e:	3001      	adds	r0, #1
 8010d90:	f000 80aa 	beq.w	8010ee8 <_svfiprintf_r+0x1c8>
 8010d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d96:	445a      	add	r2, fp
 8010d98:	9209      	str	r2, [sp, #36]	; 0x24
 8010d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80a2 	beq.w	8010ee8 <_svfiprintf_r+0x1c8>
 8010da4:	2300      	movs	r3, #0
 8010da6:	f04f 32ff 	mov.w	r2, #4294967295
 8010daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dae:	f10a 0a01 	add.w	sl, sl, #1
 8010db2:	9304      	str	r3, [sp, #16]
 8010db4:	9307      	str	r3, [sp, #28]
 8010db6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dba:	931a      	str	r3, [sp, #104]	; 0x68
 8010dbc:	4654      	mov	r4, sl
 8010dbe:	2205      	movs	r2, #5
 8010dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc4:	4851      	ldr	r0, [pc, #324]	; (8010f0c <_svfiprintf_r+0x1ec>)
 8010dc6:	f7ef fa1b 	bl	8000200 <memchr>
 8010dca:	9a04      	ldr	r2, [sp, #16]
 8010dcc:	b9d8      	cbnz	r0, 8010e06 <_svfiprintf_r+0xe6>
 8010dce:	06d0      	lsls	r0, r2, #27
 8010dd0:	bf44      	itt	mi
 8010dd2:	2320      	movmi	r3, #32
 8010dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dd8:	0711      	lsls	r1, r2, #28
 8010dda:	bf44      	itt	mi
 8010ddc:	232b      	movmi	r3, #43	; 0x2b
 8010dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010de2:	f89a 3000 	ldrb.w	r3, [sl]
 8010de6:	2b2a      	cmp	r3, #42	; 0x2a
 8010de8:	d015      	beq.n	8010e16 <_svfiprintf_r+0xf6>
 8010dea:	9a07      	ldr	r2, [sp, #28]
 8010dec:	4654      	mov	r4, sl
 8010dee:	2000      	movs	r0, #0
 8010df0:	f04f 0c0a 	mov.w	ip, #10
 8010df4:	4621      	mov	r1, r4
 8010df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dfa:	3b30      	subs	r3, #48	; 0x30
 8010dfc:	2b09      	cmp	r3, #9
 8010dfe:	d94e      	bls.n	8010e9e <_svfiprintf_r+0x17e>
 8010e00:	b1b0      	cbz	r0, 8010e30 <_svfiprintf_r+0x110>
 8010e02:	9207      	str	r2, [sp, #28]
 8010e04:	e014      	b.n	8010e30 <_svfiprintf_r+0x110>
 8010e06:	eba0 0308 	sub.w	r3, r0, r8
 8010e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	9304      	str	r3, [sp, #16]
 8010e12:	46a2      	mov	sl, r4
 8010e14:	e7d2      	b.n	8010dbc <_svfiprintf_r+0x9c>
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	1d19      	adds	r1, r3, #4
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	9103      	str	r1, [sp, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bfbb      	ittet	lt
 8010e22:	425b      	neglt	r3, r3
 8010e24:	f042 0202 	orrlt.w	r2, r2, #2
 8010e28:	9307      	strge	r3, [sp, #28]
 8010e2a:	9307      	strlt	r3, [sp, #28]
 8010e2c:	bfb8      	it	lt
 8010e2e:	9204      	strlt	r2, [sp, #16]
 8010e30:	7823      	ldrb	r3, [r4, #0]
 8010e32:	2b2e      	cmp	r3, #46	; 0x2e
 8010e34:	d10c      	bne.n	8010e50 <_svfiprintf_r+0x130>
 8010e36:	7863      	ldrb	r3, [r4, #1]
 8010e38:	2b2a      	cmp	r3, #42	; 0x2a
 8010e3a:	d135      	bne.n	8010ea8 <_svfiprintf_r+0x188>
 8010e3c:	9b03      	ldr	r3, [sp, #12]
 8010e3e:	1d1a      	adds	r2, r3, #4
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	9203      	str	r2, [sp, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	bfb8      	it	lt
 8010e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e4c:	3402      	adds	r4, #2
 8010e4e:	9305      	str	r3, [sp, #20]
 8010e50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f1c <_svfiprintf_r+0x1fc>
 8010e54:	7821      	ldrb	r1, [r4, #0]
 8010e56:	2203      	movs	r2, #3
 8010e58:	4650      	mov	r0, sl
 8010e5a:	f7ef f9d1 	bl	8000200 <memchr>
 8010e5e:	b140      	cbz	r0, 8010e72 <_svfiprintf_r+0x152>
 8010e60:	2340      	movs	r3, #64	; 0x40
 8010e62:	eba0 000a 	sub.w	r0, r0, sl
 8010e66:	fa03 f000 	lsl.w	r0, r3, r0
 8010e6a:	9b04      	ldr	r3, [sp, #16]
 8010e6c:	4303      	orrs	r3, r0
 8010e6e:	3401      	adds	r4, #1
 8010e70:	9304      	str	r3, [sp, #16]
 8010e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e76:	4826      	ldr	r0, [pc, #152]	; (8010f10 <_svfiprintf_r+0x1f0>)
 8010e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e7c:	2206      	movs	r2, #6
 8010e7e:	f7ef f9bf 	bl	8000200 <memchr>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d038      	beq.n	8010ef8 <_svfiprintf_r+0x1d8>
 8010e86:	4b23      	ldr	r3, [pc, #140]	; (8010f14 <_svfiprintf_r+0x1f4>)
 8010e88:	bb1b      	cbnz	r3, 8010ed2 <_svfiprintf_r+0x1b2>
 8010e8a:	9b03      	ldr	r3, [sp, #12]
 8010e8c:	3307      	adds	r3, #7
 8010e8e:	f023 0307 	bic.w	r3, r3, #7
 8010e92:	3308      	adds	r3, #8
 8010e94:	9303      	str	r3, [sp, #12]
 8010e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e98:	4433      	add	r3, r6
 8010e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9c:	e767      	b.n	8010d6e <_svfiprintf_r+0x4e>
 8010e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ea2:	460c      	mov	r4, r1
 8010ea4:	2001      	movs	r0, #1
 8010ea6:	e7a5      	b.n	8010df4 <_svfiprintf_r+0xd4>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	3401      	adds	r4, #1
 8010eac:	9305      	str	r3, [sp, #20]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	f04f 0c0a 	mov.w	ip, #10
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eba:	3a30      	subs	r2, #48	; 0x30
 8010ebc:	2a09      	cmp	r2, #9
 8010ebe:	d903      	bls.n	8010ec8 <_svfiprintf_r+0x1a8>
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d0c5      	beq.n	8010e50 <_svfiprintf_r+0x130>
 8010ec4:	9105      	str	r1, [sp, #20]
 8010ec6:	e7c3      	b.n	8010e50 <_svfiprintf_r+0x130>
 8010ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ecc:	4604      	mov	r4, r0
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e7f0      	b.n	8010eb4 <_svfiprintf_r+0x194>
 8010ed2:	ab03      	add	r3, sp, #12
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	462a      	mov	r2, r5
 8010ed8:	4b0f      	ldr	r3, [pc, #60]	; (8010f18 <_svfiprintf_r+0x1f8>)
 8010eda:	a904      	add	r1, sp, #16
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7fd ffd9 	bl	800ee94 <_printf_float>
 8010ee2:	1c42      	adds	r2, r0, #1
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	d1d6      	bne.n	8010e96 <_svfiprintf_r+0x176>
 8010ee8:	89ab      	ldrh	r3, [r5, #12]
 8010eea:	065b      	lsls	r3, r3, #25
 8010eec:	f53f af2c 	bmi.w	8010d48 <_svfiprintf_r+0x28>
 8010ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ef2:	b01d      	add	sp, #116	; 0x74
 8010ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef8:	ab03      	add	r3, sp, #12
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	462a      	mov	r2, r5
 8010efe:	4b06      	ldr	r3, [pc, #24]	; (8010f18 <_svfiprintf_r+0x1f8>)
 8010f00:	a904      	add	r1, sp, #16
 8010f02:	4638      	mov	r0, r7
 8010f04:	f7fe fa6a 	bl	800f3dc <_printf_i>
 8010f08:	e7eb      	b.n	8010ee2 <_svfiprintf_r+0x1c2>
 8010f0a:	bf00      	nop
 8010f0c:	0801483c 	.word	0x0801483c
 8010f10:	08014846 	.word	0x08014846
 8010f14:	0800ee95 	.word	0x0800ee95
 8010f18:	08010c69 	.word	0x08010c69
 8010f1c:	08014842 	.word	0x08014842

08010f20 <_sbrk_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d06      	ldr	r5, [pc, #24]	; (8010f3c <_sbrk_r+0x1c>)
 8010f24:	2300      	movs	r3, #0
 8010f26:	4604      	mov	r4, r0
 8010f28:	4608      	mov	r0, r1
 8010f2a:	602b      	str	r3, [r5, #0]
 8010f2c:	f7f0 ff1a 	bl	8001d64 <_sbrk>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_sbrk_r+0x1a>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_sbrk_r+0x1a>
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	200060e0 	.word	0x200060e0

08010f40 <__assert_func>:
 8010f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f42:	4614      	mov	r4, r2
 8010f44:	461a      	mov	r2, r3
 8010f46:	4b09      	ldr	r3, [pc, #36]	; (8010f6c <__assert_func+0x2c>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	68d8      	ldr	r0, [r3, #12]
 8010f4e:	b14c      	cbz	r4, 8010f64 <__assert_func+0x24>
 8010f50:	4b07      	ldr	r3, [pc, #28]	; (8010f70 <__assert_func+0x30>)
 8010f52:	9100      	str	r1, [sp, #0]
 8010f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f58:	4906      	ldr	r1, [pc, #24]	; (8010f74 <__assert_func+0x34>)
 8010f5a:	462b      	mov	r3, r5
 8010f5c:	f000 f80e 	bl	8010f7c <fiprintf>
 8010f60:	f000 faac 	bl	80114bc <abort>
 8010f64:	4b04      	ldr	r3, [pc, #16]	; (8010f78 <__assert_func+0x38>)
 8010f66:	461c      	mov	r4, r3
 8010f68:	e7f3      	b.n	8010f52 <__assert_func+0x12>
 8010f6a:	bf00      	nop
 8010f6c:	20000184 	.word	0x20000184
 8010f70:	0801484d 	.word	0x0801484d
 8010f74:	0801485a 	.word	0x0801485a
 8010f78:	08014888 	.word	0x08014888

08010f7c <fiprintf>:
 8010f7c:	b40e      	push	{r1, r2, r3}
 8010f7e:	b503      	push	{r0, r1, lr}
 8010f80:	4601      	mov	r1, r0
 8010f82:	ab03      	add	r3, sp, #12
 8010f84:	4805      	ldr	r0, [pc, #20]	; (8010f9c <fiprintf+0x20>)
 8010f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f8a:	6800      	ldr	r0, [r0, #0]
 8010f8c:	9301      	str	r3, [sp, #4]
 8010f8e:	f000 f897 	bl	80110c0 <_vfiprintf_r>
 8010f92:	b002      	add	sp, #8
 8010f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f98:	b003      	add	sp, #12
 8010f9a:	4770      	bx	lr
 8010f9c:	20000184 	.word	0x20000184

08010fa0 <__ascii_mbtowc>:
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	b901      	cbnz	r1, 8010fa6 <__ascii_mbtowc+0x6>
 8010fa4:	a901      	add	r1, sp, #4
 8010fa6:	b142      	cbz	r2, 8010fba <__ascii_mbtowc+0x1a>
 8010fa8:	b14b      	cbz	r3, 8010fbe <__ascii_mbtowc+0x1e>
 8010faa:	7813      	ldrb	r3, [r2, #0]
 8010fac:	600b      	str	r3, [r1, #0]
 8010fae:	7812      	ldrb	r2, [r2, #0]
 8010fb0:	1e10      	subs	r0, r2, #0
 8010fb2:	bf18      	it	ne
 8010fb4:	2001      	movne	r0, #1
 8010fb6:	b002      	add	sp, #8
 8010fb8:	4770      	bx	lr
 8010fba:	4610      	mov	r0, r2
 8010fbc:	e7fb      	b.n	8010fb6 <__ascii_mbtowc+0x16>
 8010fbe:	f06f 0001 	mvn.w	r0, #1
 8010fc2:	e7f8      	b.n	8010fb6 <__ascii_mbtowc+0x16>

08010fc4 <memmove>:
 8010fc4:	4288      	cmp	r0, r1
 8010fc6:	b510      	push	{r4, lr}
 8010fc8:	eb01 0402 	add.w	r4, r1, r2
 8010fcc:	d902      	bls.n	8010fd4 <memmove+0x10>
 8010fce:	4284      	cmp	r4, r0
 8010fd0:	4623      	mov	r3, r4
 8010fd2:	d807      	bhi.n	8010fe4 <memmove+0x20>
 8010fd4:	1e43      	subs	r3, r0, #1
 8010fd6:	42a1      	cmp	r1, r4
 8010fd8:	d008      	beq.n	8010fec <memmove+0x28>
 8010fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fe2:	e7f8      	b.n	8010fd6 <memmove+0x12>
 8010fe4:	4402      	add	r2, r0
 8010fe6:	4601      	mov	r1, r0
 8010fe8:	428a      	cmp	r2, r1
 8010fea:	d100      	bne.n	8010fee <memmove+0x2a>
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ff6:	e7f7      	b.n	8010fe8 <memmove+0x24>

08010ff8 <__malloc_lock>:
 8010ff8:	4801      	ldr	r0, [pc, #4]	; (8011000 <__malloc_lock+0x8>)
 8010ffa:	f000 bc1f 	b.w	801183c <__retarget_lock_acquire_recursive>
 8010ffe:	bf00      	nop
 8011000:	200060e4 	.word	0x200060e4

08011004 <__malloc_unlock>:
 8011004:	4801      	ldr	r0, [pc, #4]	; (801100c <__malloc_unlock+0x8>)
 8011006:	f000 bc1a 	b.w	801183e <__retarget_lock_release_recursive>
 801100a:	bf00      	nop
 801100c:	200060e4 	.word	0x200060e4

08011010 <_realloc_r>:
 8011010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011014:	4680      	mov	r8, r0
 8011016:	4614      	mov	r4, r2
 8011018:	460e      	mov	r6, r1
 801101a:	b921      	cbnz	r1, 8011026 <_realloc_r+0x16>
 801101c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011020:	4611      	mov	r1, r2
 8011022:	f7ff bdad 	b.w	8010b80 <_malloc_r>
 8011026:	b92a      	cbnz	r2, 8011034 <_realloc_r+0x24>
 8011028:	f7ff fd3e 	bl	8010aa8 <_free_r>
 801102c:	4625      	mov	r5, r4
 801102e:	4628      	mov	r0, r5
 8011030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011034:	f000 fc6a 	bl	801190c <_malloc_usable_size_r>
 8011038:	4284      	cmp	r4, r0
 801103a:	4607      	mov	r7, r0
 801103c:	d802      	bhi.n	8011044 <_realloc_r+0x34>
 801103e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011042:	d812      	bhi.n	801106a <_realloc_r+0x5a>
 8011044:	4621      	mov	r1, r4
 8011046:	4640      	mov	r0, r8
 8011048:	f7ff fd9a 	bl	8010b80 <_malloc_r>
 801104c:	4605      	mov	r5, r0
 801104e:	2800      	cmp	r0, #0
 8011050:	d0ed      	beq.n	801102e <_realloc_r+0x1e>
 8011052:	42bc      	cmp	r4, r7
 8011054:	4622      	mov	r2, r4
 8011056:	4631      	mov	r1, r6
 8011058:	bf28      	it	cs
 801105a:	463a      	movcs	r2, r7
 801105c:	f7fd fe64 	bl	800ed28 <memcpy>
 8011060:	4631      	mov	r1, r6
 8011062:	4640      	mov	r0, r8
 8011064:	f7ff fd20 	bl	8010aa8 <_free_r>
 8011068:	e7e1      	b.n	801102e <_realloc_r+0x1e>
 801106a:	4635      	mov	r5, r6
 801106c:	e7df      	b.n	801102e <_realloc_r+0x1e>

0801106e <__sfputc_r>:
 801106e:	6893      	ldr	r3, [r2, #8]
 8011070:	3b01      	subs	r3, #1
 8011072:	2b00      	cmp	r3, #0
 8011074:	b410      	push	{r4}
 8011076:	6093      	str	r3, [r2, #8]
 8011078:	da08      	bge.n	801108c <__sfputc_r+0x1e>
 801107a:	6994      	ldr	r4, [r2, #24]
 801107c:	42a3      	cmp	r3, r4
 801107e:	db01      	blt.n	8011084 <__sfputc_r+0x16>
 8011080:	290a      	cmp	r1, #10
 8011082:	d103      	bne.n	801108c <__sfputc_r+0x1e>
 8011084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011088:	f000 b94a 	b.w	8011320 <__swbuf_r>
 801108c:	6813      	ldr	r3, [r2, #0]
 801108e:	1c58      	adds	r0, r3, #1
 8011090:	6010      	str	r0, [r2, #0]
 8011092:	7019      	strb	r1, [r3, #0]
 8011094:	4608      	mov	r0, r1
 8011096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801109a:	4770      	bx	lr

0801109c <__sfputs_r>:
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	4606      	mov	r6, r0
 80110a0:	460f      	mov	r7, r1
 80110a2:	4614      	mov	r4, r2
 80110a4:	18d5      	adds	r5, r2, r3
 80110a6:	42ac      	cmp	r4, r5
 80110a8:	d101      	bne.n	80110ae <__sfputs_r+0x12>
 80110aa:	2000      	movs	r0, #0
 80110ac:	e007      	b.n	80110be <__sfputs_r+0x22>
 80110ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110b2:	463a      	mov	r2, r7
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7ff ffda 	bl	801106e <__sfputc_r>
 80110ba:	1c43      	adds	r3, r0, #1
 80110bc:	d1f3      	bne.n	80110a6 <__sfputs_r+0xa>
 80110be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110c0 <_vfiprintf_r>:
 80110c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c4:	460d      	mov	r5, r1
 80110c6:	b09d      	sub	sp, #116	; 0x74
 80110c8:	4614      	mov	r4, r2
 80110ca:	4698      	mov	r8, r3
 80110cc:	4606      	mov	r6, r0
 80110ce:	b118      	cbz	r0, 80110d8 <_vfiprintf_r+0x18>
 80110d0:	6983      	ldr	r3, [r0, #24]
 80110d2:	b90b      	cbnz	r3, 80110d8 <_vfiprintf_r+0x18>
 80110d4:	f000 fb14 	bl	8011700 <__sinit>
 80110d8:	4b89      	ldr	r3, [pc, #548]	; (8011300 <_vfiprintf_r+0x240>)
 80110da:	429d      	cmp	r5, r3
 80110dc:	d11b      	bne.n	8011116 <_vfiprintf_r+0x56>
 80110de:	6875      	ldr	r5, [r6, #4]
 80110e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110e2:	07d9      	lsls	r1, r3, #31
 80110e4:	d405      	bmi.n	80110f2 <_vfiprintf_r+0x32>
 80110e6:	89ab      	ldrh	r3, [r5, #12]
 80110e8:	059a      	lsls	r2, r3, #22
 80110ea:	d402      	bmi.n	80110f2 <_vfiprintf_r+0x32>
 80110ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ee:	f000 fba5 	bl	801183c <__retarget_lock_acquire_recursive>
 80110f2:	89ab      	ldrh	r3, [r5, #12]
 80110f4:	071b      	lsls	r3, r3, #28
 80110f6:	d501      	bpl.n	80110fc <_vfiprintf_r+0x3c>
 80110f8:	692b      	ldr	r3, [r5, #16]
 80110fa:	b9eb      	cbnz	r3, 8011138 <_vfiprintf_r+0x78>
 80110fc:	4629      	mov	r1, r5
 80110fe:	4630      	mov	r0, r6
 8011100:	f000 f96e 	bl	80113e0 <__swsetup_r>
 8011104:	b1c0      	cbz	r0, 8011138 <_vfiprintf_r+0x78>
 8011106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011108:	07dc      	lsls	r4, r3, #31
 801110a:	d50e      	bpl.n	801112a <_vfiprintf_r+0x6a>
 801110c:	f04f 30ff 	mov.w	r0, #4294967295
 8011110:	b01d      	add	sp, #116	; 0x74
 8011112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011116:	4b7b      	ldr	r3, [pc, #492]	; (8011304 <_vfiprintf_r+0x244>)
 8011118:	429d      	cmp	r5, r3
 801111a:	d101      	bne.n	8011120 <_vfiprintf_r+0x60>
 801111c:	68b5      	ldr	r5, [r6, #8]
 801111e:	e7df      	b.n	80110e0 <_vfiprintf_r+0x20>
 8011120:	4b79      	ldr	r3, [pc, #484]	; (8011308 <_vfiprintf_r+0x248>)
 8011122:	429d      	cmp	r5, r3
 8011124:	bf08      	it	eq
 8011126:	68f5      	ldreq	r5, [r6, #12]
 8011128:	e7da      	b.n	80110e0 <_vfiprintf_r+0x20>
 801112a:	89ab      	ldrh	r3, [r5, #12]
 801112c:	0598      	lsls	r0, r3, #22
 801112e:	d4ed      	bmi.n	801110c <_vfiprintf_r+0x4c>
 8011130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011132:	f000 fb84 	bl	801183e <__retarget_lock_release_recursive>
 8011136:	e7e9      	b.n	801110c <_vfiprintf_r+0x4c>
 8011138:	2300      	movs	r3, #0
 801113a:	9309      	str	r3, [sp, #36]	; 0x24
 801113c:	2320      	movs	r3, #32
 801113e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011142:	f8cd 800c 	str.w	r8, [sp, #12]
 8011146:	2330      	movs	r3, #48	; 0x30
 8011148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801130c <_vfiprintf_r+0x24c>
 801114c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011150:	f04f 0901 	mov.w	r9, #1
 8011154:	4623      	mov	r3, r4
 8011156:	469a      	mov	sl, r3
 8011158:	f813 2b01 	ldrb.w	r2, [r3], #1
 801115c:	b10a      	cbz	r2, 8011162 <_vfiprintf_r+0xa2>
 801115e:	2a25      	cmp	r2, #37	; 0x25
 8011160:	d1f9      	bne.n	8011156 <_vfiprintf_r+0x96>
 8011162:	ebba 0b04 	subs.w	fp, sl, r4
 8011166:	d00b      	beq.n	8011180 <_vfiprintf_r+0xc0>
 8011168:	465b      	mov	r3, fp
 801116a:	4622      	mov	r2, r4
 801116c:	4629      	mov	r1, r5
 801116e:	4630      	mov	r0, r6
 8011170:	f7ff ff94 	bl	801109c <__sfputs_r>
 8011174:	3001      	adds	r0, #1
 8011176:	f000 80aa 	beq.w	80112ce <_vfiprintf_r+0x20e>
 801117a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801117c:	445a      	add	r2, fp
 801117e:	9209      	str	r2, [sp, #36]	; 0x24
 8011180:	f89a 3000 	ldrb.w	r3, [sl]
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 80a2 	beq.w	80112ce <_vfiprintf_r+0x20e>
 801118a:	2300      	movs	r3, #0
 801118c:	f04f 32ff 	mov.w	r2, #4294967295
 8011190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011194:	f10a 0a01 	add.w	sl, sl, #1
 8011198:	9304      	str	r3, [sp, #16]
 801119a:	9307      	str	r3, [sp, #28]
 801119c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111a0:	931a      	str	r3, [sp, #104]	; 0x68
 80111a2:	4654      	mov	r4, sl
 80111a4:	2205      	movs	r2, #5
 80111a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111aa:	4858      	ldr	r0, [pc, #352]	; (801130c <_vfiprintf_r+0x24c>)
 80111ac:	f7ef f828 	bl	8000200 <memchr>
 80111b0:	9a04      	ldr	r2, [sp, #16]
 80111b2:	b9d8      	cbnz	r0, 80111ec <_vfiprintf_r+0x12c>
 80111b4:	06d1      	lsls	r1, r2, #27
 80111b6:	bf44      	itt	mi
 80111b8:	2320      	movmi	r3, #32
 80111ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111be:	0713      	lsls	r3, r2, #28
 80111c0:	bf44      	itt	mi
 80111c2:	232b      	movmi	r3, #43	; 0x2b
 80111c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111c8:	f89a 3000 	ldrb.w	r3, [sl]
 80111cc:	2b2a      	cmp	r3, #42	; 0x2a
 80111ce:	d015      	beq.n	80111fc <_vfiprintf_r+0x13c>
 80111d0:	9a07      	ldr	r2, [sp, #28]
 80111d2:	4654      	mov	r4, sl
 80111d4:	2000      	movs	r0, #0
 80111d6:	f04f 0c0a 	mov.w	ip, #10
 80111da:	4621      	mov	r1, r4
 80111dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111e0:	3b30      	subs	r3, #48	; 0x30
 80111e2:	2b09      	cmp	r3, #9
 80111e4:	d94e      	bls.n	8011284 <_vfiprintf_r+0x1c4>
 80111e6:	b1b0      	cbz	r0, 8011216 <_vfiprintf_r+0x156>
 80111e8:	9207      	str	r2, [sp, #28]
 80111ea:	e014      	b.n	8011216 <_vfiprintf_r+0x156>
 80111ec:	eba0 0308 	sub.w	r3, r0, r8
 80111f0:	fa09 f303 	lsl.w	r3, r9, r3
 80111f4:	4313      	orrs	r3, r2
 80111f6:	9304      	str	r3, [sp, #16]
 80111f8:	46a2      	mov	sl, r4
 80111fa:	e7d2      	b.n	80111a2 <_vfiprintf_r+0xe2>
 80111fc:	9b03      	ldr	r3, [sp, #12]
 80111fe:	1d19      	adds	r1, r3, #4
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	9103      	str	r1, [sp, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	bfbb      	ittet	lt
 8011208:	425b      	neglt	r3, r3
 801120a:	f042 0202 	orrlt.w	r2, r2, #2
 801120e:	9307      	strge	r3, [sp, #28]
 8011210:	9307      	strlt	r3, [sp, #28]
 8011212:	bfb8      	it	lt
 8011214:	9204      	strlt	r2, [sp, #16]
 8011216:	7823      	ldrb	r3, [r4, #0]
 8011218:	2b2e      	cmp	r3, #46	; 0x2e
 801121a:	d10c      	bne.n	8011236 <_vfiprintf_r+0x176>
 801121c:	7863      	ldrb	r3, [r4, #1]
 801121e:	2b2a      	cmp	r3, #42	; 0x2a
 8011220:	d135      	bne.n	801128e <_vfiprintf_r+0x1ce>
 8011222:	9b03      	ldr	r3, [sp, #12]
 8011224:	1d1a      	adds	r2, r3, #4
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	9203      	str	r2, [sp, #12]
 801122a:	2b00      	cmp	r3, #0
 801122c:	bfb8      	it	lt
 801122e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011232:	3402      	adds	r4, #2
 8011234:	9305      	str	r3, [sp, #20]
 8011236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801131c <_vfiprintf_r+0x25c>
 801123a:	7821      	ldrb	r1, [r4, #0]
 801123c:	2203      	movs	r2, #3
 801123e:	4650      	mov	r0, sl
 8011240:	f7ee ffde 	bl	8000200 <memchr>
 8011244:	b140      	cbz	r0, 8011258 <_vfiprintf_r+0x198>
 8011246:	2340      	movs	r3, #64	; 0x40
 8011248:	eba0 000a 	sub.w	r0, r0, sl
 801124c:	fa03 f000 	lsl.w	r0, r3, r0
 8011250:	9b04      	ldr	r3, [sp, #16]
 8011252:	4303      	orrs	r3, r0
 8011254:	3401      	adds	r4, #1
 8011256:	9304      	str	r3, [sp, #16]
 8011258:	f814 1b01 	ldrb.w	r1, [r4], #1
 801125c:	482c      	ldr	r0, [pc, #176]	; (8011310 <_vfiprintf_r+0x250>)
 801125e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011262:	2206      	movs	r2, #6
 8011264:	f7ee ffcc 	bl	8000200 <memchr>
 8011268:	2800      	cmp	r0, #0
 801126a:	d03f      	beq.n	80112ec <_vfiprintf_r+0x22c>
 801126c:	4b29      	ldr	r3, [pc, #164]	; (8011314 <_vfiprintf_r+0x254>)
 801126e:	bb1b      	cbnz	r3, 80112b8 <_vfiprintf_r+0x1f8>
 8011270:	9b03      	ldr	r3, [sp, #12]
 8011272:	3307      	adds	r3, #7
 8011274:	f023 0307 	bic.w	r3, r3, #7
 8011278:	3308      	adds	r3, #8
 801127a:	9303      	str	r3, [sp, #12]
 801127c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801127e:	443b      	add	r3, r7
 8011280:	9309      	str	r3, [sp, #36]	; 0x24
 8011282:	e767      	b.n	8011154 <_vfiprintf_r+0x94>
 8011284:	fb0c 3202 	mla	r2, ip, r2, r3
 8011288:	460c      	mov	r4, r1
 801128a:	2001      	movs	r0, #1
 801128c:	e7a5      	b.n	80111da <_vfiprintf_r+0x11a>
 801128e:	2300      	movs	r3, #0
 8011290:	3401      	adds	r4, #1
 8011292:	9305      	str	r3, [sp, #20]
 8011294:	4619      	mov	r1, r3
 8011296:	f04f 0c0a 	mov.w	ip, #10
 801129a:	4620      	mov	r0, r4
 801129c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112a0:	3a30      	subs	r2, #48	; 0x30
 80112a2:	2a09      	cmp	r2, #9
 80112a4:	d903      	bls.n	80112ae <_vfiprintf_r+0x1ee>
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0c5      	beq.n	8011236 <_vfiprintf_r+0x176>
 80112aa:	9105      	str	r1, [sp, #20]
 80112ac:	e7c3      	b.n	8011236 <_vfiprintf_r+0x176>
 80112ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80112b2:	4604      	mov	r4, r0
 80112b4:	2301      	movs	r3, #1
 80112b6:	e7f0      	b.n	801129a <_vfiprintf_r+0x1da>
 80112b8:	ab03      	add	r3, sp, #12
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	462a      	mov	r2, r5
 80112be:	4b16      	ldr	r3, [pc, #88]	; (8011318 <_vfiprintf_r+0x258>)
 80112c0:	a904      	add	r1, sp, #16
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7fd fde6 	bl	800ee94 <_printf_float>
 80112c8:	4607      	mov	r7, r0
 80112ca:	1c78      	adds	r0, r7, #1
 80112cc:	d1d6      	bne.n	801127c <_vfiprintf_r+0x1bc>
 80112ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112d0:	07d9      	lsls	r1, r3, #31
 80112d2:	d405      	bmi.n	80112e0 <_vfiprintf_r+0x220>
 80112d4:	89ab      	ldrh	r3, [r5, #12]
 80112d6:	059a      	lsls	r2, r3, #22
 80112d8:	d402      	bmi.n	80112e0 <_vfiprintf_r+0x220>
 80112da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112dc:	f000 faaf 	bl	801183e <__retarget_lock_release_recursive>
 80112e0:	89ab      	ldrh	r3, [r5, #12]
 80112e2:	065b      	lsls	r3, r3, #25
 80112e4:	f53f af12 	bmi.w	801110c <_vfiprintf_r+0x4c>
 80112e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112ea:	e711      	b.n	8011110 <_vfiprintf_r+0x50>
 80112ec:	ab03      	add	r3, sp, #12
 80112ee:	9300      	str	r3, [sp, #0]
 80112f0:	462a      	mov	r2, r5
 80112f2:	4b09      	ldr	r3, [pc, #36]	; (8011318 <_vfiprintf_r+0x258>)
 80112f4:	a904      	add	r1, sp, #16
 80112f6:	4630      	mov	r0, r6
 80112f8:	f7fe f870 	bl	800f3dc <_printf_i>
 80112fc:	e7e4      	b.n	80112c8 <_vfiprintf_r+0x208>
 80112fe:	bf00      	nop
 8011300:	080149b4 	.word	0x080149b4
 8011304:	080149d4 	.word	0x080149d4
 8011308:	08014994 	.word	0x08014994
 801130c:	0801483c 	.word	0x0801483c
 8011310:	08014846 	.word	0x08014846
 8011314:	0800ee95 	.word	0x0800ee95
 8011318:	0801109d 	.word	0x0801109d
 801131c:	08014842 	.word	0x08014842

08011320 <__swbuf_r>:
 8011320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011322:	460e      	mov	r6, r1
 8011324:	4614      	mov	r4, r2
 8011326:	4605      	mov	r5, r0
 8011328:	b118      	cbz	r0, 8011332 <__swbuf_r+0x12>
 801132a:	6983      	ldr	r3, [r0, #24]
 801132c:	b90b      	cbnz	r3, 8011332 <__swbuf_r+0x12>
 801132e:	f000 f9e7 	bl	8011700 <__sinit>
 8011332:	4b21      	ldr	r3, [pc, #132]	; (80113b8 <__swbuf_r+0x98>)
 8011334:	429c      	cmp	r4, r3
 8011336:	d12b      	bne.n	8011390 <__swbuf_r+0x70>
 8011338:	686c      	ldr	r4, [r5, #4]
 801133a:	69a3      	ldr	r3, [r4, #24]
 801133c:	60a3      	str	r3, [r4, #8]
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	071a      	lsls	r2, r3, #28
 8011342:	d52f      	bpl.n	80113a4 <__swbuf_r+0x84>
 8011344:	6923      	ldr	r3, [r4, #16]
 8011346:	b36b      	cbz	r3, 80113a4 <__swbuf_r+0x84>
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	6820      	ldr	r0, [r4, #0]
 801134c:	1ac0      	subs	r0, r0, r3
 801134e:	6963      	ldr	r3, [r4, #20]
 8011350:	b2f6      	uxtb	r6, r6
 8011352:	4283      	cmp	r3, r0
 8011354:	4637      	mov	r7, r6
 8011356:	dc04      	bgt.n	8011362 <__swbuf_r+0x42>
 8011358:	4621      	mov	r1, r4
 801135a:	4628      	mov	r0, r5
 801135c:	f000 f93c 	bl	80115d8 <_fflush_r>
 8011360:	bb30      	cbnz	r0, 80113b0 <__swbuf_r+0x90>
 8011362:	68a3      	ldr	r3, [r4, #8]
 8011364:	3b01      	subs	r3, #1
 8011366:	60a3      	str	r3, [r4, #8]
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	1c5a      	adds	r2, r3, #1
 801136c:	6022      	str	r2, [r4, #0]
 801136e:	701e      	strb	r6, [r3, #0]
 8011370:	6963      	ldr	r3, [r4, #20]
 8011372:	3001      	adds	r0, #1
 8011374:	4283      	cmp	r3, r0
 8011376:	d004      	beq.n	8011382 <__swbuf_r+0x62>
 8011378:	89a3      	ldrh	r3, [r4, #12]
 801137a:	07db      	lsls	r3, r3, #31
 801137c:	d506      	bpl.n	801138c <__swbuf_r+0x6c>
 801137e:	2e0a      	cmp	r6, #10
 8011380:	d104      	bne.n	801138c <__swbuf_r+0x6c>
 8011382:	4621      	mov	r1, r4
 8011384:	4628      	mov	r0, r5
 8011386:	f000 f927 	bl	80115d8 <_fflush_r>
 801138a:	b988      	cbnz	r0, 80113b0 <__swbuf_r+0x90>
 801138c:	4638      	mov	r0, r7
 801138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011390:	4b0a      	ldr	r3, [pc, #40]	; (80113bc <__swbuf_r+0x9c>)
 8011392:	429c      	cmp	r4, r3
 8011394:	d101      	bne.n	801139a <__swbuf_r+0x7a>
 8011396:	68ac      	ldr	r4, [r5, #8]
 8011398:	e7cf      	b.n	801133a <__swbuf_r+0x1a>
 801139a:	4b09      	ldr	r3, [pc, #36]	; (80113c0 <__swbuf_r+0xa0>)
 801139c:	429c      	cmp	r4, r3
 801139e:	bf08      	it	eq
 80113a0:	68ec      	ldreq	r4, [r5, #12]
 80113a2:	e7ca      	b.n	801133a <__swbuf_r+0x1a>
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f000 f81a 	bl	80113e0 <__swsetup_r>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d0cb      	beq.n	8011348 <__swbuf_r+0x28>
 80113b0:	f04f 37ff 	mov.w	r7, #4294967295
 80113b4:	e7ea      	b.n	801138c <__swbuf_r+0x6c>
 80113b6:	bf00      	nop
 80113b8:	080149b4 	.word	0x080149b4
 80113bc:	080149d4 	.word	0x080149d4
 80113c0:	08014994 	.word	0x08014994

080113c4 <__ascii_wctomb>:
 80113c4:	b149      	cbz	r1, 80113da <__ascii_wctomb+0x16>
 80113c6:	2aff      	cmp	r2, #255	; 0xff
 80113c8:	bf85      	ittet	hi
 80113ca:	238a      	movhi	r3, #138	; 0x8a
 80113cc:	6003      	strhi	r3, [r0, #0]
 80113ce:	700a      	strbls	r2, [r1, #0]
 80113d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80113d4:	bf98      	it	ls
 80113d6:	2001      	movls	r0, #1
 80113d8:	4770      	bx	lr
 80113da:	4608      	mov	r0, r1
 80113dc:	4770      	bx	lr
	...

080113e0 <__swsetup_r>:
 80113e0:	4b32      	ldr	r3, [pc, #200]	; (80114ac <__swsetup_r+0xcc>)
 80113e2:	b570      	push	{r4, r5, r6, lr}
 80113e4:	681d      	ldr	r5, [r3, #0]
 80113e6:	4606      	mov	r6, r0
 80113e8:	460c      	mov	r4, r1
 80113ea:	b125      	cbz	r5, 80113f6 <__swsetup_r+0x16>
 80113ec:	69ab      	ldr	r3, [r5, #24]
 80113ee:	b913      	cbnz	r3, 80113f6 <__swsetup_r+0x16>
 80113f0:	4628      	mov	r0, r5
 80113f2:	f000 f985 	bl	8011700 <__sinit>
 80113f6:	4b2e      	ldr	r3, [pc, #184]	; (80114b0 <__swsetup_r+0xd0>)
 80113f8:	429c      	cmp	r4, r3
 80113fa:	d10f      	bne.n	801141c <__swsetup_r+0x3c>
 80113fc:	686c      	ldr	r4, [r5, #4]
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011404:	0719      	lsls	r1, r3, #28
 8011406:	d42c      	bmi.n	8011462 <__swsetup_r+0x82>
 8011408:	06dd      	lsls	r5, r3, #27
 801140a:	d411      	bmi.n	8011430 <__swsetup_r+0x50>
 801140c:	2309      	movs	r3, #9
 801140e:	6033      	str	r3, [r6, #0]
 8011410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011414:	81a3      	strh	r3, [r4, #12]
 8011416:	f04f 30ff 	mov.w	r0, #4294967295
 801141a:	e03e      	b.n	801149a <__swsetup_r+0xba>
 801141c:	4b25      	ldr	r3, [pc, #148]	; (80114b4 <__swsetup_r+0xd4>)
 801141e:	429c      	cmp	r4, r3
 8011420:	d101      	bne.n	8011426 <__swsetup_r+0x46>
 8011422:	68ac      	ldr	r4, [r5, #8]
 8011424:	e7eb      	b.n	80113fe <__swsetup_r+0x1e>
 8011426:	4b24      	ldr	r3, [pc, #144]	; (80114b8 <__swsetup_r+0xd8>)
 8011428:	429c      	cmp	r4, r3
 801142a:	bf08      	it	eq
 801142c:	68ec      	ldreq	r4, [r5, #12]
 801142e:	e7e6      	b.n	80113fe <__swsetup_r+0x1e>
 8011430:	0758      	lsls	r0, r3, #29
 8011432:	d512      	bpl.n	801145a <__swsetup_r+0x7a>
 8011434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011436:	b141      	cbz	r1, 801144a <__swsetup_r+0x6a>
 8011438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801143c:	4299      	cmp	r1, r3
 801143e:	d002      	beq.n	8011446 <__swsetup_r+0x66>
 8011440:	4630      	mov	r0, r6
 8011442:	f7ff fb31 	bl	8010aa8 <_free_r>
 8011446:	2300      	movs	r3, #0
 8011448:	6363      	str	r3, [r4, #52]	; 0x34
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011450:	81a3      	strh	r3, [r4, #12]
 8011452:	2300      	movs	r3, #0
 8011454:	6063      	str	r3, [r4, #4]
 8011456:	6923      	ldr	r3, [r4, #16]
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	f043 0308 	orr.w	r3, r3, #8
 8011460:	81a3      	strh	r3, [r4, #12]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	b94b      	cbnz	r3, 801147a <__swsetup_r+0x9a>
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801146c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011470:	d003      	beq.n	801147a <__swsetup_r+0x9a>
 8011472:	4621      	mov	r1, r4
 8011474:	4630      	mov	r0, r6
 8011476:	f000 fa09 	bl	801188c <__smakebuf_r>
 801147a:	89a0      	ldrh	r0, [r4, #12]
 801147c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011480:	f010 0301 	ands.w	r3, r0, #1
 8011484:	d00a      	beq.n	801149c <__swsetup_r+0xbc>
 8011486:	2300      	movs	r3, #0
 8011488:	60a3      	str	r3, [r4, #8]
 801148a:	6963      	ldr	r3, [r4, #20]
 801148c:	425b      	negs	r3, r3
 801148e:	61a3      	str	r3, [r4, #24]
 8011490:	6923      	ldr	r3, [r4, #16]
 8011492:	b943      	cbnz	r3, 80114a6 <__swsetup_r+0xc6>
 8011494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011498:	d1ba      	bne.n	8011410 <__swsetup_r+0x30>
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	0781      	lsls	r1, r0, #30
 801149e:	bf58      	it	pl
 80114a0:	6963      	ldrpl	r3, [r4, #20]
 80114a2:	60a3      	str	r3, [r4, #8]
 80114a4:	e7f4      	b.n	8011490 <__swsetup_r+0xb0>
 80114a6:	2000      	movs	r0, #0
 80114a8:	e7f7      	b.n	801149a <__swsetup_r+0xba>
 80114aa:	bf00      	nop
 80114ac:	20000184 	.word	0x20000184
 80114b0:	080149b4 	.word	0x080149b4
 80114b4:	080149d4 	.word	0x080149d4
 80114b8:	08014994 	.word	0x08014994

080114bc <abort>:
 80114bc:	b508      	push	{r3, lr}
 80114be:	2006      	movs	r0, #6
 80114c0:	f000 fa54 	bl	801196c <raise>
 80114c4:	2001      	movs	r0, #1
 80114c6:	f7f0 fbd5 	bl	8001c74 <_exit>
	...

080114cc <__sflush_r>:
 80114cc:	898a      	ldrh	r2, [r1, #12]
 80114ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d2:	4605      	mov	r5, r0
 80114d4:	0710      	lsls	r0, r2, #28
 80114d6:	460c      	mov	r4, r1
 80114d8:	d458      	bmi.n	801158c <__sflush_r+0xc0>
 80114da:	684b      	ldr	r3, [r1, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	dc05      	bgt.n	80114ec <__sflush_r+0x20>
 80114e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	dc02      	bgt.n	80114ec <__sflush_r+0x20>
 80114e6:	2000      	movs	r0, #0
 80114e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	d0f9      	beq.n	80114e6 <__sflush_r+0x1a>
 80114f2:	2300      	movs	r3, #0
 80114f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114f8:	682f      	ldr	r7, [r5, #0]
 80114fa:	602b      	str	r3, [r5, #0]
 80114fc:	d032      	beq.n	8011564 <__sflush_r+0x98>
 80114fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	075a      	lsls	r2, r3, #29
 8011504:	d505      	bpl.n	8011512 <__sflush_r+0x46>
 8011506:	6863      	ldr	r3, [r4, #4]
 8011508:	1ac0      	subs	r0, r0, r3
 801150a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801150c:	b10b      	cbz	r3, 8011512 <__sflush_r+0x46>
 801150e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011510:	1ac0      	subs	r0, r0, r3
 8011512:	2300      	movs	r3, #0
 8011514:	4602      	mov	r2, r0
 8011516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011518:	6a21      	ldr	r1, [r4, #32]
 801151a:	4628      	mov	r0, r5
 801151c:	47b0      	blx	r6
 801151e:	1c43      	adds	r3, r0, #1
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	d106      	bne.n	8011532 <__sflush_r+0x66>
 8011524:	6829      	ldr	r1, [r5, #0]
 8011526:	291d      	cmp	r1, #29
 8011528:	d82c      	bhi.n	8011584 <__sflush_r+0xb8>
 801152a:	4a2a      	ldr	r2, [pc, #168]	; (80115d4 <__sflush_r+0x108>)
 801152c:	40ca      	lsrs	r2, r1
 801152e:	07d6      	lsls	r6, r2, #31
 8011530:	d528      	bpl.n	8011584 <__sflush_r+0xb8>
 8011532:	2200      	movs	r2, #0
 8011534:	6062      	str	r2, [r4, #4]
 8011536:	04d9      	lsls	r1, r3, #19
 8011538:	6922      	ldr	r2, [r4, #16]
 801153a:	6022      	str	r2, [r4, #0]
 801153c:	d504      	bpl.n	8011548 <__sflush_r+0x7c>
 801153e:	1c42      	adds	r2, r0, #1
 8011540:	d101      	bne.n	8011546 <__sflush_r+0x7a>
 8011542:	682b      	ldr	r3, [r5, #0]
 8011544:	b903      	cbnz	r3, 8011548 <__sflush_r+0x7c>
 8011546:	6560      	str	r0, [r4, #84]	; 0x54
 8011548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801154a:	602f      	str	r7, [r5, #0]
 801154c:	2900      	cmp	r1, #0
 801154e:	d0ca      	beq.n	80114e6 <__sflush_r+0x1a>
 8011550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011554:	4299      	cmp	r1, r3
 8011556:	d002      	beq.n	801155e <__sflush_r+0x92>
 8011558:	4628      	mov	r0, r5
 801155a:	f7ff faa5 	bl	8010aa8 <_free_r>
 801155e:	2000      	movs	r0, #0
 8011560:	6360      	str	r0, [r4, #52]	; 0x34
 8011562:	e7c1      	b.n	80114e8 <__sflush_r+0x1c>
 8011564:	6a21      	ldr	r1, [r4, #32]
 8011566:	2301      	movs	r3, #1
 8011568:	4628      	mov	r0, r5
 801156a:	47b0      	blx	r6
 801156c:	1c41      	adds	r1, r0, #1
 801156e:	d1c7      	bne.n	8011500 <__sflush_r+0x34>
 8011570:	682b      	ldr	r3, [r5, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d0c4      	beq.n	8011500 <__sflush_r+0x34>
 8011576:	2b1d      	cmp	r3, #29
 8011578:	d001      	beq.n	801157e <__sflush_r+0xb2>
 801157a:	2b16      	cmp	r3, #22
 801157c:	d101      	bne.n	8011582 <__sflush_r+0xb6>
 801157e:	602f      	str	r7, [r5, #0]
 8011580:	e7b1      	b.n	80114e6 <__sflush_r+0x1a>
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	e7ad      	b.n	80114e8 <__sflush_r+0x1c>
 801158c:	690f      	ldr	r7, [r1, #16]
 801158e:	2f00      	cmp	r7, #0
 8011590:	d0a9      	beq.n	80114e6 <__sflush_r+0x1a>
 8011592:	0793      	lsls	r3, r2, #30
 8011594:	680e      	ldr	r6, [r1, #0]
 8011596:	bf08      	it	eq
 8011598:	694b      	ldreq	r3, [r1, #20]
 801159a:	600f      	str	r7, [r1, #0]
 801159c:	bf18      	it	ne
 801159e:	2300      	movne	r3, #0
 80115a0:	eba6 0807 	sub.w	r8, r6, r7
 80115a4:	608b      	str	r3, [r1, #8]
 80115a6:	f1b8 0f00 	cmp.w	r8, #0
 80115aa:	dd9c      	ble.n	80114e6 <__sflush_r+0x1a>
 80115ac:	6a21      	ldr	r1, [r4, #32]
 80115ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115b0:	4643      	mov	r3, r8
 80115b2:	463a      	mov	r2, r7
 80115b4:	4628      	mov	r0, r5
 80115b6:	47b0      	blx	r6
 80115b8:	2800      	cmp	r0, #0
 80115ba:	dc06      	bgt.n	80115ca <__sflush_r+0xfe>
 80115bc:	89a3      	ldrh	r3, [r4, #12]
 80115be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	f04f 30ff 	mov.w	r0, #4294967295
 80115c8:	e78e      	b.n	80114e8 <__sflush_r+0x1c>
 80115ca:	4407      	add	r7, r0
 80115cc:	eba8 0800 	sub.w	r8, r8, r0
 80115d0:	e7e9      	b.n	80115a6 <__sflush_r+0xda>
 80115d2:	bf00      	nop
 80115d4:	20400001 	.word	0x20400001

080115d8 <_fflush_r>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	690b      	ldr	r3, [r1, #16]
 80115dc:	4605      	mov	r5, r0
 80115de:	460c      	mov	r4, r1
 80115e0:	b913      	cbnz	r3, 80115e8 <_fflush_r+0x10>
 80115e2:	2500      	movs	r5, #0
 80115e4:	4628      	mov	r0, r5
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	b118      	cbz	r0, 80115f2 <_fflush_r+0x1a>
 80115ea:	6983      	ldr	r3, [r0, #24]
 80115ec:	b90b      	cbnz	r3, 80115f2 <_fflush_r+0x1a>
 80115ee:	f000 f887 	bl	8011700 <__sinit>
 80115f2:	4b14      	ldr	r3, [pc, #80]	; (8011644 <_fflush_r+0x6c>)
 80115f4:	429c      	cmp	r4, r3
 80115f6:	d11b      	bne.n	8011630 <_fflush_r+0x58>
 80115f8:	686c      	ldr	r4, [r5, #4]
 80115fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d0ef      	beq.n	80115e2 <_fflush_r+0xa>
 8011602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011604:	07d0      	lsls	r0, r2, #31
 8011606:	d404      	bmi.n	8011612 <_fflush_r+0x3a>
 8011608:	0599      	lsls	r1, r3, #22
 801160a:	d402      	bmi.n	8011612 <_fflush_r+0x3a>
 801160c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801160e:	f000 f915 	bl	801183c <__retarget_lock_acquire_recursive>
 8011612:	4628      	mov	r0, r5
 8011614:	4621      	mov	r1, r4
 8011616:	f7ff ff59 	bl	80114cc <__sflush_r>
 801161a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801161c:	07da      	lsls	r2, r3, #31
 801161e:	4605      	mov	r5, r0
 8011620:	d4e0      	bmi.n	80115e4 <_fflush_r+0xc>
 8011622:	89a3      	ldrh	r3, [r4, #12]
 8011624:	059b      	lsls	r3, r3, #22
 8011626:	d4dd      	bmi.n	80115e4 <_fflush_r+0xc>
 8011628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801162a:	f000 f908 	bl	801183e <__retarget_lock_release_recursive>
 801162e:	e7d9      	b.n	80115e4 <_fflush_r+0xc>
 8011630:	4b05      	ldr	r3, [pc, #20]	; (8011648 <_fflush_r+0x70>)
 8011632:	429c      	cmp	r4, r3
 8011634:	d101      	bne.n	801163a <_fflush_r+0x62>
 8011636:	68ac      	ldr	r4, [r5, #8]
 8011638:	e7df      	b.n	80115fa <_fflush_r+0x22>
 801163a:	4b04      	ldr	r3, [pc, #16]	; (801164c <_fflush_r+0x74>)
 801163c:	429c      	cmp	r4, r3
 801163e:	bf08      	it	eq
 8011640:	68ec      	ldreq	r4, [r5, #12]
 8011642:	e7da      	b.n	80115fa <_fflush_r+0x22>
 8011644:	080149b4 	.word	0x080149b4
 8011648:	080149d4 	.word	0x080149d4
 801164c:	08014994 	.word	0x08014994

08011650 <std>:
 8011650:	2300      	movs	r3, #0
 8011652:	b510      	push	{r4, lr}
 8011654:	4604      	mov	r4, r0
 8011656:	e9c0 3300 	strd	r3, r3, [r0]
 801165a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801165e:	6083      	str	r3, [r0, #8]
 8011660:	8181      	strh	r1, [r0, #12]
 8011662:	6643      	str	r3, [r0, #100]	; 0x64
 8011664:	81c2      	strh	r2, [r0, #14]
 8011666:	6183      	str	r3, [r0, #24]
 8011668:	4619      	mov	r1, r3
 801166a:	2208      	movs	r2, #8
 801166c:	305c      	adds	r0, #92	; 0x5c
 801166e:	f7fd fb69 	bl	800ed44 <memset>
 8011672:	4b05      	ldr	r3, [pc, #20]	; (8011688 <std+0x38>)
 8011674:	6263      	str	r3, [r4, #36]	; 0x24
 8011676:	4b05      	ldr	r3, [pc, #20]	; (801168c <std+0x3c>)
 8011678:	62a3      	str	r3, [r4, #40]	; 0x28
 801167a:	4b05      	ldr	r3, [pc, #20]	; (8011690 <std+0x40>)
 801167c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801167e:	4b05      	ldr	r3, [pc, #20]	; (8011694 <std+0x44>)
 8011680:	6224      	str	r4, [r4, #32]
 8011682:	6323      	str	r3, [r4, #48]	; 0x30
 8011684:	bd10      	pop	{r4, pc}
 8011686:	bf00      	nop
 8011688:	080119a5 	.word	0x080119a5
 801168c:	080119c7 	.word	0x080119c7
 8011690:	080119ff 	.word	0x080119ff
 8011694:	08011a23 	.word	0x08011a23

08011698 <_cleanup_r>:
 8011698:	4901      	ldr	r1, [pc, #4]	; (80116a0 <_cleanup_r+0x8>)
 801169a:	f000 b8af 	b.w	80117fc <_fwalk_reent>
 801169e:	bf00      	nop
 80116a0:	080115d9 	.word	0x080115d9

080116a4 <__sfmoreglue>:
 80116a4:	b570      	push	{r4, r5, r6, lr}
 80116a6:	2268      	movs	r2, #104	; 0x68
 80116a8:	1e4d      	subs	r5, r1, #1
 80116aa:	4355      	muls	r5, r2
 80116ac:	460e      	mov	r6, r1
 80116ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116b2:	f7ff fa65 	bl	8010b80 <_malloc_r>
 80116b6:	4604      	mov	r4, r0
 80116b8:	b140      	cbz	r0, 80116cc <__sfmoreglue+0x28>
 80116ba:	2100      	movs	r1, #0
 80116bc:	e9c0 1600 	strd	r1, r6, [r0]
 80116c0:	300c      	adds	r0, #12
 80116c2:	60a0      	str	r0, [r4, #8]
 80116c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116c8:	f7fd fb3c 	bl	800ed44 <memset>
 80116cc:	4620      	mov	r0, r4
 80116ce:	bd70      	pop	{r4, r5, r6, pc}

080116d0 <__sfp_lock_acquire>:
 80116d0:	4801      	ldr	r0, [pc, #4]	; (80116d8 <__sfp_lock_acquire+0x8>)
 80116d2:	f000 b8b3 	b.w	801183c <__retarget_lock_acquire_recursive>
 80116d6:	bf00      	nop
 80116d8:	200060e5 	.word	0x200060e5

080116dc <__sfp_lock_release>:
 80116dc:	4801      	ldr	r0, [pc, #4]	; (80116e4 <__sfp_lock_release+0x8>)
 80116de:	f000 b8ae 	b.w	801183e <__retarget_lock_release_recursive>
 80116e2:	bf00      	nop
 80116e4:	200060e5 	.word	0x200060e5

080116e8 <__sinit_lock_acquire>:
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <__sinit_lock_acquire+0x8>)
 80116ea:	f000 b8a7 	b.w	801183c <__retarget_lock_acquire_recursive>
 80116ee:	bf00      	nop
 80116f0:	200060e6 	.word	0x200060e6

080116f4 <__sinit_lock_release>:
 80116f4:	4801      	ldr	r0, [pc, #4]	; (80116fc <__sinit_lock_release+0x8>)
 80116f6:	f000 b8a2 	b.w	801183e <__retarget_lock_release_recursive>
 80116fa:	bf00      	nop
 80116fc:	200060e6 	.word	0x200060e6

08011700 <__sinit>:
 8011700:	b510      	push	{r4, lr}
 8011702:	4604      	mov	r4, r0
 8011704:	f7ff fff0 	bl	80116e8 <__sinit_lock_acquire>
 8011708:	69a3      	ldr	r3, [r4, #24]
 801170a:	b11b      	cbz	r3, 8011714 <__sinit+0x14>
 801170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011710:	f7ff bff0 	b.w	80116f4 <__sinit_lock_release>
 8011714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011718:	6523      	str	r3, [r4, #80]	; 0x50
 801171a:	4b13      	ldr	r3, [pc, #76]	; (8011768 <__sinit+0x68>)
 801171c:	4a13      	ldr	r2, [pc, #76]	; (801176c <__sinit+0x6c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	62a2      	str	r2, [r4, #40]	; 0x28
 8011722:	42a3      	cmp	r3, r4
 8011724:	bf04      	itt	eq
 8011726:	2301      	moveq	r3, #1
 8011728:	61a3      	streq	r3, [r4, #24]
 801172a:	4620      	mov	r0, r4
 801172c:	f000 f820 	bl	8011770 <__sfp>
 8011730:	6060      	str	r0, [r4, #4]
 8011732:	4620      	mov	r0, r4
 8011734:	f000 f81c 	bl	8011770 <__sfp>
 8011738:	60a0      	str	r0, [r4, #8]
 801173a:	4620      	mov	r0, r4
 801173c:	f000 f818 	bl	8011770 <__sfp>
 8011740:	2200      	movs	r2, #0
 8011742:	60e0      	str	r0, [r4, #12]
 8011744:	2104      	movs	r1, #4
 8011746:	6860      	ldr	r0, [r4, #4]
 8011748:	f7ff ff82 	bl	8011650 <std>
 801174c:	68a0      	ldr	r0, [r4, #8]
 801174e:	2201      	movs	r2, #1
 8011750:	2109      	movs	r1, #9
 8011752:	f7ff ff7d 	bl	8011650 <std>
 8011756:	68e0      	ldr	r0, [r4, #12]
 8011758:	2202      	movs	r2, #2
 801175a:	2112      	movs	r1, #18
 801175c:	f7ff ff78 	bl	8011650 <std>
 8011760:	2301      	movs	r3, #1
 8011762:	61a3      	str	r3, [r4, #24]
 8011764:	e7d2      	b.n	801170c <__sinit+0xc>
 8011766:	bf00      	nop
 8011768:	08014618 	.word	0x08014618
 801176c:	08011699 	.word	0x08011699

08011770 <__sfp>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	4607      	mov	r7, r0
 8011774:	f7ff ffac 	bl	80116d0 <__sfp_lock_acquire>
 8011778:	4b1e      	ldr	r3, [pc, #120]	; (80117f4 <__sfp+0x84>)
 801177a:	681e      	ldr	r6, [r3, #0]
 801177c:	69b3      	ldr	r3, [r6, #24]
 801177e:	b913      	cbnz	r3, 8011786 <__sfp+0x16>
 8011780:	4630      	mov	r0, r6
 8011782:	f7ff ffbd 	bl	8011700 <__sinit>
 8011786:	3648      	adds	r6, #72	; 0x48
 8011788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801178c:	3b01      	subs	r3, #1
 801178e:	d503      	bpl.n	8011798 <__sfp+0x28>
 8011790:	6833      	ldr	r3, [r6, #0]
 8011792:	b30b      	cbz	r3, 80117d8 <__sfp+0x68>
 8011794:	6836      	ldr	r6, [r6, #0]
 8011796:	e7f7      	b.n	8011788 <__sfp+0x18>
 8011798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801179c:	b9d5      	cbnz	r5, 80117d4 <__sfp+0x64>
 801179e:	4b16      	ldr	r3, [pc, #88]	; (80117f8 <__sfp+0x88>)
 80117a0:	60e3      	str	r3, [r4, #12]
 80117a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117a6:	6665      	str	r5, [r4, #100]	; 0x64
 80117a8:	f000 f847 	bl	801183a <__retarget_lock_init_recursive>
 80117ac:	f7ff ff96 	bl	80116dc <__sfp_lock_release>
 80117b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117b8:	6025      	str	r5, [r4, #0]
 80117ba:	61a5      	str	r5, [r4, #24]
 80117bc:	2208      	movs	r2, #8
 80117be:	4629      	mov	r1, r5
 80117c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117c4:	f7fd fabe 	bl	800ed44 <memset>
 80117c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117d0:	4620      	mov	r0, r4
 80117d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d4:	3468      	adds	r4, #104	; 0x68
 80117d6:	e7d9      	b.n	801178c <__sfp+0x1c>
 80117d8:	2104      	movs	r1, #4
 80117da:	4638      	mov	r0, r7
 80117dc:	f7ff ff62 	bl	80116a4 <__sfmoreglue>
 80117e0:	4604      	mov	r4, r0
 80117e2:	6030      	str	r0, [r6, #0]
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d1d5      	bne.n	8011794 <__sfp+0x24>
 80117e8:	f7ff ff78 	bl	80116dc <__sfp_lock_release>
 80117ec:	230c      	movs	r3, #12
 80117ee:	603b      	str	r3, [r7, #0]
 80117f0:	e7ee      	b.n	80117d0 <__sfp+0x60>
 80117f2:	bf00      	nop
 80117f4:	08014618 	.word	0x08014618
 80117f8:	ffff0001 	.word	0xffff0001

080117fc <_fwalk_reent>:
 80117fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011800:	4606      	mov	r6, r0
 8011802:	4688      	mov	r8, r1
 8011804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011808:	2700      	movs	r7, #0
 801180a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801180e:	f1b9 0901 	subs.w	r9, r9, #1
 8011812:	d505      	bpl.n	8011820 <_fwalk_reent+0x24>
 8011814:	6824      	ldr	r4, [r4, #0]
 8011816:	2c00      	cmp	r4, #0
 8011818:	d1f7      	bne.n	801180a <_fwalk_reent+0xe>
 801181a:	4638      	mov	r0, r7
 801181c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011820:	89ab      	ldrh	r3, [r5, #12]
 8011822:	2b01      	cmp	r3, #1
 8011824:	d907      	bls.n	8011836 <_fwalk_reent+0x3a>
 8011826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801182a:	3301      	adds	r3, #1
 801182c:	d003      	beq.n	8011836 <_fwalk_reent+0x3a>
 801182e:	4629      	mov	r1, r5
 8011830:	4630      	mov	r0, r6
 8011832:	47c0      	blx	r8
 8011834:	4307      	orrs	r7, r0
 8011836:	3568      	adds	r5, #104	; 0x68
 8011838:	e7e9      	b.n	801180e <_fwalk_reent+0x12>

0801183a <__retarget_lock_init_recursive>:
 801183a:	4770      	bx	lr

0801183c <__retarget_lock_acquire_recursive>:
 801183c:	4770      	bx	lr

0801183e <__retarget_lock_release_recursive>:
 801183e:	4770      	bx	lr

08011840 <__swhatbuf_r>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	460e      	mov	r6, r1
 8011844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011848:	2900      	cmp	r1, #0
 801184a:	b096      	sub	sp, #88	; 0x58
 801184c:	4614      	mov	r4, r2
 801184e:	461d      	mov	r5, r3
 8011850:	da08      	bge.n	8011864 <__swhatbuf_r+0x24>
 8011852:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011856:	2200      	movs	r2, #0
 8011858:	602a      	str	r2, [r5, #0]
 801185a:	061a      	lsls	r2, r3, #24
 801185c:	d410      	bmi.n	8011880 <__swhatbuf_r+0x40>
 801185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011862:	e00e      	b.n	8011882 <__swhatbuf_r+0x42>
 8011864:	466a      	mov	r2, sp
 8011866:	f000 f903 	bl	8011a70 <_fstat_r>
 801186a:	2800      	cmp	r0, #0
 801186c:	dbf1      	blt.n	8011852 <__swhatbuf_r+0x12>
 801186e:	9a01      	ldr	r2, [sp, #4]
 8011870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011878:	425a      	negs	r2, r3
 801187a:	415a      	adcs	r2, r3
 801187c:	602a      	str	r2, [r5, #0]
 801187e:	e7ee      	b.n	801185e <__swhatbuf_r+0x1e>
 8011880:	2340      	movs	r3, #64	; 0x40
 8011882:	2000      	movs	r0, #0
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	b016      	add	sp, #88	; 0x58
 8011888:	bd70      	pop	{r4, r5, r6, pc}
	...

0801188c <__smakebuf_r>:
 801188c:	898b      	ldrh	r3, [r1, #12]
 801188e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011890:	079d      	lsls	r5, r3, #30
 8011892:	4606      	mov	r6, r0
 8011894:	460c      	mov	r4, r1
 8011896:	d507      	bpl.n	80118a8 <__smakebuf_r+0x1c>
 8011898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801189c:	6023      	str	r3, [r4, #0]
 801189e:	6123      	str	r3, [r4, #16]
 80118a0:	2301      	movs	r3, #1
 80118a2:	6163      	str	r3, [r4, #20]
 80118a4:	b002      	add	sp, #8
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	ab01      	add	r3, sp, #4
 80118aa:	466a      	mov	r2, sp
 80118ac:	f7ff ffc8 	bl	8011840 <__swhatbuf_r>
 80118b0:	9900      	ldr	r1, [sp, #0]
 80118b2:	4605      	mov	r5, r0
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff f963 	bl	8010b80 <_malloc_r>
 80118ba:	b948      	cbnz	r0, 80118d0 <__smakebuf_r+0x44>
 80118bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118c0:	059a      	lsls	r2, r3, #22
 80118c2:	d4ef      	bmi.n	80118a4 <__smakebuf_r+0x18>
 80118c4:	f023 0303 	bic.w	r3, r3, #3
 80118c8:	f043 0302 	orr.w	r3, r3, #2
 80118cc:	81a3      	strh	r3, [r4, #12]
 80118ce:	e7e3      	b.n	8011898 <__smakebuf_r+0xc>
 80118d0:	4b0d      	ldr	r3, [pc, #52]	; (8011908 <__smakebuf_r+0x7c>)
 80118d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	6020      	str	r0, [r4, #0]
 80118d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118dc:	81a3      	strh	r3, [r4, #12]
 80118de:	9b00      	ldr	r3, [sp, #0]
 80118e0:	6163      	str	r3, [r4, #20]
 80118e2:	9b01      	ldr	r3, [sp, #4]
 80118e4:	6120      	str	r0, [r4, #16]
 80118e6:	b15b      	cbz	r3, 8011900 <__smakebuf_r+0x74>
 80118e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118ec:	4630      	mov	r0, r6
 80118ee:	f000 f8d1 	bl	8011a94 <_isatty_r>
 80118f2:	b128      	cbz	r0, 8011900 <__smakebuf_r+0x74>
 80118f4:	89a3      	ldrh	r3, [r4, #12]
 80118f6:	f023 0303 	bic.w	r3, r3, #3
 80118fa:	f043 0301 	orr.w	r3, r3, #1
 80118fe:	81a3      	strh	r3, [r4, #12]
 8011900:	89a0      	ldrh	r0, [r4, #12]
 8011902:	4305      	orrs	r5, r0
 8011904:	81a5      	strh	r5, [r4, #12]
 8011906:	e7cd      	b.n	80118a4 <__smakebuf_r+0x18>
 8011908:	08011699 	.word	0x08011699

0801190c <_malloc_usable_size_r>:
 801190c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011910:	1f18      	subs	r0, r3, #4
 8011912:	2b00      	cmp	r3, #0
 8011914:	bfbc      	itt	lt
 8011916:	580b      	ldrlt	r3, [r1, r0]
 8011918:	18c0      	addlt	r0, r0, r3
 801191a:	4770      	bx	lr

0801191c <_raise_r>:
 801191c:	291f      	cmp	r1, #31
 801191e:	b538      	push	{r3, r4, r5, lr}
 8011920:	4604      	mov	r4, r0
 8011922:	460d      	mov	r5, r1
 8011924:	d904      	bls.n	8011930 <_raise_r+0x14>
 8011926:	2316      	movs	r3, #22
 8011928:	6003      	str	r3, [r0, #0]
 801192a:	f04f 30ff 	mov.w	r0, #4294967295
 801192e:	bd38      	pop	{r3, r4, r5, pc}
 8011930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011932:	b112      	cbz	r2, 801193a <_raise_r+0x1e>
 8011934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011938:	b94b      	cbnz	r3, 801194e <_raise_r+0x32>
 801193a:	4620      	mov	r0, r4
 801193c:	f000 f830 	bl	80119a0 <_getpid_r>
 8011940:	462a      	mov	r2, r5
 8011942:	4601      	mov	r1, r0
 8011944:	4620      	mov	r0, r4
 8011946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801194a:	f000 b817 	b.w	801197c <_kill_r>
 801194e:	2b01      	cmp	r3, #1
 8011950:	d00a      	beq.n	8011968 <_raise_r+0x4c>
 8011952:	1c59      	adds	r1, r3, #1
 8011954:	d103      	bne.n	801195e <_raise_r+0x42>
 8011956:	2316      	movs	r3, #22
 8011958:	6003      	str	r3, [r0, #0]
 801195a:	2001      	movs	r0, #1
 801195c:	e7e7      	b.n	801192e <_raise_r+0x12>
 801195e:	2400      	movs	r4, #0
 8011960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011964:	4628      	mov	r0, r5
 8011966:	4798      	blx	r3
 8011968:	2000      	movs	r0, #0
 801196a:	e7e0      	b.n	801192e <_raise_r+0x12>

0801196c <raise>:
 801196c:	4b02      	ldr	r3, [pc, #8]	; (8011978 <raise+0xc>)
 801196e:	4601      	mov	r1, r0
 8011970:	6818      	ldr	r0, [r3, #0]
 8011972:	f7ff bfd3 	b.w	801191c <_raise_r>
 8011976:	bf00      	nop
 8011978:	20000184 	.word	0x20000184

0801197c <_kill_r>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4d07      	ldr	r5, [pc, #28]	; (801199c <_kill_r+0x20>)
 8011980:	2300      	movs	r3, #0
 8011982:	4604      	mov	r4, r0
 8011984:	4608      	mov	r0, r1
 8011986:	4611      	mov	r1, r2
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	f7f0 f963 	bl	8001c54 <_kill>
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	d102      	bne.n	8011998 <_kill_r+0x1c>
 8011992:	682b      	ldr	r3, [r5, #0]
 8011994:	b103      	cbz	r3, 8011998 <_kill_r+0x1c>
 8011996:	6023      	str	r3, [r4, #0]
 8011998:	bd38      	pop	{r3, r4, r5, pc}
 801199a:	bf00      	nop
 801199c:	200060e0 	.word	0x200060e0

080119a0 <_getpid_r>:
 80119a0:	f7f0 b950 	b.w	8001c44 <_getpid>

080119a4 <__sread>:
 80119a4:	b510      	push	{r4, lr}
 80119a6:	460c      	mov	r4, r1
 80119a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ac:	f000 f894 	bl	8011ad8 <_read_r>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	bfab      	itete	ge
 80119b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80119b6:	89a3      	ldrhlt	r3, [r4, #12]
 80119b8:	181b      	addge	r3, r3, r0
 80119ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80119be:	bfac      	ite	ge
 80119c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80119c2:	81a3      	strhlt	r3, [r4, #12]
 80119c4:	bd10      	pop	{r4, pc}

080119c6 <__swrite>:
 80119c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ca:	461f      	mov	r7, r3
 80119cc:	898b      	ldrh	r3, [r1, #12]
 80119ce:	05db      	lsls	r3, r3, #23
 80119d0:	4605      	mov	r5, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	4616      	mov	r6, r2
 80119d6:	d505      	bpl.n	80119e4 <__swrite+0x1e>
 80119d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119dc:	2302      	movs	r3, #2
 80119de:	2200      	movs	r2, #0
 80119e0:	f000 f868 	bl	8011ab4 <_lseek_r>
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119ee:	81a3      	strh	r3, [r4, #12]
 80119f0:	4632      	mov	r2, r6
 80119f2:	463b      	mov	r3, r7
 80119f4:	4628      	mov	r0, r5
 80119f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119fa:	f000 b817 	b.w	8011a2c <_write_r>

080119fe <__sseek>:
 80119fe:	b510      	push	{r4, lr}
 8011a00:	460c      	mov	r4, r1
 8011a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a06:	f000 f855 	bl	8011ab4 <_lseek_r>
 8011a0a:	1c43      	adds	r3, r0, #1
 8011a0c:	89a3      	ldrh	r3, [r4, #12]
 8011a0e:	bf15      	itete	ne
 8011a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a1a:	81a3      	strheq	r3, [r4, #12]
 8011a1c:	bf18      	it	ne
 8011a1e:	81a3      	strhne	r3, [r4, #12]
 8011a20:	bd10      	pop	{r4, pc}

08011a22 <__sclose>:
 8011a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a26:	f000 b813 	b.w	8011a50 <_close_r>
	...

08011a2c <_write_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4d07      	ldr	r5, [pc, #28]	; (8011a4c <_write_r+0x20>)
 8011a30:	4604      	mov	r4, r0
 8011a32:	4608      	mov	r0, r1
 8011a34:	4611      	mov	r1, r2
 8011a36:	2200      	movs	r2, #0
 8011a38:	602a      	str	r2, [r5, #0]
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	f7f0 f941 	bl	8001cc2 <_write>
 8011a40:	1c43      	adds	r3, r0, #1
 8011a42:	d102      	bne.n	8011a4a <_write_r+0x1e>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b103      	cbz	r3, 8011a4a <_write_r+0x1e>
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	200060e0 	.word	0x200060e0

08011a50 <_close_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d06      	ldr	r5, [pc, #24]	; (8011a6c <_close_r+0x1c>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	f7f0 f94d 	bl	8001cfa <_close>
 8011a60:	1c43      	adds	r3, r0, #1
 8011a62:	d102      	bne.n	8011a6a <_close_r+0x1a>
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	b103      	cbz	r3, 8011a6a <_close_r+0x1a>
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	bd38      	pop	{r3, r4, r5, pc}
 8011a6c:	200060e0 	.word	0x200060e0

08011a70 <_fstat_r>:
 8011a70:	b538      	push	{r3, r4, r5, lr}
 8011a72:	4d07      	ldr	r5, [pc, #28]	; (8011a90 <_fstat_r+0x20>)
 8011a74:	2300      	movs	r3, #0
 8011a76:	4604      	mov	r4, r0
 8011a78:	4608      	mov	r0, r1
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	602b      	str	r3, [r5, #0]
 8011a7e:	f7f0 f948 	bl	8001d12 <_fstat>
 8011a82:	1c43      	adds	r3, r0, #1
 8011a84:	d102      	bne.n	8011a8c <_fstat_r+0x1c>
 8011a86:	682b      	ldr	r3, [r5, #0]
 8011a88:	b103      	cbz	r3, 8011a8c <_fstat_r+0x1c>
 8011a8a:	6023      	str	r3, [r4, #0]
 8011a8c:	bd38      	pop	{r3, r4, r5, pc}
 8011a8e:	bf00      	nop
 8011a90:	200060e0 	.word	0x200060e0

08011a94 <_isatty_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4d06      	ldr	r5, [pc, #24]	; (8011ab0 <_isatty_r+0x1c>)
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	602b      	str	r3, [r5, #0]
 8011aa0:	f7f0 f947 	bl	8001d32 <_isatty>
 8011aa4:	1c43      	adds	r3, r0, #1
 8011aa6:	d102      	bne.n	8011aae <_isatty_r+0x1a>
 8011aa8:	682b      	ldr	r3, [r5, #0]
 8011aaa:	b103      	cbz	r3, 8011aae <_isatty_r+0x1a>
 8011aac:	6023      	str	r3, [r4, #0]
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	200060e0 	.word	0x200060e0

08011ab4 <_lseek_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d07      	ldr	r5, [pc, #28]	; (8011ad4 <_lseek_r+0x20>)
 8011ab8:	4604      	mov	r4, r0
 8011aba:	4608      	mov	r0, r1
 8011abc:	4611      	mov	r1, r2
 8011abe:	2200      	movs	r2, #0
 8011ac0:	602a      	str	r2, [r5, #0]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	f7f0 f940 	bl	8001d48 <_lseek>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d102      	bne.n	8011ad2 <_lseek_r+0x1e>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	b103      	cbz	r3, 8011ad2 <_lseek_r+0x1e>
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	bd38      	pop	{r3, r4, r5, pc}
 8011ad4:	200060e0 	.word	0x200060e0

08011ad8 <_read_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	; (8011af8 <_read_r+0x20>)
 8011adc:	4604      	mov	r4, r0
 8011ade:	4608      	mov	r0, r1
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	602a      	str	r2, [r5, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f7f0 f8ce 	bl	8001c88 <_read>
 8011aec:	1c43      	adds	r3, r0, #1
 8011aee:	d102      	bne.n	8011af6 <_read_r+0x1e>
 8011af0:	682b      	ldr	r3, [r5, #0]
 8011af2:	b103      	cbz	r3, 8011af6 <_read_r+0x1e>
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	bd38      	pop	{r3, r4, r5, pc}
 8011af8:	200060e0 	.word	0x200060e0

08011afc <_init>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	bf00      	nop
 8011b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b02:	bc08      	pop	{r3}
 8011b04:	469e      	mov	lr, r3
 8011b06:	4770      	bx	lr

08011b08 <_fini>:
 8011b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0a:	bf00      	nop
 8011b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b0e:	bc08      	pop	{r3}
 8011b10:	469e      	mov	lr, r3
 8011b12:	4770      	bx	lr
